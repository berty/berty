syntax = "proto3";

package berty.protocol.v1;

import "bertytypes.proto";

option go_package = "berty.tech/berty/go/pkg/bertyprotocol";

// ProtocolService is the top-level API to manage an instance of the Berty Protocol.
// Each Berty Protocol Instance is considered as a Berty device and is associated with a Berty user.
service ProtocolService {
  // InstanceExportData exports instance data
  rpc InstanceExportData (types.v1.InstanceExportData.Request) returns (types.v1.InstanceExportData.Reply);

  // InstanceGetConfiguration gets current configuration of this protocol instance
  rpc InstanceGetConfiguration (types.v1.InstanceGetConfiguration.Request) returns (types.v1.InstanceGetConfiguration.Reply);

  // ContactRequestReference retrieves the information required to create a reference (types.v1.ie. included in a shareable link) to the current account
  rpc ContactRequestReference (types.v1.ContactRequestReference.Request) returns (types.v1.ContactRequestReference.Reply);

  // ContactRequestDisable disables incoming contact requests
  rpc ContactRequestDisable (types.v1.ContactRequestDisable.Request) returns (types.v1.ContactRequestDisable.Reply);

  // ContactRequestEnable enables incoming contact requests
  rpc ContactRequestEnable (types.v1.ContactRequestEnable.Request) returns (types.v1.ContactRequestEnable.Reply);

  // ContactRequestResetReference changes the contact request reference
  rpc ContactRequestResetReference (types.v1.ContactRequestResetReference.Request) returns (types.v1.ContactRequestResetReference.Reply);

  // ContactRequestSend attempt to send a contact request
  rpc ContactRequestSend (types.v1.ContactRequestSend.Request) returns (types.v1.ContactRequestSend.Reply);

  // ContactRequestAccept accepts a contact request
  rpc ContactRequestAccept (types.v1.ContactRequestAccept.Request) returns (types.v1.ContactRequestAccept.Reply);

  // ContactRequestDiscard ignores a contact request, without informing the other user
  rpc ContactRequestDiscard (types.v1.ContactRequestDiscard.Request) returns (types.v1.ContactRequestDiscard.Reply);

  // ContactBlock blocks a contact from sending requests
  rpc ContactBlock (types.v1.ContactBlock.Request) returns (types.v1.ContactBlock.Reply);

  // ContactUnblock unblocks a contact from sending requests
  rpc ContactUnblock (types.v1.ContactUnblock.Request) returns (types.v1.ContactUnblock.Reply);

  // ContactAliasKeySend send an alias key to a contact, the contact will be able to assert that your account is being present on a multi-member group
  rpc ContactAliasKeySend (types.v1.ContactAliasKeySend.Request) returns (types.v1.ContactAliasKeySend.Reply);

  // MultiMemberGroupCreate creates a new multi-member group
  rpc MultiMemberGroupCreate (types.v1.MultiMemberGroupCreate.Request) returns (types.v1.MultiMemberGroupCreate.Reply);

  // MultiMemberGroupJoin joins a multi-member group
  rpc MultiMemberGroupJoin (types.v1.MultiMemberGroupJoin.Request) returns (types.v1.MultiMemberGroupJoin.Reply);

  // MultiMemberGroupLeave leaves a multi-member group
  rpc MultiMemberGroupLeave (types.v1.MultiMemberGroupLeave.Request) returns (types.v1.MultiMemberGroupLeave.Reply);

  // MultiMemberGroupAliasResolverDisclose discloses your alias resolver key
  rpc MultiMemberGroupAliasResolverDisclose (types.v1.MultiMemberGroupAliasResolverDisclose.Request) returns (types.v1.MultiMemberGroupAliasResolverDisclose.Reply);

  // MultiMemberGroupAdminRoleGrant grants an admin role to a group member
  rpc MultiMemberGroupAdminRoleGrant (types.v1.MultiMemberGroupAdminRoleGrant.Request) returns (types.v1.MultiMemberGroupAdminRoleGrant.Reply);

  // MultiMemberGroupInvitationCreate creates an invitation to a multi-member group
  rpc MultiMemberGroupInvitationCreate (types.v1.MultiMemberGroupInvitationCreate.Request) returns (types.v1.MultiMemberGroupInvitationCreate.Reply);

  // AppMetadataSend adds an app event to the metadata store, the message is encrypted using a symmetric key and readable by future group members
  rpc AppMetadataSend (types.v1.AppMetadataSend.Request) returns (types.v1.AppMetadataSend.Reply);

  // AppMessageSend adds an app event to the message store, the message is encrypted using a derived key and readable by current group members
  rpc AppMessageSend (types.v1.AppMessageSend.Request) returns (types.v1.AppMessageSend.Reply);

  // GroupMetadataList replays previous and subscribes to new metadata events from the group
  rpc GroupMetadataList (types.v1.GroupMetadataList.Request) returns (stream types.v1.GroupMetadataEvent);

  // GroupMessageList replays previous and subscribes to new message events from the group
  rpc GroupMessageList (types.v1.GroupMessageList.Request) returns (stream types.v1.GroupMessageEvent);

  // GroupInfo retrieves information about a group
  rpc GroupInfo (types.v1.GroupInfo.Request) returns (types.v1.GroupInfo.Reply);

  // ActivateGroup explicitly opens a group
  rpc ActivateGroup (types.v1.ActivateGroup.Request) returns (types.v1.ActivateGroup.Reply);

  // DeactivateGroup closes a group
  rpc DeactivateGroup (types.v1.DeactivateGroup.Request) returns (types.v1.DeactivateGroup.Reply);

  rpc DebugListGroups (types.v1.DebugListGroups.Request) returns (stream types.v1.DebugListGroups.Reply);

  rpc DebugInspectGroupStore (types.v1.DebugInspectGroupStore.Request) returns (stream types.v1.DebugInspectGroupStore.Reply);

  rpc DebugGroup (types.v1.DebugGroup.Request) returns (types.v1.DebugGroup.Reply);

  rpc SystemInfo(types.v1.SystemInfo.Request) returns (types.v1.SystemInfo.Reply);

  // AuthServiceInitFlow Initialize an authentication flow
  rpc AuthServiceInitFlow (types.v1.AuthServiceInitFlow.Request) returns (types.v1.AuthServiceInitFlow.Reply);

  // AuthServiceCompleteFlow Completes an authentication flow
  rpc AuthServiceCompleteFlow (types.v1.AuthServiceCompleteFlow.Request) returns (types.v1.AuthServiceCompleteFlow.Reply);

  // ServicesTokenList Retrieves the list of services tokens
  rpc ServicesTokenList (types.v1.ServicesTokenList.Request) returns (stream types.v1.ServicesTokenList.Reply);

  // ReplicationServiceRegisterGroup Asks a replication service to distribute a group contents
  rpc ReplicationServiceRegisterGroup (types.v1.ReplicationServiceRegisterGroup.Request) returns (types.v1.ReplicationServiceRegisterGroup.Reply);
}
