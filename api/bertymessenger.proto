syntax = "proto3";

package berty.messenger.v1;

import "gogoproto/gogo.proto";
import "bertytypes.proto";

option go_package = "berty.tech/berty/go/pkg/bertymessenger";
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// MessengerService is the top-level API that uses the Berty Protocol to implement the Berty Messenger specific logic.
// Today, most of the Berty Messenger logic is implemented directly in the application (see the /js folder of this repo).
service MessengerService {
  // InstanceShareableBertyID returns a Berty ID that can be shared as a string, QR code or deep link.
  rpc InstanceShareableBertyID(InstanceShareableBertyID.Request) returns (InstanceShareableBertyID.Reply);

  // ShareableBertyGroup returns a Berty Group that can be shared as a string, QR code or deep link.
  rpc ShareableBertyGroup(ShareableBertyGroup.Request) returns (ShareableBertyGroup.Reply);

  // DevShareInstanceBertyID shares your Berty ID on a dev channel.
  // TODO: remove for public.
  rpc DevShareInstanceBertyID(DevShareInstanceBertyID.Request) returns (DevShareInstanceBertyID.Reply);

  // ParseDeepLink parses a link in the form of berty://xxx or https://berty.tech/id# and returns a structure
  // that can be used to display information.
  // This action is read-only.
  rpc ParseDeepLink(ParseDeepLink.Request) returns (ParseDeepLink.Reply);

  // SendContactRequest takes the payload received from ParseDeepLink and send a contact request using the Berty Protocol.
  rpc SendContactRequest(SendContactRequest.Request) returns (SendContactRequest.Reply);

  // SendMessage sends a message to a group.
  rpc SendMessage(SendMessage.Request) returns (SendMessage.Reply);

  // SendReplyOptions sends a list of prefilled response options to a group.
  rpc SendReplyOptions (SendReplyOptions.Request) returns (SendReplyOptions.Reply);

  // SendAck sends an acknowledge payload for given message id.
  rpc SendAck(SendAck.Request) returns (SendAck.Reply);

  // SystemInfo returns runtime information.
  rpc SystemInfo(SystemInfo.Request) returns (SystemInfo.Reply);

  // Use to test stream.
  rpc EchoTest(EchoTest.Request) returns (stream EchoTest.Reply);

  rpc ConversationStream(ConversationStream.Request) returns (stream ConversationStream.Reply);
  rpc EventStream(EventStream.Request) returns (stream EventStream.Reply);
  rpc ConversationCreate(ConversationCreate.Request) returns (ConversationCreate.Reply);
  rpc ConversationJoin(ConversationJoin.Request) returns (ConversationJoin.Reply);
  rpc AccountGet(AccountGet.Request) returns (AccountGet.Reply);
  rpc AccountUpdate(AccountUpdate.Request) returns (AccountUpdate.Reply);
  rpc ContactRequest(ContactRequest.Request) returns (ContactRequest.Reply);
  rpc ContactAccept(ContactAccept.Request) returns (ContactAccept.Reply);
  rpc Interact(Interact.Request) returns (Interact.Reply);
  rpc ConversationOpen(ConversationOpen.Request) returns (ConversationOpen.Reply);
  rpc ConversationClose(ConversationClose.Request) returns (ConversationClose.Reply);

  // ServicesTokenList Retrieves the list of service server tokens
  rpc ServicesTokenList(types.v1.ServicesTokenList.Request) returns (stream types.v1.ServicesTokenList.Reply);

  // ReplicationServiceRegisterGroup Asks a replication service to distribute a group contents
  rpc ReplicationServiceRegisterGroup(ReplicationServiceRegisterGroup.Request) returns (ReplicationServiceRegisterGroup.Reply);

  // ReplicationSetAutoEnable Sets whether new groups should be replicated automatically or not
  rpc ReplicationSetAutoEnable(ReplicationSetAutoEnable.Request) returns (ReplicationSetAutoEnable.Reply);

  // BannerQuote returns the quote of the day.
  rpc BannerQuote(BannerQuote.Request) returns (BannerQuote.Reply);

  // GetUsername returns the name of the device/user using Android/iOS/universal API
  rpc GetUsername(GetUsername.Request) returns (GetUsername.Reply);

  // InstanceExportData exports instance data
  rpc InstanceExportData (InstanceExportData.Request) returns (stream InstanceExportData.Reply);
}

message ConversationOpen {
  message Request {
    string group_pk = 1 [(gogoproto.customname) = "GroupPK"];
  }
  message Reply {}
}

message ConversationClose {
  message Request {
    string group_pk = 1 [(gogoproto.customname) = "GroupPK"];
  }
  message Reply {}
}

message EchoTest {
  message Request {
    uint64 delay = 1; // in ms
    string echo = 2;
  }
  message Reply {
    string echo = 1;
  }
}

message InstanceShareableBertyID {
  message Request {
    // reset will regenerate a new link
    bool reset = 1;
    string display_name = 2;
  }
  message Reply {
    BertyID berty_id = 1 [(gogoproto.customname) = "BertyID"];
    string berty_id_payload = 2 [(gogoproto.customname) = "BertyIDPayload"];
    string deep_link = 3 [(gogoproto.customname) = "DeepLink"];
    string html_url = 4 [(gogoproto.customname) = "HTMLURL"];
  }
}

message ShareableBertyGroup {
  message Request {
    bytes group_pk = 1 [(gogoproto.customname) = "GroupPK"];
    string group_name = 2;
  }
  message Reply {
    BertyGroup berty_group = 1 [(gogoproto.customname) = "BertyGroup"];
    string berty_group_payload = 2 [(gogoproto.customname) = "BertyGroupPayload"];
    string deep_link = 3 [(gogoproto.customname) = "DeepLink"];
    string html_url = 4 [(gogoproto.customname) = "HTMLURL"];
  }
}

message DevShareInstanceBertyID {
  message Request {
    // reset will regenerate a new link
    bool reset = 1;
    string display_name = 2;
  }
  message Reply {}
}

message ParseDeepLink {
  message Request {
    string link = 1;
  }
  message Reply {
    Kind kind = 1;
    BertyID berty_id = 3 [(gogoproto.customname) = "BertyID"];
    BertyGroup berty_group = 4 [(gogoproto.customname) = "BertyGroup"];
  }
  enum Kind {
    UnknownKind = 0;
    BertyID = 1;
    BertyGroup = 2;
  }
}

message SendContactRequest {
  message Request {
    BertyID berty_id = 1 [(gogoproto.customname) = "BertyID"];
    bytes metadata = 2;
    bytes own_metadata = 3;
  }
  message Reply {}
}

message SendAck {
  message Request {
    bytes group_pk = 1 [(gogoproto.customname) = "GroupPK"];
    bytes message_id = 2 [(gogoproto.customname) = "MessageID"];
  }
  message Reply {}
}

message SendMessage {
  message Request {
    bytes group_pk = 1 [(gogoproto.customname) = "GroupPK"];
    string message = 2;
  }
  message Reply {}
}

message SendReplyOptions {
  message Request {
    bytes group_pk = 1 [(gogoproto.customname) = "GroupPK"];
    AppMessage.ReplyOptions options = 2;
  }
  message Reply {}
}

message BertyID {
  bytes public_rendezvous_seed = 1;
  bytes account_pk = 2 [(gogoproto.customname) = "AccountPK"];
  string display_name = 3;
}

message BertyGroup {
  berty.types.v1.Group group = 1;
  string display_name = 2;
}

message AppMessage {
  Type type = 1;
  bytes payload = 2;
  int64 sent_date = 3 [(gogoproto.jsontag) = "sentDate"];

  enum Type {
    Undefined = 0;
    TypeUserMessage = 1;
    TypeUserReaction = 2;
    TypeGroupInvitation = 3;
    TypeSetGroupName = 4;
    TypeSetUserName = 5;
    TypeAcknowledge = 6;
    TypeReplyOptions = 7;
  }
  message UserMessage {
    string body = 1;
  }
  message UserReaction {
    string target = 3;// TODO: optimize message size
    string emoji = 2;
  }
  message GroupInvitation {
    string link = 2; // TODO: optimize message size
  }
  message SetGroupName {
    string name = 2;
  }
  message SetUserName {
    string name = 2;
  }
  message Acknowledge {
    string target = 2; // TODO: optimize message size
  }
  message ReplyOptions {
    repeated ReplyOption options = 1;
  }
}

message ReplyOption {
  string display = 1;
  string payload = 2;
}

message SystemInfo {
  message Request {}
  message Reply {
    berty.types.v1.SystemInfo.Reply protocol = 1;
    Messenger messenger = 2;
  }

  message Messenger {
    berty.types.v1.SystemInfo.Process process = 1;
    repeated string warns = 2;
    bool protocol_in_same_process = 3;
    DB db = 4 [(gogoproto.customname) = "DB"];
  }

  message DB {
    int64 accounts = 1;
    int64 contacts = 2;
    int64 conversations = 3;
    int64 interactions = 4;
    int64 members = 5;
    int64 devices = 6;
    int64 service_tokens = 7;
    int64 conversation_replication_info = 8;
    // older, more recent
  }
}

message ConversationJoin {
  message Request {
    string link = 1;
  }
  message Reply {}
}

// APP MODEL

// NOTE: public keys should be base64 encoded using golang's URLEncoding.WithPadding(NoPadding) format

message Account {
  string public_key = 1 [(gogoproto.moretags) = "gorm:\"primaryKey\""];
  string display_name = 2;
  string link = 3;
  repeated ServiceToken service_tokens = 5 [(gogoproto.moretags) = "gorm:\"foreignKey:AccountPK\""];
  bool replicate_new_groups_automatically = 6 [(gogoproto.moretags) = "gorm:\"default:true\""];
}

message ServiceToken {
  string account_pk = 1 [(gogoproto.customname) = "AccountPK"];
  string token_id = 2 [(gogoproto.moretags) = "gorm:\"primaryKey\"", (gogoproto.customname) = "TokenID"];
  string service_type = 3 [(gogoproto.moretags) = "gorm:\"primaryKey\"", (gogoproto.customname) = "ServiceType"];
  string authentication_url = 4  [(gogoproto.customname) = "AuthenticationURL"];
  int64 expiration = 5;
}

message Interaction {
  string cid = 1 [(gogoproto.moretags) = "gorm:\"primaryKey;column:cid\"", (gogoproto.customname) = "CID"];
  AppMessage.Type type = 2 [(gogoproto.moretags) = "gorm:\"index\""];
  string member_public_key = 7;
  string device_public_key = 12;
  Member member = 8;
  string conversation_public_key = 3 [(gogoproto.moretags) = "gorm:\"index\""];
  Conversation conversation = 4;
  bytes payload = 5;
  bool is_me = 6;
  int64 sent_date = 9;
  bool acknowledged = 10;
  string target_cid = 13 [(gogoproto.moretags) = "gorm:\"index;column:target_cid\"", (gogoproto.customname) = "TargetCID"];
}

message Contact {
  string public_key = 1 [(gogoproto.moretags) = "gorm:\"primaryKey\""];
  string conversation_public_key = 2;
  Conversation conversation = 3;
  State state = 4;
  string display_name = 5;
  int64 created_date = 7;
  // specific to outgoing requests
  int64 sent_date = 8;
  repeated Device devices = 6 [(gogoproto.moretags) = "gorm:\"foreignKey:MemberPublicKey\""];

  enum State {
    Undefined = 0;
    IncomingRequest = 1;
    OutgoingRequestEnqueued = 2;
    OutgoingRequestSent = 3;
    Accepted = 4;
  }
}

message Conversation {
  string public_key = 1 [(gogoproto.moretags) = "gorm:\"primaryKey\""];
  Type type = 2;
  bool is_open = 3;
  string display_name = 4;
  string link = 5;
  int32 unread_count = 6;
  // last_update is used to sort conversations, it should be updated for each "visible" event
  int64 last_update = 7;
  // specific to ContactType conversations
  string contact_public_key = 8;
  // specific to ContactType conversations
  Contact contact = 9;
  // specific to MultiMemberType conversations
  repeated Member members = 10;
  string account_member_public_key = 11;
  string local_device_public_key = 12;
  int64 created_date = 13;
  string reply_options_cid = 14 [(gogoproto.moretags) = "gorm:\"column:reply_options_cid\"", (gogoproto.customname) = "ReplyOptionsCID"];
  Interaction reply_options = 15 [(gogoproto.customname) = "ReplyOptions"];
  repeated ConversationReplicationInfo replication_info = 16 [(gogoproto.moretags) = "gorm:\"foreignKey:ConversationPublicKey\""];

  // TODO: avatar_cid

  enum Type {
    Undefined = 0;
    AccountType = 1;
    ContactType = 2;
    MultiMemberType = 3;
  }
}

message ConversationReplicationInfo {
  string cid = 1 [(gogoproto.moretags) = "gorm:\"primaryKey;column:cid\"", (gogoproto.customname) = "CID"];
  string conversation_public_key = 2;
  string member_public_key = 3;
  string authentication_url = 4 [(gogoproto.customname) = "AuthenticationURL"];
  string replication_server = 5;
}

message Member { // Composite primary key
  string public_key = 1 [(gogoproto.moretags) = "gorm:\"primaryKey\""];
  string display_name = 2;
  string conversation_public_key = 3 [(gogoproto.moretags) = "gorm:\"primaryKey\""];
  Conversation conversation = 4;
  repeated Device devices = 5;
}

message Device {
  string public_key = 1 [(gogoproto.moretags) = "gorm:\"primaryKey\""];
  string member_public_key = 2 [(gogoproto.moretags) = "gorm:\"index\""];
}

message ContactMetadata {
  string display_name = 1;
}

message StreamEvent {
  Type type = 1;
  bytes payload = 2;
  // specific to "*Updated" events
  bool is_new = 3;

  enum Type {
    Undefined = 0;
    TypeListEnded = 1;
    TypeConversationUpdated = 2;
    TypeConversationDeleted = 3;
    TypeInteractionUpdated = 4;
    TypeInteractionDeleted = 5;
    TypeContactUpdated = 6;
    TypeAccountUpdated = 7;
    TypeMemberUpdated = 8;
    TypeDeviceUpdated = 9;
    TypeNotified = 10;
  }
  message ConversationUpdated {
    Conversation conversation = 1;
  }
  message ConversationDeleted {
    string public_key = 1;
  }
  message InteractionUpdated {
    Interaction interaction = 1;
  }
  message InteractionDeleted {
    string cid = 1  [(gogoproto.customname) = "CID"];
  }
  message ContactUpdated {
    Contact contact = 1;
  }
  message AccountUpdated {
    Account account = 1;
  }
  message MemberUpdated {
    Member member = 1;
  }
  message DeviceUpdated {
    Device device = 1;
  }
  message ListEnded {}
  message Notified {
    Type type = 1;
    string title = 3;
    string body = 4;
    bytes payload = 5;
    enum Type {
      Unknown = 0;
      TypeBasic = 1;
      TypeMessageReceived = 2;
    }
    message Basic {}
    message MessageReceived {
      Interaction interaction = 1;
      Conversation conversation = 2;
      Contact contact = 3;
    }
  }
}

message ConversationStream {
  message Request {
    uint64 count = 1;
    uint64 page = 2;
  }
  message Reply {
    Conversation conversation = 1;
  }
}

message ConversationCreate {
  message Request {
    string display_name = 1;
    repeated string contacts_to_invite = 2; // public keys
  }
  message Reply {
    string public_key = 1;
  }
}

message AccountGet {
  message Request {}
  message Reply {
    Account account = 1;
  }
}

message EventStream {
  message Request {
    uint64 count = 1;
    uint64 page = 2;
  }
  message Reply {
    StreamEvent event = 1;
  }
}

message AccountUpdate {
  message Request {
    string display_name = 1;
  }
  message Reply {}
}

message ContactRequest {
  message Request {
    string link = 1;
  }
  message Reply {}
}

message ContactAccept {
  message Request {
    string public_key = 1;
  }
  message Reply {}
}

message Interact {
  message Request {
    AppMessage.Type type = 1;
    bytes payload = 2;
    string conversation_public_key = 3;
  }
  message Reply {
    // TODO: return cid
  }
}

message ReplicationServiceRegisterGroup {
  message Request {
    string token_id = 1 [(gogoproto.customname) = "TokenID"];
    string conversation_public_key = 2;
  }
  message Reply {}
}

message ReplicationSetAutoEnable {
  message Request {
    bool enabled = 1;
  }
  message Reply {
  }
}

message BannerQuote {
  message Request {
    bool random = 1;
  }
  message Reply {
    string quote = 1;
    string author = 2;
  }
}

message GetUsername {
  message Request {}
  message Reply {
    string username = 1;
  }
}

message InstanceExportData {
  message Request {}
  message Reply {
    bytes exported_data = 1;
  }
}

message LocalDatabaseState {
  string public_key = 1;
  string display_name = 2;
  bool replicate_flag = 3;
  repeated LocalConversationState local_conversations_state = 4;
}

message LocalConversationState {
  string public_key = 1;
  int32 unread_count = 2;
  bool is_open = 3;
}
