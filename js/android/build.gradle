// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = "29.0.2"
        minSdkVersion = 21
        compileSdkVersion = 29
        targetSdkVersion = 29
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:3.5.4")
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        classpath('com.google.gms:google-services:4.3.3')

        // TODO: remove this after closed beta
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.0.0'
    }
}

allprojects {
    repositories {
        mavenLocal()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url("$rootDir/../node_modules/react-native/android")
        }
        maven {
            // Android JSC is installed from npm
            url("$rootDir/../node_modules/jsc-android/dist")
        }

        google()
        jcenter()
        maven { url 'https://www.jitpack.io' }
    }
}


// Upgrading  compile SdkVersion and buildToolsVersion of subProjects
// Currently react-native-audiowaveform has below commented values
// compileSdkVersion 23
// buildToolsVersion "23.0.1"
 subprojects {
        afterEvaluate {
            project ->
                if (project.hasProperty("android")) {
                    android {
                        compileSdkVersion = 29
                        buildToolsVersion = "29.0.2"
                    }
                }
        }
    }

task importEnvFile {
    def envFile = file("${rootDir.getPath()}/../.env")

    if (envFile.exists()) {
        envFile.readLines().each() {
            if (!it.isEmpty() && !it.startsWith("#")) {
                def (key, value) = it.tokenize('=')
                if (key) {
                    System.properties[key] = (value ? value : '')
                }
            }
        }
    }
}

ext.getEnvValue = { key ->
    if (System.getenv(key)) { // Get var from system env first
        return System.getenv(key)
    } else if (System.getProperty(key)) { // if null, get var from env file
        return System.getProperty(key)
    }
    return "" // if null, return an empty string
}
