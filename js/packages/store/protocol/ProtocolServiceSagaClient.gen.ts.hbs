import * as api from '@berty-tech/api'
import { eventChannel, END } from 'redux-saga'
import { grpc } from '@improbable-eng/grpc-web'
import { ProtocolService } from './grpc-web-gen/bertyprotocol_pb_service'
import * as bertytypes from './grpc-web-gen/bertytypes_pb'
import opentelemetry, { propagation, TraceFlags } from '@opentelemetry/api'
import { tracerProvider } from '@berty-tech/tracing'

tracerProvider()

{{#with (lookup "berty.protocol")}}
	{{#each nested}}
		{{#if (eq (typeof this) "Service")}}
			export default class {{name}}SagaClient {
				host: string
				transport: grpc.TransportFactory
				tracer: string

				constructor(host: string, transport: grpc.TransportFactory, tracer?: string) {
					this.host = host
					this.transport = transport
					this.tracer = tracer || "default"
				}

				{{#each methods}}
					{{case 'camel' name}} = (requestObj: api{{inamespace resolvedRequestType}} = {}) =>
						eventChannel<api{{inamespace resolvedResponseType}}>((emit) => {
							const span = opentelemetry.trace.getTracer(this.tracer).startSpan("ProtocolServiceSagaClient.{{case 'camel' name}}")
							span.setAttribute("foo", "bar")
							console.log("created span in {{case 'camel' name}}")
							const buf = api.berty.{{requestType}}.encode(requestObj).finish()
							const request = berty{{requestType}}.deserializeBinary(buf)

							const ctx = span.context()
							console.log('span context', ctx)
							const metadata = new grpc.Metadata()
							const traceFlags = `0${(ctx.traceFlags || TraceFlags.NONE).toString(16)}`
							metadata.set('traceparent', `00-${ctx.traceId}-${ctx.spanId}-${traceFlags}`)
							console.log('span metadata', metadata)

							const { close } = grpc.invoke(ProtocolService.{{name}}, {
								request,
								transport: this.transport,
								host: this.host,
								metadata,
								onMessage: (message: berty{{responseType}}) =>
									emit(api.berty.{{responseType}}.decode(message.serializeBinary())),
								onEnd: (code, msg, trailers) => {
									if (code !== grpc.Code.OK) {
										emit(
											new Error(
												`GRPC {{name}} ${
													grpc.Code[code]
												} (${code}): ${msg}\nTrailers: ${JSON.stringify(trailers)}`,
											) as any,
										)
									}
									emit(END)
									span.end()
								},
							})
							return close
						})
			  {{/each}}
			}
		{{/if}}
	{{/each}}
{{/with}}
