// this file was generated by protoc-gen-gotemplate

package client

{{- $file := .File}}

import (
       "context"

        "github.com/berty/berty/core/{{.File.Name|dir}}"
	"github.com/berty/berty/core/client"
        "github.com/berty/berty/core/{{.File.Name|dir}}"
        {{- range .File.Dependency}}
          {{- $dependency := . | getProtoFile}}
          {{$dependency.GoPkg}}
        {{- end}}
)

{{- range $svc := .File.Service}}
{{- if eq ($svc.Name | lower) ($.Service.Name | lower)}}
  // {{$svc.Name}} returns the native gRPC client
  func (c *Client) {{$file.Package|splitList "."|last|title}}() {{$.File.Package|splitList "."|last}}.{{$svc.Name}}Client {
        return {{$.File.Package|splitList "."|last}}.New{{$svc.Name}}Client(c.conn)
  }

  {{- range $method := $svc.Method}}
    {{if and (not .ClientStreaming) (.ServerStreaming)}}
      {{ $in := $method.InputType | getMessageType $file }}
      {{ $out := $method.OutputType | getMessageType $file }}
      func (c *Client) {{.Name}}(ctx context.Context, input *{{$in.GoType "."}}) ([]*{{$out.GoType "."}}, error) {
        stream, err := c.{{$file.Package|splitList "."|last|title}}().{{$method.Name}}(ctx, input)
        if err != nil {
          return nil, err
        }
        var entries []*{{$out.GoType "."}}
        for {
          entry, err := stream.Recv()
          if err == io.EOF {
            break
          }
          if err != nil {
            return nil, err
          }
          entries = append(entries, entry)
        }
        return entries, nil
      }
    {{end}}
  {{end}}


{{end}}{{end}}
