// this file was generated by protoc-gen-gotemplate

package jsonclient

import (
	"context"
	"encoding/json"

	"go.uber.org/zap"

	"github.com/berty/berty/core/api/node"
	"github.com/berty/berty/core/client"
	"github.com/berty/berty/core/entity"
)

func init() {
	// FIXME: support "berty.node.EventStream" streaming
	// FIXME: support "berty.node.EventList" streaming
	registerMethod("berty.node.ContactRequest", NodeContactRequest)
	registerMethod("berty.node.ContactAcceptRequest", NodeContactAcceptRequest)
	registerMethod("berty.node.ContactRemove", NodeContactRemove)
	registerMethod("berty.node.ContactUpdate", NodeContactUpdate)
	// FIXME: support "berty.node.ContactList" streaming
}

func NodeContactRequest(client *client.Client, ctx context.Context, jsonInput []byte) (interface{}, error) {
	zap.L().Debug("client call",
		zap.String("service", "Service"),
		zap.String("method", "ContactRequest"),
		zap.String("input", string(jsonInput)),
	)

	var typedInput node.ContactRequestInput
	if err := json.Unmarshal(jsonInput, &typedInput); err != nil {
		return nil, err
	}
	return client.Node().ContactRequest(ctx, &typedInput)
}

func NodeContactAcceptRequest(client *client.Client, ctx context.Context, jsonInput []byte) (interface{}, error) {
	zap.L().Debug("client call",
		zap.String("service", "Service"),
		zap.String("method", "ContactAcceptRequest"),
		zap.String("input", string(jsonInput)),
	)

	var typedInput entity.Contact
	if err := json.Unmarshal(jsonInput, &typedInput); err != nil {
		return nil, err
	}
	return client.Node().ContactAcceptRequest(ctx, &typedInput)
}

func NodeContactRemove(client *client.Client, ctx context.Context, jsonInput []byte) (interface{}, error) {
	zap.L().Debug("client call",
		zap.String("service", "Service"),
		zap.String("method", "ContactRemove"),
		zap.String("input", string(jsonInput)),
	)

	var typedInput entity.Contact
	if err := json.Unmarshal(jsonInput, &typedInput); err != nil {
		return nil, err
	}
	return client.Node().ContactRemove(ctx, &typedInput)
}

func NodeContactUpdate(client *client.Client, ctx context.Context, jsonInput []byte) (interface{}, error) {
	zap.L().Debug("client call",
		zap.String("service", "Service"),
		zap.String("method", "ContactUpdate"),
		zap.String("input", string(jsonInput)),
	)

	var typedInput entity.Contact
	if err := json.Unmarshal(jsonInput, &typedInput); err != nil {
		return nil, err
	}
	return client.Node().ContactUpdate(ctx, &typedInput)
}
