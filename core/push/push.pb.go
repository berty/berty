// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: push/push.proto

package push

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DevicePushType int32

const (
	DevicePushType_UnknownDevicePushType DevicePushType = 0
	DevicePushType_APNS                  DevicePushType = 1
	DevicePushType_FCM                   DevicePushType = 2
	DevicePushType_MQTT                  DevicePushType = 3
)

var DevicePushType_name = map[int32]string{
	0: "UnknownDevicePushType",
	1: "APNS",
	2: "FCM",
	3: "MQTT",
}

var DevicePushType_value = map[string]int32{
	"UnknownDevicePushType": 0,
	"APNS":                  1,
	"FCM":                   2,
	"MQTT":                  3,
}

func (x DevicePushType) String() string {
	return proto.EnumName(DevicePushType_name, int32(x))
}

func (DevicePushType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae0042da44e9a7a7, []int{0}
}

type Priority int32

const (
	Priority_UnknownPriority Priority = 0
	Priority_Low             Priority = 1
	Priority_Normal          Priority = 2
)

var Priority_name = map[int32]string{
	0: "UnknownPriority",
	1: "Low",
	2: "Normal",
}

var Priority_value = map[string]int32{
	"UnknownPriority": 0,
	"Low":             1,
	"Normal":          2,
}

func (x Priority) String() string {
	return proto.EnumName(Priority_name, int32(x))
}

func (Priority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae0042da44e9a7a7, []int{1}
}

type PushDestination struct {
	Nonce                []byte         `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	PushType             DevicePushType `protobuf:"varint,2,opt,name=push_type,json=pushType,proto3,enum=berty.push.DevicePushType" json:"push_type,omitempty"`
	PushId               []byte         `protobuf:"bytes,3,opt,name=push_id,json=pushId,proto3" json:"push_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PushDestination) Reset()         { *m = PushDestination{} }
func (m *PushDestination) String() string { return proto.CompactTextString(m) }
func (*PushDestination) ProtoMessage()    {}
func (*PushDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae0042da44e9a7a7, []int{0}
}
func (m *PushDestination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushDestination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushDestination.Merge(m, src)
}
func (m *PushDestination) XXX_Size() int {
	return m.Size()
}
func (m *PushDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_PushDestination.DiscardUnknown(m)
}

var xxx_messageInfo_PushDestination proto.InternalMessageInfo

func (m *PushDestination) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *PushDestination) GetPushType() DevicePushType {
	if m != nil {
		return m.PushType
	}
	return DevicePushType_UnknownDevicePushType
}

func (m *PushDestination) GetPushId() []byte {
	if m != nil {
		return m.PushId
	}
	return nil
}

type PushNativeIdentifier struct {
	PackageID            string   `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	DeviceToken          string   `protobuf:"bytes,2,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushNativeIdentifier) Reset()         { *m = PushNativeIdentifier{} }
func (m *PushNativeIdentifier) String() string { return proto.CompactTextString(m) }
func (*PushNativeIdentifier) ProtoMessage()    {}
func (*PushNativeIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae0042da44e9a7a7, []int{1}
}
func (m *PushNativeIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNativeIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNativeIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNativeIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNativeIdentifier.Merge(m, src)
}
func (m *PushNativeIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *PushNativeIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNativeIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_PushNativeIdentifier proto.InternalMessageInfo

func (m *PushNativeIdentifier) GetPackageID() string {
	if m != nil {
		return m.PackageID
	}
	return ""
}

func (m *PushNativeIdentifier) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

type PushData struct {
	PushIdentifier       []byte   `protobuf:"bytes,1,opt,name=push_identifier,json=pushIdentifier,proto3" json:"push_identifier,omitempty"`
	Envelope             []byte   `protobuf:"bytes,2,opt,name=envelope,proto3" json:"envelope,omitempty"`
	Priority             Priority `protobuf:"varint,3,opt,name=priority,proto3,enum=berty.push.Priority" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushData) Reset()         { *m = PushData{} }
func (m *PushData) String() string { return proto.CompactTextString(m) }
func (*PushData) ProtoMessage()    {}
func (*PushData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae0042da44e9a7a7, []int{2}
}
func (m *PushData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushData.Merge(m, src)
}
func (m *PushData) XXX_Size() int {
	return m.Size()
}
func (m *PushData) XXX_DiscardUnknown() {
	xxx_messageInfo_PushData.DiscardUnknown(m)
}

var xxx_messageInfo_PushData proto.InternalMessageInfo

func (m *PushData) GetPushIdentifier() []byte {
	if m != nil {
		return m.PushIdentifier
	}
	return nil
}

func (m *PushData) GetEnvelope() []byte {
	if m != nil {
		return m.Envelope
	}
	return nil
}

func (m *PushData) GetPriority() Priority {
	if m != nil {
		return m.Priority
	}
	return Priority_UnknownPriority
}

func init() {
	proto.RegisterEnum("berty.push.DevicePushType", DevicePushType_name, DevicePushType_value)
	proto.RegisterEnum("berty.push.Priority", Priority_name, Priority_value)
	proto.RegisterType((*PushDestination)(nil), "berty.push.PushDestination")
	proto.RegisterType((*PushNativeIdentifier)(nil), "berty.push.PushNativeIdentifier")
	proto.RegisterType((*PushData)(nil), "berty.push.PushData")
}

func init() { proto.RegisterFile("push/push.proto", fileDescriptor_ae0042da44e9a7a7) }

var fileDescriptor_ae0042da44e9a7a7 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0xad, 0x5b, 0xe8, 0x26, 0x43, 0x49, 0x23, 0x13, 0x44, 0xe9, 0x21, 0x2c, 0x3d, 0xc0, 0x6a,
	0x85, 0x52, 0xb4, 0x20, 0x71, 0x66, 0xa9, 0x10, 0x91, 0xd8, 0x2a, 0x84, 0x70, 0xe1, 0x52, 0xa5,
	0xc9, 0x90, 0x5a, 0x2d, 0x76, 0x94, 0xba, 0xad, 0x72, 0xe4, 0x2f, 0xf8, 0x24, 0x8e, 0x7c, 0x01,
	0x42, 0xe1, 0x47, 0x90, 0x9d, 0x34, 0xd0, 0x8b, 0xe5, 0x79, 0x7e, 0xf3, 0xfc, 0xde, 0x68, 0x60,
	0x98, 0xef, 0xb6, 0xab, 0xa9, 0x3a, 0xbc, 0xbc, 0x10, 0x52, 0x50, 0x58, 0x62, 0x21, 0x4b, 0x4f,
	0x21, 0x63, 0x27, 0x13, 0x99, 0xd0, 0xf0, 0x54, 0xdd, 0x6a, 0xc6, 0xa4, 0x84, 0x61, 0xb0, 0xdb,
	0xae, 0x66, 0xb8, 0x95, 0x8c, 0xc7, 0x92, 0x09, 0x4e, 0x1d, 0xb8, 0xcd, 0x05, 0x4f, 0x70, 0x44,
	0xce, 0xc9, 0xc5, 0x20, 0xac, 0x0b, 0xfa, 0x0a, 0x4c, 0x25, 0xb3, 0x90, 0x65, 0x8e, 0xa3, 0xee,
	0x39, 0xb9, 0xb0, 0xae, 0xc6, 0xde, 0x3f, 0x79, 0x6f, 0x86, 0x7b, 0x96, 0xa0, 0xd2, 0x8a, 0xca,
	0x1c, 0x43, 0x23, 0x6f, 0x6e, 0xf4, 0x01, 0x9c, 0xe9, 0x46, 0x96, 0x8e, 0x7a, 0x5a, 0xb0, 0xaf,
	0x4a, 0x3f, 0x9d, 0x64, 0xe0, 0x28, 0xfa, 0x3c, 0x96, 0x6c, 0x8f, 0x7e, 0x8a, 0x5c, 0xb2, 0x2f,
	0x0c, 0x0b, 0xfa, 0x0c, 0x20, 0x8f, 0x93, 0x75, 0x9c, 0xa1, 0xea, 0x51, 0x26, 0xcc, 0xeb, 0xbb,
	0xd5, 0xaf, 0x47, 0x66, 0x50, 0xa3, 0xfe, 0x2c, 0x34, 0x1b, 0x82, 0x9f, 0xd2, 0xc7, 0x30, 0x48,
	0xf5, 0xd7, 0x0b, 0x29, 0xd6, 0xc8, 0xb5, 0x35, 0x33, 0xbc, 0x53, 0x63, 0x91, 0x82, 0x26, 0xdf,
	0x08, 0x18, 0x3a, 0x64, 0x2c, 0x63, 0xfa, 0xb4, 0x9e, 0xd2, 0x82, 0xb5, 0x1f, 0x36, 0x39, 0xad,
	0xda, 0x56, 0x6b, 0x63, 0x0c, 0x06, 0xf2, 0x3d, 0x6e, 0x44, 0x93, 0x77, 0x10, 0xb6, 0x35, 0x7d,
	0x0e, 0x46, 0x5e, 0x30, 0x51, 0x30, 0x59, 0xea, 0x50, 0xd6, 0x95, 0xf3, 0xff, 0x2c, 0x82, 0xe6,
	0x2d, 0x6c, 0x59, 0x97, 0xef, 0xc0, 0x3a, 0x9d, 0x10, 0x7d, 0x08, 0xf7, 0x3f, 0xf1, 0x35, 0x17,
	0x07, 0x7e, 0xfa, 0x60, 0x77, 0xa8, 0x01, 0xb7, 0x5e, 0x07, 0xf3, 0x8f, 0x36, 0xa1, 0x67, 0xd0,
	0x7b, 0xfb, 0xe6, 0xc6, 0xee, 0x2a, 0xe8, 0xe6, 0x43, 0x14, 0xd9, 0xbd, 0xcb, 0x97, 0x60, 0x1c,
	0xf5, 0xe9, 0x3d, 0x18, 0x36, 0x1a, 0x47, 0xc8, 0xee, 0xa8, 0x9e, 0xf7, 0xe2, 0x60, 0x13, 0x0a,
	0xd0, 0x9f, 0x8b, 0xe2, 0x6b, 0xbc, 0xb1, 0xbb, 0xd7, 0x4f, 0x7e, 0x54, 0x2e, 0xf9, 0x59, 0xb9,
	0xe4, 0x77, 0xe5, 0x92, 0xef, 0x7f, 0xdc, 0xce, 0x67, 0xa7, 0x36, 0x2c, 0x31, 0x59, 0x4d, 0x13,
	0x51, 0xa0, 0xde, 0x9b, 0x65, 0x5f, 0xaf, 0xc5, 0x8b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb0,
	0x8e, 0x8b, 0xbc, 0x4b, 0x02, 0x00, 0x00,
}

func (m *PushDestination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushDestination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushDestination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PushId) > 0 {
		i -= len(m.PushId)
		copy(dAtA[i:], m.PushId)
		i = encodeVarintPush(dAtA, i, uint64(len(m.PushId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PushType != 0 {
		i = encodeVarintPush(dAtA, i, uint64(m.PushType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushNativeIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNativeIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNativeIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeviceToken) > 0 {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintPush(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PackageID) > 0 {
		i -= len(m.PackageID)
		copy(dAtA[i:], m.PackageID)
		i = encodeVarintPush(dAtA, i, uint64(len(m.PackageID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Priority != 0 {
		i = encodeVarintPush(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Envelope) > 0 {
		i -= len(m.Envelope)
		copy(dAtA[i:], m.Envelope)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Envelope)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PushIdentifier) > 0 {
		i -= len(m.PushIdentifier)
		copy(dAtA[i:], m.PushIdentifier)
		i = encodeVarintPush(dAtA, i, uint64(len(m.PushIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPush(dAtA []byte, offset int, v uint64) int {
	offset -= sovPush(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PushDestination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	if m.PushType != 0 {
		n += 1 + sovPush(uint64(m.PushType))
	}
	l = len(m.PushId)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushNativeIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PackageID)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	l = len(m.DeviceToken)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PushIdentifier)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	l = len(m.Envelope)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovPush(uint64(m.Priority))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPush(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPush(x uint64) (n int) {
	return sovPush(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PushDestination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushDestination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushDestination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushType", wireType)
			}
			m.PushType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushType |= DevicePushType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushId = append(m.PushId[:0], dAtA[iNdEx:postIndex]...)
			if m.PushId == nil {
				m.PushId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushNativeIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNativeIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNativeIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushIdentifier", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushIdentifier = append(m.PushIdentifier[:0], dAtA[iNdEx:postIndex]...)
			if m.PushIdentifier == nil {
				m.PushIdentifier = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envelope", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Envelope = append(m.Envelope[:0], dAtA[iNdEx:postIndex]...)
			if m.Envelope == nil {
				m.Envelope = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= Priority(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPush(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPush
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPush
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPush
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPush
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPush(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPush
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPush = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPush   = fmt.Errorf("proto: integer overflow")
)
