// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity/config.proto

package entity

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "berty.tech/core/pkg/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DebugVerbosity int32

const (
	DebugVerbosity_VERBOSITY_LEVEL_NONE     DebugVerbosity = 0
	DebugVerbosity_VERBOSITY_LEVEL_CRITICAL DebugVerbosity = 1
	DebugVerbosity_VERBOSITY_LEVEL_ERROR    DebugVerbosity = 2
	DebugVerbosity_VERBOSITY_LEVEL_WARN     DebugVerbosity = 3
	DebugVerbosity_VERBOSITY_LEVEL_INFO     DebugVerbosity = 4
	DebugVerbosity_VERBOSITY_LEVEL_DEBUG    DebugVerbosity = 5
)

var DebugVerbosity_name = map[int32]string{
	0: "VERBOSITY_LEVEL_NONE",
	1: "VERBOSITY_LEVEL_CRITICAL",
	2: "VERBOSITY_LEVEL_ERROR",
	3: "VERBOSITY_LEVEL_WARN",
	4: "VERBOSITY_LEVEL_INFO",
	5: "VERBOSITY_LEVEL_DEBUG",
}

var DebugVerbosity_value = map[string]int32{
	"VERBOSITY_LEVEL_NONE":     0,
	"VERBOSITY_LEVEL_CRITICAL": 1,
	"VERBOSITY_LEVEL_ERROR":    2,
	"VERBOSITY_LEVEL_WARN":     3,
	"VERBOSITY_LEVEL_INFO":     4,
	"VERBOSITY_LEVEL_DEBUG":    5,
}

func (x DebugVerbosity) String() string {
	return proto.EnumName(DebugVerbosity_name, int32(x))
}

func (DebugVerbosity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ead0cfdccc316683, []int{0}
}

type Config struct {
	ID                         string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt                  time.Time      `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt                  time.Time      `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	Myself                     *Contact       `protobuf:"bytes,5,opt,name=myself,proto3" json:"myself,omitempty"`
	MyselfID                   string         `protobuf:"bytes,6,opt,name=myself_id,json=myselfId,proto3" json:"myself_id,omitempty"`
	CurrentDevice              *Device        `protobuf:"bytes,7,opt,name=current_device,json=currentDevice,proto3" json:"current_device,omitempty"`
	CurrentDeviceID            string         `protobuf:"bytes,8,opt,name=current_device_id,json=currentDeviceId,proto3" json:"current_device_id,omitempty"`
	CryptoParams               []byte         `protobuf:"bytes,9,opt,name=crypto_params,json=cryptoParams,proto3" json:"crypto_params,omitempty"`
	PushRelayPubkeyAPNS        string         `protobuf:"bytes,10,opt,name=push_relay_pubkey_apns,json=pushRelayPubkeyApns,proto3" json:"push_relay_pubkey_apns,omitempty"`
	PushRelayPubkeyFCM         string         `protobuf:"bytes,11,opt,name=push_relay_pubkey_fcm,json=pushRelayPubkeyFcm,proto3" json:"push_relay_pubkey_fcm,omitempty"`
	NotificationsEnabled       bool           `protobuf:"varint,12,opt,name=notifications_enabled,json=notificationsEnabled,proto3" json:"notifications_enabled,omitempty"`
	NotificationsPreviews      bool           `protobuf:"varint,13,opt,name=notifications_previews,json=notificationsPreviews,proto3" json:"notifications_previews,omitempty"`
	DebugNotificationVerbosity DebugVerbosity `protobuf:"varint,14,opt,name=debug_notification_verbosity,json=debugNotificationVerbosity,proto3,enum=berty.entity.DebugVerbosity" json:"debug_notification_verbosity,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}       `json:"-"`
	XXX_unrecognized           []byte         `json:"-"`
	XXX_sizecache              int32          `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0cfdccc316683, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Config) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Config) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Config) GetMyself() *Contact {
	if m != nil {
		return m.Myself
	}
	return nil
}

func (m *Config) GetMyselfID() string {
	if m != nil {
		return m.MyselfID
	}
	return ""
}

func (m *Config) GetCurrentDevice() *Device {
	if m != nil {
		return m.CurrentDevice
	}
	return nil
}

func (m *Config) GetCurrentDeviceID() string {
	if m != nil {
		return m.CurrentDeviceID
	}
	return ""
}

func (m *Config) GetCryptoParams() []byte {
	if m != nil {
		return m.CryptoParams
	}
	return nil
}

func (m *Config) GetPushRelayPubkeyAPNS() string {
	if m != nil {
		return m.PushRelayPubkeyAPNS
	}
	return ""
}

func (m *Config) GetPushRelayPubkeyFCM() string {
	if m != nil {
		return m.PushRelayPubkeyFCM
	}
	return ""
}

func (m *Config) GetNotificationsEnabled() bool {
	if m != nil {
		return m.NotificationsEnabled
	}
	return false
}

func (m *Config) GetNotificationsPreviews() bool {
	if m != nil {
		return m.NotificationsPreviews
	}
	return false
}

func (m *Config) GetDebugNotificationVerbosity() DebugVerbosity {
	if m != nil {
		return m.DebugNotificationVerbosity
	}
	return DebugVerbosity_VERBOSITY_LEVEL_NONE
}

func init() {
	proto.RegisterEnum("berty.entity.DebugVerbosity", DebugVerbosity_name, DebugVerbosity_value)
	proto.RegisterType((*Config)(nil), "berty.entity.Config")
}

func init() { proto.RegisterFile("entity/config.proto", fileDescriptor_ead0cfdccc316683) }

var fileDescriptor_ead0cfdccc316683 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcb, 0x6e, 0xd3, 0x4a,
	0x18, 0xc7, 0xe3, 0xf4, 0x34, 0x27, 0x99, 0xa6, 0x69, 0xce, 0xe4, 0x72, 0x7c, 0x72, 0xa2, 0x38,
	0x2a, 0x9b, 0x80, 0x50, 0x22, 0xb5, 0x42, 0x48, 0xb0, 0x40, 0xb9, 0x15, 0x59, 0x4a, 0x93, 0x68,
	0x5a, 0x8a, 0x60, 0x81, 0xe5, 0xcb, 0xc4, 0x1d, 0x35, 0xbe, 0x68, 0x3c, 0x0e, 0xf2, 0xba, 0x2f,
	0xc0, 0x92, 0x47, 0x60, 0xc1, 0x02, 0xf1, 0x14, 0x5d, 0xf2, 0x04, 0x01, 0x99, 0x37, 0xe0, 0x09,
	0x50, 0xc6, 0x4e, 0x89, 0x43, 0x37, 0xec, 0x3e, 0x7f, 0xff, 0xff, 0xff, 0xf7, 0x7d, 0x33, 0x23,
	0x83, 0x12, 0xb6, 0x19, 0x61, 0x41, 0x47, 0x77, 0xec, 0x19, 0x31, 0xdb, 0x2e, 0x75, 0x98, 0x03,
	0xf3, 0x1a, 0xa6, 0x2c, 0x68, 0x47, 0x52, 0xad, 0xfc, 0xcb, 0xc2, 0x54, 0x9d, 0x45, 0x9e, 0xda,
	0x3a, 0x68, 0xe0, 0x05, 0xd1, 0x71, 0xdc, 0xfc, 0xdf, 0xbd, 0x32, 0x3b, 0x0b, 0x75, 0x4e, 0x0c,
	0x95, 0xe1, 0xdb, 0x22, 0x16, 0x25, 0xd3, 0x71, 0xcc, 0x39, 0xee, 0xf0, 0x2f, 0xcd, 0x9f, 0x75,
	0x18, 0xb1, 0xb0, 0xc7, 0x54, 0xcb, 0x8d, 0x0d, 0x65, 0xd3, 0x31, 0x1d, 0x5e, 0x76, 0x56, 0x55,
	0xd4, 0x3d, 0xfc, 0x98, 0x01, 0x99, 0x3e, 0xdf, 0x0e, 0x3e, 0x04, 0x69, 0x62, 0x88, 0x42, 0x53,
	0x68, 0xe5, 0x7a, 0xf5, 0x70, 0x29, 0xa5, 0xe5, 0xc1, 0x8f, 0xa5, 0x04, 0x4d, 0x87, 0x5a, 0x4f,
	0x0e, 0x5d, 0x4a, 0x2c, 0x95, 0x06, 0xca, 0x15, 0x0e, 0x0e, 0x51, 0x9a, 0x18, 0xb0, 0x0f, 0x80,
	0x4e, 0xb1, 0xca, 0xb0, 0xa1, 0xa8, 0x4c, 0x4c, 0x37, 0x85, 0xd6, 0xde, 0x51, 0xad, 0x1d, 0x2d,
	0xd1, 0x5e, 0x2f, 0xd1, 0x3e, 0x5f, 0x2f, 0xd1, 0xcb, 0xde, 0x2c, 0xa5, 0xd4, 0xbb, 0xaf, 0x92,
	0x80, 0x72, 0x71, 0xae, 0xcb, 0x56, 0x10, 0xdf, 0x35, 0xd6, 0x90, 0x9d, 0x3f, 0x81, 0xc4, 0xb9,
	0x2e, 0x83, 0x8f, 0x41, 0xc6, 0x0a, 0x3c, 0x3c, 0x9f, 0x89, 0xbb, 0x1c, 0x50, 0x69, 0x6f, 0x5e,
	0x70, 0xbb, 0x1f, 0x5d, 0x6c, 0x2f, 0xfb, 0xe1, 0xba, 0x26, 0x7c, 0xba, 0xae, 0xa5, 0x50, 0x6c,
	0x87, 0xf7, 0x41, 0x2e, 0xaa, 0x14, 0x62, 0x88, 0x19, 0x7e, 0xee, 0x7c, 0xb8, 0x94, 0xb2, 0xa7,
	0xbc, 0x29, 0x0f, 0x50, 0x36, 0x92, 0x65, 0x03, 0x3e, 0x05, 0x05, 0xdd, 0xa7, 0x14, 0xdb, 0x4c,
	0x89, 0x9e, 0x44, 0xfc, 0x9b, 0xcf, 0x2a, 0x27, 0x67, 0x0d, 0xb8, 0x86, 0xf6, 0x63, 0x6f, 0xf4,
	0x09, 0x9f, 0x81, 0x7f, 0x92, 0xe1, 0xd5, 0xbc, 0x2c, 0x9f, 0x57, 0x0a, 0x97, 0xd2, 0x41, 0x7f,
	0xd3, 0x2d, 0x0f, 0xd0, 0x41, 0x22, 0x2e, 0x1b, 0xf0, 0x1e, 0xd8, 0xd7, 0x69, 0xe0, 0x32, 0x47,
	0x71, 0x55, 0xaa, 0x5a, 0x9e, 0x98, 0x6b, 0x0a, 0xad, 0x3c, 0xca, 0x47, 0xcd, 0x29, 0xef, 0xc1,
	0x11, 0xa8, 0xba, 0xbe, 0x77, 0xa9, 0x50, 0x3c, 0x57, 0x03, 0xc5, 0xf5, 0xb5, 0x2b, 0x1c, 0x28,
	0xaa, 0x6b, 0x7b, 0x22, 0xe0, 0xa3, 0xfe, 0x0d, 0x97, 0x52, 0x69, 0xea, 0x7b, 0x97, 0x68, 0x65,
	0x98, 0x72, 0xbd, 0x3b, 0x1d, 0x9f, 0xa1, 0x92, 0xbb, 0xd5, 0x74, 0x6d, 0x0f, 0xca, 0xa0, 0xf2,
	0x3b, 0x6d, 0xa6, 0x5b, 0xe2, 0x1e, 0x87, 0x55, 0xc3, 0xa5, 0x04, 0xb7, 0x60, 0x27, 0xfd, 0x53,
	0x04, 0xb7, 0x58, 0x27, 0xba, 0x05, 0x8f, 0x41, 0xc5, 0x76, 0x18, 0x99, 0x11, 0x5d, 0x65, 0xc4,
	0xb1, 0x3d, 0x05, 0xdb, 0xaa, 0x36, 0xc7, 0x86, 0x98, 0x6f, 0x0a, 0xad, 0x2c, 0x2a, 0x27, 0xc4,
	0x61, 0xa4, 0xc1, 0x47, 0xa0, 0x9a, 0x0c, 0xb9, 0x14, 0x2f, 0x08, 0x7e, 0xeb, 0x89, 0xfb, 0x3c,
	0x95, 0x44, 0x4e, 0x63, 0x11, 0xbe, 0x01, 0x75, 0x03, 0x6b, 0xbe, 0xa9, 0x6c, 0xca, 0xca, 0x02,
	0x53, 0xcd, 0xf1, 0x08, 0x0b, 0xc4, 0x42, 0x53, 0x68, 0x15, 0x8e, 0xea, 0xdb, 0xaf, 0xa6, 0xf9,
	0xe6, 0xc5, 0xda, 0x83, 0x6a, 0x9c, 0x30, 0xde, 0x00, 0xdc, 0x6a, 0x0f, 0x3e, 0x0b, 0xa0, 0x90,
	0xb4, 0x43, 0x11, 0x94, 0x2f, 0x86, 0xa8, 0x37, 0x39, 0x93, 0xcf, 0x5f, 0x29, 0xa3, 0xe1, 0xc5,
	0x70, 0xa4, 0x8c, 0x27, 0xe3, 0x61, 0x31, 0x05, 0xeb, 0x40, 0xdc, 0x56, 0xfa, 0x48, 0x3e, 0x97,
	0xfb, 0xdd, 0x51, 0x51, 0x80, 0xff, 0x81, 0xca, 0xb6, 0x3a, 0x44, 0x68, 0x82, 0x8a, 0xe9, 0xbb,
	0x90, 0x2f, 0xbb, 0x68, 0x5c, 0xdc, 0xb9, 0x4b, 0x91, 0xc7, 0x27, 0x93, 0xe2, 0x5f, 0x77, 0xe1,
	0x06, 0xc3, 0xde, 0x8b, 0xe7, 0xc5, 0xdd, 0x5e, 0xeb, 0x26, 0x6c, 0x08, 0x5f, 0xc2, 0x86, 0xf0,
	0x2d, 0x6c, 0x08, 0xef, 0xbf, 0x37, 0x52, 0xaf, 0xab, 0xd1, 0xf9, 0x19, 0xd6, 0x2f, 0x3b, 0xba,
	0x43, 0x71, 0x27, 0xba, 0x09, 0x2d, 0xc3, 0xff, 0xb9, 0xe3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x2c, 0xcf, 0xcc, 0xc2, 0xb8, 0x04, 0x00, 0x00,
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DebugNotificationVerbosity != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.DebugNotificationVerbosity))
		i--
		dAtA[i] = 0x70
	}
	if m.NotificationsPreviews {
		i--
		if m.NotificationsPreviews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.NotificationsEnabled {
		i--
		if m.NotificationsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.PushRelayPubkeyFCM) > 0 {
		i -= len(m.PushRelayPubkeyFCM)
		copy(dAtA[i:], m.PushRelayPubkeyFCM)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.PushRelayPubkeyFCM)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PushRelayPubkeyAPNS) > 0 {
		i -= len(m.PushRelayPubkeyAPNS)
		copy(dAtA[i:], m.PushRelayPubkeyAPNS)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.PushRelayPubkeyAPNS)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CryptoParams) > 0 {
		i -= len(m.CryptoParams)
		copy(dAtA[i:], m.CryptoParams)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.CryptoParams)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CurrentDeviceID) > 0 {
		i -= len(m.CurrentDeviceID)
		copy(dAtA[i:], m.CurrentDeviceID)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.CurrentDeviceID)))
		i--
		dAtA[i] = 0x42
	}
	if m.CurrentDevice != nil {
		{
			size, err := m.CurrentDevice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MyselfID) > 0 {
		i -= len(m.MyselfID)
		copy(dAtA[i:], m.MyselfID)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.MyselfID)))
		i--
		dAtA[i] = 0x32
	}
	if m.Myself != nil {
		{
			size, err := m.Myself.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintConfig(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintConfig(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovConfig(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovConfig(uint64(l))
	if m.Myself != nil {
		l = m.Myself.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.MyselfID)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.CurrentDevice != nil {
		l = m.CurrentDevice.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.CurrentDeviceID)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.CryptoParams)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.PushRelayPubkeyAPNS)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.PushRelayPubkeyFCM)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.NotificationsEnabled {
		n += 2
	}
	if m.NotificationsPreviews {
		n += 2
	}
	if m.DebugNotificationVerbosity != 0 {
		n += 1 + sovConfig(uint64(m.DebugNotificationVerbosity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Myself", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Myself == nil {
				m.Myself = &Contact{}
			}
			if err := m.Myself.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyselfID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyselfID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentDevice == nil {
				m.CurrentDevice = &Device{}
			}
			if err := m.CurrentDevice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptoParams", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CryptoParams = append(m.CryptoParams[:0], dAtA[iNdEx:postIndex]...)
			if m.CryptoParams == nil {
				m.CryptoParams = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushRelayPubkeyAPNS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushRelayPubkeyAPNS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushRelayPubkeyFCM", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushRelayPubkeyFCM = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotificationsEnabled = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationsPreviews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotificationsPreviews = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugNotificationVerbosity", wireType)
			}
			m.DebugNotificationVerbosity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugNotificationVerbosity |= DebugVerbosity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthConfig
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)
