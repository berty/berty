// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crypto/sigchain/sigchain.proto

package sigchain // import "berty.tech/core/crypto/sigchain"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventExtensionVersions int32

const (
	EventExtensionVersions_UNKNOWN_VERSION EventExtensionVersions = 0
	EventExtensionVersions_VERSION_1       EventExtensionVersions = 1
)

var EventExtensionVersions_name = map[int32]string{
	0: "UNKNOWN_VERSION",
	1: "VERSION_1",
}
var EventExtensionVersions_value = map[string]int32{
	"UNKNOWN_VERSION": 0,
	"VERSION_1":       1,
}

func (x EventExtensionVersions) String() string {
	return proto.EnumName(EventExtensionVersions_name, int32(x))
}
func (EventExtensionVersions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sigchain_20b29b89cc0bced7, []int{0}
}

type SigEvent_SigEventType int32

const (
	SigEvent_INIT_CHAIN    SigEvent_SigEventType = 0
	SigEvent_ADD_DEVICE    SigEvent_SigEventType = 1
	SigEvent_REMOVE_DEVICE SigEvent_SigEventType = 2
)

var SigEvent_SigEventType_name = map[int32]string{
	0: "INIT_CHAIN",
	1: "ADD_DEVICE",
	2: "REMOVE_DEVICE",
}
var SigEvent_SigEventType_value = map[string]int32{
	"INIT_CHAIN":    0,
	"ADD_DEVICE":    1,
	"REMOVE_DEVICE": 2,
}

func (x SigEvent_SigEventType) String() string {
	return proto.EnumName(SigEvent_SigEventType_name, int32(x))
}
func (SigEvent_SigEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sigchain_20b29b89cc0bced7, []int{0, 0}
}

type SigEvent struct {
	EventType            SigEvent_SigEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=sigchain.SigEvent_SigEventType" json:"event_type,omitempty"`
	Hash                 []byte                `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash           []byte                `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Payload              []byte                `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	PublicKey            []byte                `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	CreatedAt            time.Time             `protobuf:"bytes,6,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	Issuer               string                `protobuf:"bytes,7,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Subject              string                `protobuf:"bytes,8,opt,name=subject,proto3" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SigEvent) Reset()         { *m = SigEvent{} }
func (m *SigEvent) String() string { return proto.CompactTextString(m) }
func (*SigEvent) ProtoMessage()    {}
func (*SigEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_sigchain_20b29b89cc0bced7, []int{0}
}
func (m *SigEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SigEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigEvent.Merge(dst, src)
}
func (m *SigEvent) XXX_Size() int {
	return m.Size()
}
func (m *SigEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SigEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SigEvent proto.InternalMessageInfo

func (m *SigEvent) GetEventType() SigEvent_SigEventType {
	if m != nil {
		return m.EventType
	}
	return SigEvent_INIT_CHAIN
}

func (m *SigEvent) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *SigEvent) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *SigEvent) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SigEvent) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *SigEvent) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *SigEvent) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *SigEvent) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

type SigChain struct {
	UserId               string      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Events               []*SigEvent `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SigChain) Reset()         { *m = SigChain{} }
func (m *SigChain) String() string { return proto.CompactTextString(m) }
func (*SigChain) ProtoMessage()    {}
func (*SigChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_sigchain_20b29b89cc0bced7, []int{1}
}
func (m *SigChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SigChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigChain.Merge(dst, src)
}
func (m *SigChain) XXX_Size() int {
	return m.Size()
}
func (m *SigChain) XXX_DiscardUnknown() {
	xxx_messageInfo_SigChain.DiscardUnknown(m)
}

var xxx_messageInfo_SigChain proto.InternalMessageInfo

func (m *SigChain) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SigChain) GetEvents() []*SigEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type EventExtension struct {
	Version              EventExtensionVersions `protobuf:"varint,1,opt,name=version,proto3,enum=sigchain.EventExtensionVersions" json:"version,omitempty"`
	ParentEventHash      []byte                 `protobuf:"bytes,2,opt,name=parent_event_hash,json=parentEventHash,proto3" json:"parent_event_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *EventExtension) Reset()         { *m = EventExtension{} }
func (m *EventExtension) String() string { return proto.CompactTextString(m) }
func (*EventExtension) ProtoMessage()    {}
func (*EventExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_sigchain_20b29b89cc0bced7, []int{2}
}
func (m *EventExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EventExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventExtension.Merge(dst, src)
}
func (m *EventExtension) XXX_Size() int {
	return m.Size()
}
func (m *EventExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_EventExtension.DiscardUnknown(m)
}

var xxx_messageInfo_EventExtension proto.InternalMessageInfo

func (m *EventExtension) GetVersion() EventExtensionVersions {
	if m != nil {
		return m.Version
	}
	return EventExtensionVersions_UNKNOWN_VERSION
}

func (m *EventExtension) GetParentEventHash() []byte {
	if m != nil {
		return m.ParentEventHash
	}
	return nil
}

func init() {
	proto.RegisterType((*SigEvent)(nil), "sigchain.SigEvent")
	proto.RegisterType((*SigChain)(nil), "sigchain.SigChain")
	proto.RegisterType((*EventExtension)(nil), "sigchain.EventExtension")
	proto.RegisterEnum("sigchain.EventExtensionVersions", EventExtensionVersions_name, EventExtensionVersions_value)
	proto.RegisterEnum("sigchain.SigEvent_SigEventType", SigEvent_SigEventType_name, SigEvent_SigEventType_value)
}
func (m *SigEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSigchain(dAtA, i, uint64(m.EventType))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.ParentHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.ParentHash)))
		i += copy(dAtA[i:], m.ParentHash)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintSigchain(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Issuer) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.Issuer)))
		i += copy(dAtA[i:], m.Issuer)
	}
	if len(m.Subject) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.Subject)))
		i += copy(dAtA[i:], m.Subject)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SigChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigChain) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSigchain(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EventExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventExtension) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSigchain(dAtA, i, uint64(m.Version))
	}
	if len(m.ParentEventHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.ParentEventHash)))
		i += copy(dAtA[i:], m.ParentEventHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSigchain(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SigEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovSigchain(uint64(m.EventType))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	l = len(m.ParentHash)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovSigchain(uint64(l))
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SigChain) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSigchain(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventExtension) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovSigchain(uint64(m.Version))
	}
	l = len(m.ParentEventHash)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSigchain(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSigchain(x uint64) (n int) {
	return sovSigchain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SigEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (SigEvent_SigEventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentHash = append(m.ParentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentHash == nil {
				m.ParentHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &SigEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (EventExtensionVersions(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentEventHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentEventHash = append(m.ParentEventHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentEventHash == nil {
				m.ParentEventHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSigchain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSigchain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSigchain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSigchain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSigchain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSigchain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSigchain   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("crypto/sigchain/sigchain.proto", fileDescriptor_sigchain_20b29b89cc0bced7)
}

var fileDescriptor_sigchain_20b29b89cc0bced7 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xa6, 0x25, 0x89, 0x27, 0x6d, 0x9a, 0x2e, 0xa8, 0x58, 0x91, 0x88, 0xad, 0x9c, 0xa2,
	0x1c, 0x6c, 0x35, 0xdc, 0x10, 0x42, 0x4a, 0x13, 0x4b, 0xb5, 0x2a, 0x1c, 0xc9, 0x0d, 0x41, 0xe2,
	0x62, 0xd9, 0xce, 0xe2, 0x18, 0xd2, 0xac, 0xe5, 0x5d, 0x57, 0xf5, 0x5b, 0x70, 0xe4, 0x91, 0x7a,
	0xe4, 0x09, 0x00, 0x85, 0x37, 0xe0, 0x09, 0xd0, 0xae, 0xed, 0x50, 0x7e, 0x6e, 0xdf, 0x37, 0xdf,
	0x37, 0x63, 0xcf, 0x7c, 0x36, 0xf4, 0xc3, 0x34, 0x4f, 0x38, 0x35, 0x59, 0x1c, 0x85, 0x6b, 0x3f,
	0xde, 0xee, 0x81, 0x91, 0xa4, 0x94, 0x53, 0xdc, 0xaa, 0x78, 0xef, 0x49, 0x44, 0x23, 0x2a, 0x8b,
	0xa6, 0x40, 0x85, 0xde, 0xd3, 0x22, 0x4a, 0xa3, 0x0d, 0x31, 0x25, 0x0b, 0xb2, 0xf7, 0x26, 0x8f,
	0x6f, 0x08, 0xe3, 0xfe, 0x4d, 0x52, 0x18, 0x06, 0x3f, 0xeb, 0xd0, 0xba, 0x8e, 0x23, 0xeb, 0x96,
	0x6c, 0x39, 0x7e, 0x05, 0x40, 0x04, 0xf0, 0x78, 0x9e, 0x10, 0x15, 0xe9, 0x68, 0xd8, 0x19, 0x6b,
	0xc6, 0xfe, 0x91, 0x95, 0x6f, 0x0f, 0x16, 0x79, 0x42, 0x5c, 0x85, 0x54, 0x10, 0x63, 0x38, 0x5c,
	0xfb, 0x6c, 0xad, 0xd6, 0x75, 0x34, 0x3c, 0x72, 0x25, 0xc6, 0x1a, 0xb4, 0x13, 0x3f, 0x15, 0x43,
	0xa5, 0x74, 0x20, 0x25, 0x28, 0x4a, 0x97, 0xc2, 0xa0, 0x42, 0x33, 0xf1, 0xf3, 0x0d, 0xf5, 0x57,
	0xea, 0xa1, 0x14, 0x2b, 0x8a, 0x9f, 0x01, 0x24, 0x59, 0xb0, 0x89, 0x43, 0xef, 0x23, 0xc9, 0xd5,
	0x47, 0x52, 0x54, 0x8a, 0xca, 0x15, 0xc9, 0xf1, 0x14, 0x20, 0x4c, 0x89, 0xcf, 0xc9, 0xca, 0xf3,
	0xb9, 0xda, 0xd0, 0xd1, 0xb0, 0x3d, 0xee, 0x19, 0xc5, 0xc2, 0x46, 0xb5, 0xb0, 0xb1, 0xa8, 0x16,
	0xbe, 0x68, 0xdd, 0x7f, 0xd5, 0x6a, 0x9f, 0xbe, 0x69, 0xc8, 0x55, 0xca, 0xbe, 0x09, 0xc7, 0x67,
	0xd0, 0x88, 0x19, 0xcb, 0x48, 0xaa, 0x36, 0x75, 0x34, 0x54, 0xdc, 0x92, 0x89, 0xb7, 0x62, 0x59,
	0xf0, 0x81, 0x84, 0x5c, 0x6d, 0x49, 0xa1, 0xa2, 0x83, 0x09, 0x1c, 0x3d, 0xdc, 0x1f, 0x77, 0x00,
	0x6c, 0xc7, 0x5e, 0x78, 0xd3, 0xcb, 0x89, 0xed, 0x74, 0x6b, 0x82, 0x4f, 0x66, 0x33, 0x6f, 0x66,
	0x2d, 0xed, 0xa9, 0xd5, 0x45, 0xf8, 0x14, 0x8e, 0x5d, 0xeb, 0xf5, 0x7c, 0x69, 0x55, 0xa5, 0xfa,
	0x60, 0x2e, 0x6f, 0x3e, 0x15, 0x47, 0xc5, 0x4f, 0xa1, 0x99, 0x31, 0x92, 0x7a, 0xf1, 0x4a, 0x1e,
	0x5c, 0x71, 0x1b, 0x82, 0xda, 0x2b, 0x3c, 0x82, 0x86, 0xbc, 0x2c, 0x53, 0xeb, 0xfa, 0xc1, 0xb0,
	0x3d, 0xc6, 0xff, 0x06, 0xe1, 0x96, 0x8e, 0xc1, 0x1d, 0x74, 0x64, 0xc1, 0xba, 0xe3, 0x64, 0xcb,
	0x62, 0xba, 0xc5, 0x2f, 0xa0, 0x79, 0x4b, 0x52, 0x01, 0xcb, 0x1c, 0xf5, 0xdf, 0xed, 0x7f, 0x5a,
	0x97, 0x85, 0x8d, 0xb9, 0x55, 0x03, 0x1e, 0xc1, 0x69, 0x19, 0x59, 0xf1, 0x35, 0x3c, 0xc8, 0xf4,
	0xa4, 0x10, 0xe4, 0x04, 0x91, 0xde, 0xe8, 0x25, 0x9c, 0xfd, 0x7f, 0x1c, 0x7e, 0x0c, 0x27, 0x6f,
	0x9c, 0x2b, 0x67, 0xfe, 0xd6, 0xf1, 0x96, 0x96, 0x7b, 0x6d, 0xcf, 0xc5, 0x71, 0x8e, 0x41, 0x29,
	0x89, 0x77, 0xde, 0x45, 0x17, 0xe7, 0xf7, 0xbb, 0x3e, 0xfa, 0xb2, 0xeb, 0xa3, 0xef, 0xbb, 0x3e,
	0xfa, 0xfc, 0xa3, 0x5f, 0x7b, 0xa7, 0x05, 0x24, 0xe5, 0xb9, 0xc1, 0x49, 0xb8, 0x36, 0x43, 0x9a,
	0x12, 0xf3, 0xaf, 0x1f, 0x20, 0x68, 0xc8, 0x64, 0x9f, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x07,
	0xaa, 0xe4, 0xd8, 0x1a, 0x03, 0x00, 0x00,
}
