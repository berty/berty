// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crypto/keypair/keypair.proto

package keypair

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CertRevocationVersions int32

const (
	CertRevocationVersions_UNKNOWN_VERSION CertRevocationVersions = 0
	CertRevocationVersions_VERSION_1       CertRevocationVersions = 1
)

var CertRevocationVersions_name = map[int32]string{
	0: "UNKNOWN_VERSION",
	1: "VERSION_1",
}

var CertRevocationVersions_value = map[string]int32{
	"UNKNOWN_VERSION": 0,
	"VERSION_1":       1,
}

func (x CertRevocationVersions) String() string {
	return proto.EnumName(CertRevocationVersions_name, int32(x))
}

func (CertRevocationVersions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9eccbc907fe67101, []int{0}
}

type PublicKeyAlgorithm int32

const (
	PublicKeyAlgorithm_UNKNOWN_PUBLIC_KEY_ALGORITHM PublicKeyAlgorithm = 0
	PublicKeyAlgorithm_RSA                          PublicKeyAlgorithm = 1
	PublicKeyAlgorithm_DSA                          PublicKeyAlgorithm = 2
	PublicKeyAlgorithm_ECDSA                        PublicKeyAlgorithm = 3
)

var PublicKeyAlgorithm_name = map[int32]string{
	0: "UNKNOWN_PUBLIC_KEY_ALGORITHM",
	1: "RSA",
	2: "DSA",
	3: "ECDSA",
}

var PublicKeyAlgorithm_value = map[string]int32{
	"UNKNOWN_PUBLIC_KEY_ALGORITHM": 0,
	"RSA":                          1,
	"DSA":                          2,
	"ECDSA":                        3,
}

func (x PublicKeyAlgorithm) String() string {
	return proto.EnumName(PublicKeyAlgorithm_name, int32(x))
}

func (PublicKeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9eccbc907fe67101, []int{1}
}

// https://golang.org/pkg/crypto/x509/#SignatureAlgorithm
type SignatureAlgorithm int32

const (
	SignatureAlgorithm_UNKNOWN_SIGNATURE_ALGORITHM SignatureAlgorithm = 0
	SignatureAlgorithm_MD2_WITH_RSA                SignatureAlgorithm = 1
	SignatureAlgorithm_MD5_WITH_RSA                SignatureAlgorithm = 2
	SignatureAlgorithm_SHA1_WITH_RSA               SignatureAlgorithm = 3
	SignatureAlgorithm_SHA256_WITH_RSA             SignatureAlgorithm = 4
	SignatureAlgorithm_SHA384_WITH_RSA             SignatureAlgorithm = 5
	SignatureAlgorithm_SHA512_WITH_RSA             SignatureAlgorithm = 6
	SignatureAlgorithm_DSA_WITH_SHA1               SignatureAlgorithm = 7
	SignatureAlgorithm_DSA_WITH_SHA256             SignatureAlgorithm = 8
	SignatureAlgorithm_ECDSA_WITH_SHA1             SignatureAlgorithm = 9
	SignatureAlgorithm_ECDSA_WITH_SHA256           SignatureAlgorithm = 10
	SignatureAlgorithm_ECDSA_WITH_SHA384           SignatureAlgorithm = 11
	SignatureAlgorithm_ECDSA_WITH_SHA512           SignatureAlgorithm = 12
	SignatureAlgorithm_SHA256_WITH_RSAPSS          SignatureAlgorithm = 13
	SignatureAlgorithm_SHA384_WITH_RSAPSS          SignatureAlgorithm = 14
	SignatureAlgorithm_SHA512_WITH_RSAPSS          SignatureAlgorithm = 15
)

var SignatureAlgorithm_name = map[int32]string{
	0:  "UNKNOWN_SIGNATURE_ALGORITHM",
	1:  "MD2_WITH_RSA",
	2:  "MD5_WITH_RSA",
	3:  "SHA1_WITH_RSA",
	4:  "SHA256_WITH_RSA",
	5:  "SHA384_WITH_RSA",
	6:  "SHA512_WITH_RSA",
	7:  "DSA_WITH_SHA1",
	8:  "DSA_WITH_SHA256",
	9:  "ECDSA_WITH_SHA1",
	10: "ECDSA_WITH_SHA256",
	11: "ECDSA_WITH_SHA384",
	12: "ECDSA_WITH_SHA512",
	13: "SHA256_WITH_RSAPSS",
	14: "SHA384_WITH_RSAPSS",
	15: "SHA512_WITH_RSAPSS",
}

var SignatureAlgorithm_value = map[string]int32{
	"UNKNOWN_SIGNATURE_ALGORITHM": 0,
	"MD2_WITH_RSA":                1,
	"MD5_WITH_RSA":                2,
	"SHA1_WITH_RSA":               3,
	"SHA256_WITH_RSA":             4,
	"SHA384_WITH_RSA":             5,
	"SHA512_WITH_RSA":             6,
	"DSA_WITH_SHA1":               7,
	"DSA_WITH_SHA256":             8,
	"ECDSA_WITH_SHA1":             9,
	"ECDSA_WITH_SHA256":           10,
	"ECDSA_WITH_SHA384":           11,
	"ECDSA_WITH_SHA512":           12,
	"SHA256_WITH_RSAPSS":          13,
	"SHA384_WITH_RSAPSS":          14,
	"SHA512_WITH_RSAPSS":          15,
}

func (x SignatureAlgorithm) String() string {
	return proto.EnumName(SignatureAlgorithm_name, int32(x))
}

func (SignatureAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9eccbc907fe67101, []int{2}
}

type Signature struct {
	Signature            []byte             `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	SignatureAlgorithm   SignatureAlgorithm `protobuf:"varint,2,opt,name=signature_algorithm,json=signatureAlgorithm,proto3,enum=keypair.SignatureAlgorithm" json:"signature_algorithm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eccbc907fe67101, []int{0}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Signature) GetSignatureAlgorithm() SignatureAlgorithm {
	if m != nil {
		return m.SignatureAlgorithm
	}
	return SignatureAlgorithm_UNKNOWN_SIGNATURE_ALGORITHM
}

type EcdsaSignature struct {
	RNeg                 bool     `protobuf:"varint,1,opt,name=rNeg,proto3" json:"rNeg,omitempty"`
	R                    []byte   `protobuf:"bytes,2,opt,name=r,proto3" json:"r,omitempty"`
	SNeg                 bool     `protobuf:"varint,3,opt,name=sNeg,proto3" json:"sNeg,omitempty"`
	S                    []byte   `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EcdsaSignature) Reset()         { *m = EcdsaSignature{} }
func (m *EcdsaSignature) String() string { return proto.CompactTextString(m) }
func (*EcdsaSignature) ProtoMessage()    {}
func (*EcdsaSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eccbc907fe67101, []int{1}
}
func (m *EcdsaSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EcdsaSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EcdsaSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EcdsaSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EcdsaSignature.Merge(m, src)
}
func (m *EcdsaSignature) XXX_Size() int {
	return m.Size()
}
func (m *EcdsaSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_EcdsaSignature.DiscardUnknown(m)
}

var xxx_messageInfo_EcdsaSignature proto.InternalMessageInfo

func (m *EcdsaSignature) GetRNeg() bool {
	if m != nil {
		return m.RNeg
	}
	return false
}

func (m *EcdsaSignature) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *EcdsaSignature) GetSNeg() bool {
	if m != nil {
		return m.SNeg
	}
	return false
}

func (m *EcdsaSignature) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type CertificateContent struct {
	Version              CertRevocationVersions `protobuf:"varint,1,opt,name=version,proto3,enum=keypair.CertRevocationVersions" json:"version,omitempty"`
	PublicKeyAlgorithm   PublicKeyAlgorithm     `protobuf:"varint,2,opt,name=public_key_algorithm,json=publicKeyAlgorithm,proto3,enum=keypair.PublicKeyAlgorithm" json:"public_key_algorithm,omitempty"`
	PublicKey            []byte                 `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Issuer               []byte                 `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Subject              []byte                 `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`
	NotBefore            time.Time              `protobuf:"bytes,6,opt,name=not_before,json=notBefore,proto3,stdtime" json:"not_before"`
	NotAfter             time.Time              `protobuf:"bytes,7,opt,name=not_after,json=notAfter,proto3,stdtime" json:"not_after"`
	Extension            []byte                 `protobuf:"bytes,8,opt,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CertificateContent) Reset()         { *m = CertificateContent{} }
func (m *CertificateContent) String() string { return proto.CompactTextString(m) }
func (*CertificateContent) ProtoMessage()    {}
func (*CertificateContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eccbc907fe67101, []int{2}
}
func (m *CertificateContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateContent.Merge(m, src)
}
func (m *CertificateContent) XXX_Size() int {
	return m.Size()
}
func (m *CertificateContent) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateContent.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateContent proto.InternalMessageInfo

func (m *CertificateContent) GetVersion() CertRevocationVersions {
	if m != nil {
		return m.Version
	}
	return CertRevocationVersions_UNKNOWN_VERSION
}

func (m *CertificateContent) GetPublicKeyAlgorithm() PublicKeyAlgorithm {
	if m != nil {
		return m.PublicKeyAlgorithm
	}
	return PublicKeyAlgorithm_UNKNOWN_PUBLIC_KEY_ALGORITHM
}

func (m *CertificateContent) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *CertificateContent) GetIssuer() []byte {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *CertificateContent) GetSubject() []byte {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *CertificateContent) GetNotBefore() time.Time {
	if m != nil {
		return m.NotBefore
	}
	return time.Time{}
}

func (m *CertificateContent) GetNotAfter() time.Time {
	if m != nil {
		return m.NotAfter
	}
	return time.Time{}
}

func (m *CertificateContent) GetExtension() []byte {
	if m != nil {
		return m.Extension
	}
	return nil
}

type Certificate struct {
	Content              *CertificateContent `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Signature            *Signature          `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eccbc907fe67101, []int{3}
}
func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return m.Size()
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetContent() *CertificateContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Certificate) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type RevocationContent struct {
	Version              CertRevocationVersions `protobuf:"varint,1,opt,name=version,proto3,enum=keypair.CertRevocationVersions" json:"version,omitempty"`
	Issuer               []byte                 `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Subject              []byte                 `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	IssuedOn             time.Time              `protobuf:"bytes,4,opt,name=issued_on,json=issuedOn,proto3,stdtime" json:"issued_on"`
	Extension            []byte                 `protobuf:"bytes,5,opt,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RevocationContent) Reset()         { *m = RevocationContent{} }
func (m *RevocationContent) String() string { return proto.CompactTextString(m) }
func (*RevocationContent) ProtoMessage()    {}
func (*RevocationContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eccbc907fe67101, []int{4}
}
func (m *RevocationContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevocationContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevocationContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevocationContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevocationContent.Merge(m, src)
}
func (m *RevocationContent) XXX_Size() int {
	return m.Size()
}
func (m *RevocationContent) XXX_DiscardUnknown() {
	xxx_messageInfo_RevocationContent.DiscardUnknown(m)
}

var xxx_messageInfo_RevocationContent proto.InternalMessageInfo

func (m *RevocationContent) GetVersion() CertRevocationVersions {
	if m != nil {
		return m.Version
	}
	return CertRevocationVersions_UNKNOWN_VERSION
}

func (m *RevocationContent) GetIssuer() []byte {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *RevocationContent) GetSubject() []byte {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *RevocationContent) GetIssuedOn() time.Time {
	if m != nil {
		return m.IssuedOn
	}
	return time.Time{}
}

func (m *RevocationContent) GetExtension() []byte {
	if m != nil {
		return m.Extension
	}
	return nil
}

type Revocation struct {
	Content              *RevocationContent `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Signature            *Signature         `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Revocation) Reset()         { *m = Revocation{} }
func (m *Revocation) String() string { return proto.CompactTextString(m) }
func (*Revocation) ProtoMessage()    {}
func (*Revocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eccbc907fe67101, []int{5}
}
func (m *Revocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Revocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Revocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Revocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Revocation.Merge(m, src)
}
func (m *Revocation) XXX_Size() int {
	return m.Size()
}
func (m *Revocation) XXX_DiscardUnknown() {
	xxx_messageInfo_Revocation.DiscardUnknown(m)
}

var xxx_messageInfo_Revocation proto.InternalMessageInfo

func (m *Revocation) GetContent() *RevocationContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Revocation) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterEnum("keypair.CertRevocationVersions", CertRevocationVersions_name, CertRevocationVersions_value)
	proto.RegisterEnum("keypair.PublicKeyAlgorithm", PublicKeyAlgorithm_name, PublicKeyAlgorithm_value)
	proto.RegisterEnum("keypair.SignatureAlgorithm", SignatureAlgorithm_name, SignatureAlgorithm_value)
	proto.RegisterType((*Signature)(nil), "keypair.Signature")
	proto.RegisterType((*EcdsaSignature)(nil), "keypair.EcdsaSignature")
	proto.RegisterType((*CertificateContent)(nil), "keypair.CertificateContent")
	proto.RegisterType((*Certificate)(nil), "keypair.Certificate")
	proto.RegisterType((*RevocationContent)(nil), "keypair.RevocationContent")
	proto.RegisterType((*Revocation)(nil), "keypair.Revocation")
}

func init() { proto.RegisterFile("crypto/keypair/keypair.proto", fileDescriptor_9eccbc907fe67101) }

var fileDescriptor_9eccbc907fe67101 = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x5d, 0x53, 0xf2, 0x46,
	0x14, 0xc7, 0x09, 0xc8, 0x4b, 0x0e, 0x88, 0x71, 0xb5, 0x0e, 0x83, 0x16, 0x18, 0xae, 0x1c, 0x2f,
	0x40, 0x50, 0x1c, 0x3b, 0xd3, 0x9b, 0x80, 0x8c, 0x30, 0x2a, 0x38, 0x09, 0xea, 0xb4, 0x37, 0x99,
	0x10, 0x17, 0x4c, 0xd5, 0x2c, 0x93, 0x2c, 0xb6, 0x7c, 0x8b, 0xde, 0x74, 0xa6, 0x1f, 0xc9, 0xcb,
	0x7e, 0x82, 0xbe, 0xd8, 0xcf, 0xd0, 0xfb, 0xce, 0x6e, 0x12, 0x12, 0x4c, 0xfb, 0xcc, 0xf3, 0xcc,
	0xf3, 0x5c, 0xb9, 0xe7, 0xe7, 0xff, 0x9c, 0xdd, 0xff, 0x39, 0x07, 0x80, 0x3d, 0xc3, 0x5e, 0xcc,
	0x28, 0xa9, 0x3f, 0xe2, 0xc5, 0x4c, 0x37, 0x6d, 0xff, 0x6f, 0x6d, 0x66, 0x13, 0x4a, 0x50, 0xda,
	0x0b, 0x8b, 0xe5, 0x29, 0x21, 0xd3, 0x27, 0x5c, 0xe7, 0x78, 0x3c, 0x9f, 0xd4, 0xa9, 0xf9, 0x8c,
	0x1d, 0xaa, 0x3f, 0xcf, 0x5c, 0x65, 0x71, 0x7b, 0x4a, 0xa6, 0x84, 0x1f, 0xeb, 0xec, 0xe4, 0xd2,
	0xea, 0x8f, 0x20, 0xaa, 0xe6, 0xd4, 0xd2, 0xe9, 0xdc, 0xc6, 0x68, 0x0f, 0x44, 0xc7, 0x0f, 0x0a,
	0x42, 0x45, 0xd8, 0xcf, 0x29, 0x01, 0x40, 0x97, 0xb0, 0xb5, 0x0c, 0x34, 0xfd, 0x69, 0x4a, 0x6c,
	0x93, 0x3e, 0x3c, 0x17, 0xe2, 0x15, 0x61, 0x3f, 0xdf, 0xdc, 0xad, 0xf9, 0xef, 0x5a, 0x96, 0x93,
	0x7d, 0x89, 0x82, 0x9c, 0x08, 0xab, 0x8e, 0x20, 0xdf, 0x35, 0xee, 0x1d, 0x3d, 0xb8, 0x1d, 0xc1,
	0x9a, 0x3d, 0xc0, 0x53, 0x7e, 0x71, 0x46, 0xe1, 0x67, 0x94, 0x03, 0xc1, 0xe6, 0x37, 0xe4, 0x14,
	0xc1, 0x66, 0x0a, 0x87, 0x29, 0x12, 0xae, 0xc2, 0xf1, 0x14, 0x4e, 0x61, 0xcd, 0x55, 0x38, 0xd5,
	0x5f, 0x12, 0x80, 0x3a, 0xd8, 0xa6, 0xe6, 0xc4, 0x34, 0x74, 0x8a, 0x3b, 0xc4, 0xa2, 0xd8, 0xa2,
	0xe8, 0x1b, 0x48, 0xbf, 0x60, 0xdb, 0x31, 0x89, 0xc5, 0xab, 0xe7, 0x9b, 0xe5, 0xe5, 0x73, 0x99,
	0x5a, 0xc1, 0x2f, 0xc4, 0xd0, 0xa9, 0x49, 0xac, 0x5b, 0x57, 0xe5, 0x28, 0xbe, 0x1e, 0x5d, 0xc1,
	0xf6, 0x6c, 0x3e, 0x7e, 0x32, 0x0d, 0xed, 0x11, 0x2f, 0x3e, 0x60, 0xfb, 0x9a, 0x8b, 0x2e, 0xf0,
	0x22, 0x64, 0x7b, 0x16, 0x61, 0xe8, 0x6b, 0x80, 0xa0, 0x1c, 0x37, 0x92, 0x53, 0xc4, 0xa5, 0x0e,
	0xed, 0x40, 0xca, 0x74, 0x9c, 0x39, 0xb6, 0x3d, 0x4b, 0x5e, 0x84, 0x0a, 0x90, 0x76, 0xe6, 0xe3,
	0x1f, 0xb0, 0x41, 0x0b, 0x49, 0xfe, 0x0f, 0x3f, 0x44, 0x1d, 0x00, 0x8b, 0x50, 0x6d, 0x8c, 0x27,
	0xc4, 0xc6, 0x85, 0x54, 0x45, 0xd8, 0xcf, 0x36, 0x8b, 0x35, 0x77, 0x19, 0x6a, 0xfe, 0x32, 0xd4,
	0x46, 0xfe, 0x32, 0xb4, 0x33, 0xaf, 0xbf, 0x97, 0x63, 0x3f, 0xff, 0x51, 0x16, 0x14, 0xd1, 0x22,
	0xb4, 0xcd, 0xd3, 0x90, 0x0c, 0x2c, 0xd0, 0xf4, 0x09, 0xc5, 0x76, 0x21, 0xfd, 0x09, 0x35, 0x32,
	0x16, 0xa1, 0x32, 0xcb, 0x62, 0xbb, 0x83, 0x7f, 0xa2, 0xd8, 0xe2, 0x4d, 0xce, 0xb8, 0xbe, 0x96,
	0xa0, 0xfa, 0x02, 0xd9, 0xd0, 0x58, 0x50, 0x0b, 0xd2, 0x86, 0x3b, 0x1a, 0x3e, 0x8f, 0x6c, 0xa8,
	0x8f, 0xd1, 0xe9, 0x29, 0xbe, 0x16, 0x1d, 0x86, 0xf7, 0x33, 0xce, 0x13, 0x51, 0x74, 0xef, 0x42,
	0x3b, 0x5b, 0xfd, 0x4b, 0x80, 0xcd, 0x60, 0xba, 0x5f, 0x60, 0x1d, 0x82, 0x01, 0xc5, 0xff, 0x6f,
	0x40, 0x89, 0xd5, 0x01, 0xc9, 0x20, 0x72, 0xcd, 0xbd, 0x46, 0x2c, 0x3e, 0xd5, 0x8f, 0xee, 0xad,
	0x9b, 0x36, 0xb4, 0x56, 0x7b, 0x9b, 0x7c, 0xdf, 0x5b, 0x0a, 0x10, 0xbc, 0x18, 0x1d, 0xbf, 0x6f,
	0x6d, 0x71, 0xe9, 0x2d, 0xd2, 0x88, 0xcf, 0xe8, 0xec, 0xc1, 0xb7, 0xb0, 0xf3, 0xdf, 0xbd, 0x42,
	0x5b, 0xb0, 0x71, 0x33, 0xb8, 0x18, 0x0c, 0xef, 0x06, 0xda, 0x6d, 0x57, 0x51, 0xfb, 0xc3, 0x81,
	0x14, 0x43, 0xeb, 0x20, 0x7a, 0x81, 0xd6, 0x90, 0x84, 0x03, 0x15, 0x50, 0xf4, 0x03, 0x83, 0x2a,
	0xb0, 0xe7, 0x67, 0x5e, 0xdf, 0xb4, 0x2f, 0xfb, 0x1d, 0xed, 0xa2, 0xfb, 0x9d, 0x26, 0x5f, 0x9e,
	0x0f, 0x95, 0xfe, 0xa8, 0x77, 0x25, 0xc5, 0x50, 0x1a, 0x12, 0x8a, 0x2a, 0x4b, 0x02, 0x3b, 0x9c,
	0xa9, 0xb2, 0x14, 0x47, 0x22, 0x24, 0xbb, 0x1d, 0x76, 0x4c, 0x1c, 0xfc, 0x13, 0x07, 0x14, 0xfd,
	0xf6, 0x41, 0x65, 0xd8, 0xf5, 0xab, 0xaa, 0xfd, 0xf3, 0x81, 0x3c, 0xba, 0x51, 0xba, 0x2b, 0x45,
	0x25, 0xc8, 0x5d, 0x9d, 0x35, 0xb5, 0xbb, 0xfe, 0xa8, 0xa7, 0xb9, 0xd5, 0x39, 0x69, 0x05, 0x24,
	0x8e, 0x36, 0x61, 0x5d, 0xed, 0xc9, 0x8d, 0x00, 0x25, 0x98, 0x4f, 0xb5, 0x27, 0x37, 0x5b, 0x27,
	0x01, 0x5c, 0xf3, 0xe0, 0xd1, 0xe9, 0x71, 0x00, 0x93, 0x1e, 0x6c, 0x35, 0x42, 0x77, 0xa4, 0x58,
	0xc5, 0x33, 0x55, 0x76, 0x09, 0x2b, 0x2d, 0xa5, 0x99, 0x2e, 0x8c, 0x9a, 0xad, 0x13, 0x29, 0xc3,
	0x20, 0x37, 0x18, 0x52, 0x8a, 0xe8, 0x2b, 0xd8, 0x5c, 0x85, 0x4c, 0x0b, 0x51, 0x7c, 0x74, 0x7a,
	0x2c, 0x65, 0xa3, 0xb8, 0xd5, 0x68, 0x4a, 0x39, 0xb4, 0x03, 0xe8, 0x9d, 0x81, 0x6b, 0x55, 0x95,
	0xd6, 0x3d, 0x1e, 0xf6, 0xc0, 0x78, 0xde, 0xe3, 0x61, 0x1b, 0x8c, 0x6f, 0xb4, 0x0f, 0x5f, 0xdf,
	0x4a, 0xc2, 0x6f, 0x6f, 0x25, 0xe1, 0xcf, 0xb7, 0x92, 0xf0, 0xeb, 0xdf, 0xa5, 0xd8, 0xf7, 0xa5,
	0x31, 0xb6, 0xe9, 0xa2, 0x46, 0xb1, 0xf1, 0x50, 0x37, 0x88, 0x8d, 0xeb, 0xab, 0xbf, 0x61, 0xe3,
	0x14, 0x5f, 0xfc, 0xa3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x34, 0x41, 0x78, 0xdc, 0x06,
	0x00, 0x00,
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SignatureAlgorithm != 0 {
		i = encodeVarintKeypair(dAtA, i, uint64(m.SignatureAlgorithm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintKeypair(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EcdsaSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EcdsaSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EcdsaSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.S) > 0 {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintKeypair(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x22
	}
	if m.SNeg {
		i--
		if m.SNeg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.R) > 0 {
		i -= len(m.R)
		copy(dAtA[i:], m.R)
		i = encodeVarintKeypair(dAtA, i, uint64(len(m.R)))
		i--
		dAtA[i] = 0x12
	}
	if m.RNeg {
		i--
		if m.RNeg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CertificateContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintKeypair(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0x42
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.NotAfter, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.NotAfter):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintKeypair(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.NotBefore, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.NotBefore):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintKeypair(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintKeypair(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintKeypair(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintKeypair(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PublicKeyAlgorithm != 0 {
		i = encodeVarintKeypair(dAtA, i, uint64(m.PublicKeyAlgorithm))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintKeypair(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Certificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeypair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeypair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevocationContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevocationContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevocationContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintKeypair(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0x2a
	}
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.IssuedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.IssuedOn):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintKeypair(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x22
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintKeypair(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintKeypair(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintKeypair(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Revocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Revocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Revocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeypair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeypair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeypair(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeypair(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovKeypair(uint64(l))
	}
	if m.SignatureAlgorithm != 0 {
		n += 1 + sovKeypair(uint64(m.SignatureAlgorithm))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EcdsaSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RNeg {
		n += 2
	}
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovKeypair(uint64(l))
	}
	if m.SNeg {
		n += 2
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovKeypair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CertificateContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovKeypair(uint64(m.Version))
	}
	if m.PublicKeyAlgorithm != 0 {
		n += 1 + sovKeypair(uint64(m.PublicKeyAlgorithm))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovKeypair(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovKeypair(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovKeypair(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.NotBefore)
	n += 1 + l + sovKeypair(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.NotAfter)
	n += 1 + l + sovKeypair(uint64(l))
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovKeypair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Certificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovKeypair(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovKeypair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RevocationContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovKeypair(uint64(m.Version))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovKeypair(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovKeypair(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.IssuedOn)
	n += 1 + l + sovKeypair(uint64(l))
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovKeypair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Revocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovKeypair(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovKeypair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovKeypair(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeypair(x uint64) (n int) {
	return sovKeypair(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeypair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureAlgorithm", wireType)
			}
			m.SignatureAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignatureAlgorithm |= SignatureAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeypair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EcdsaSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeypair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EcdsaSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EcdsaSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RNeg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RNeg = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNeg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SNeg = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeypair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeypair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= CertRevocationVersions(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyAlgorithm", wireType)
			}
			m.PublicKeyAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicKeyAlgorithm |= PublicKeyAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = append(m.Issuer[:0], dAtA[iNdEx:postIndex]...)
			if m.Issuer == nil {
				m.Issuer = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = append(m.Subject[:0], dAtA[iNdEx:postIndex]...)
			if m.Subject == nil {
				m.Subject = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBefore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.NotBefore, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.NotAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = append(m.Extension[:0], dAtA[iNdEx:postIndex]...)
			if m.Extension == nil {
				m.Extension = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeypair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeypair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &CertificateContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeypair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevocationContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeypair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevocationContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevocationContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= CertRevocationVersions(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = append(m.Issuer[:0], dAtA[iNdEx:postIndex]...)
			if m.Issuer == nil {
				m.Issuer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = append(m.Subject[:0], dAtA[iNdEx:postIndex]...)
			if m.Subject == nil {
				m.Subject = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.IssuedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = append(m.Extension[:0], dAtA[iNdEx:postIndex]...)
			if m.Extension == nil {
				m.Extension = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeypair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Revocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeypair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Revocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Revocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &RevocationContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeypair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeypair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeypair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKeypair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeypair(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeypair
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeypair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeypair
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthKeypair
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKeypair
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKeypair(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthKeypair
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKeypair = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeypair   = fmt.Errorf("proto: integer overflow")
)
