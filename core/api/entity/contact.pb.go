// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/entity/contact.proto

/*
	Package entity is a generated protocol buffer package.

	It is generated from these files:
		api/entity/contact.proto

	It has these top-level messages:
		Contact
*/
package entity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Contact_Status int32

const (
	Contact_Unknown         Contact_Status = 0
	Contact_IsFriend        Contact_Status = 1
	Contact_IsTrustedFriend Contact_Status = 2
	Contact_IsRequested     Contact_Status = 3
	Contact_RequestedMe     Contact_Status = 4
	Contact_IsBlocked       Contact_Status = 5
	Contact_Myself          Contact_Status = 42
)

var Contact_Status_name = map[int32]string{
	0:  "Unknown",
	1:  "IsFriend",
	2:  "IsTrustedFriend",
	3:  "IsRequested",
	4:  "RequestedMe",
	5:  "IsBlocked",
	42: "Myself",
}
var Contact_Status_value = map[string]int32{
	"Unknown":         0,
	"IsFriend":        1,
	"IsTrustedFriend": 2,
	"IsRequested":     3,
	"RequestedMe":     4,
	"IsBlocked":       5,
	"Myself":          42,
}

func (x Contact_Status) String() string {
	return proto.EnumName(Contact_Status_name, int32(x))
}
func (Contact_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorContact, []int{0, 0} }

type Contact struct {
	ID            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt     time.Time      `protobuf:"bytes,2,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	UpdatedAt     time.Time      `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
	DeletedAt     *time.Time     `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,stdtime" json:"deleted_at,omitempty"`
	Status        Contact_Status `protobuf:"varint,10,opt,name=status,proto3,enum=berty.entity.Contact_Status" json:"status,omitempty"`
	DisplayName   string         `protobuf:"bytes,20,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	DisplayStatus string         `protobuf:"bytes,11,opt,name=display_status,json=displayStatus,proto3" json:"display_status,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptorContact, []int{0} }

func (m *Contact) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Contact) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Contact) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Contact) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *Contact) GetStatus() Contact_Status {
	if m != nil {
		return m.Status
	}
	return Contact_Unknown
}

func (m *Contact) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Contact) GetDisplayStatus() string {
	if m != nil {
		return m.DisplayStatus
	}
	return ""
}

func init() {
	proto.RegisterType((*Contact)(nil), "berty.entity.Contact")
	proto.RegisterEnum("berty.entity.Contact_Status", Contact_Status_name, Contact_Status_value)
}
func (m *Contact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contact) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintContact(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintContact(dAtA, i, uint64(types.SizeOfStdTime(m.CreatedAt)))
	n1, err := types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintContact(dAtA, i, uint64(types.SizeOfStdTime(m.UpdatedAt)))
	n2, err := types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.DeletedAt != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintContact(dAtA, i, uint64(types.SizeOfStdTime(*m.DeletedAt)))
		n3, err := types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintContact(dAtA, i, uint64(m.Status))
	}
	if len(m.DisplayStatus) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintContact(dAtA, i, uint64(len(m.DisplayStatus)))
		i += copy(dAtA[i:], m.DisplayStatus)
	}
	if len(m.DisplayName) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintContact(dAtA, i, uint64(len(m.DisplayName)))
		i += copy(dAtA[i:], m.DisplayName)
	}
	return i, nil
}

func encodeVarintContact(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Contact) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovContact(uint64(l))
	}
	l = types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovContact(uint64(l))
	l = types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovContact(uint64(l))
	if m.DeletedAt != nil {
		l = types.SizeOfStdTime(*m.DeletedAt)
		n += 1 + l + sovContact(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovContact(uint64(m.Status))
	}
	l = len(m.DisplayStatus)
	if l > 0 {
		n += 1 + l + sovContact(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 2 + l + sovContact(uint64(l))
	}
	return n
}

func sovContact(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozContact(x uint64) (n int) {
	return sovContact(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Contact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Contact_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContact(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContact
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthContact
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowContact
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipContact(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthContact = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContact   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/entity/contact.proto", fileDescriptorContact) }

var fileDescriptorContact = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x8e, 0xd3, 0x4c,
	0x14, 0x85, 0x63, 0x27, 0x7f, 0x76, 0x73, 0x9d, 0xdd, 0xb5, 0xe6, 0xdf, 0xc2, 0x8a, 0x56, 0x71,
	0x88, 0x04, 0x8a, 0x10, 0xb2, 0xa5, 0x85, 0x02, 0xd1, 0xa0, 0x64, 0x11, 0x92, 0x8b, 0xa5, 0x30,
	0x4b, 0x43, 0x13, 0x4d, 0x3c, 0x77, 0xcd, 0x28, 0xb6, 0xc7, 0xcc, 0x8c, 0x85, 0xfc, 0x16, 0x94,
	0x3c, 0xd2, 0x96, 0x3c, 0x41, 0x40, 0xe1, 0x0d, 0xe8, 0xe8, 0x90, 0xed, 0x09, 0xd0, 0x21, 0x1a,
	0xcb, 0xf7, 0xdc, 0xef, 0x9c, 0x2b, 0x1d, 0x0d, 0x78, 0xb4, 0xe4, 0x21, 0x16, 0x9a, 0xeb, 0x3a,
	0x4c, 0x44, 0xa1, 0x69, 0xa2, 0x83, 0x52, 0x0a, 0x2d, 0xc8, 0x78, 0x83, 0x52, 0xd7, 0x41, 0xb7,
	0x9b, 0x9c, 0xa7, 0x22, 0x15, 0xed, 0x22, 0x6c, 0xfe, 0x3a, 0x66, 0xe2, 0xa7, 0x42, 0xa4, 0x19,
	0x86, 0xed, 0xb4, 0xa9, 0x6e, 0x43, 0xcd, 0x73, 0x54, 0x9a, 0xe6, 0x65, 0x07, 0xcc, 0x7f, 0xf4,
	0xe1, 0xe8, 0xaa, 0x8b, 0x25, 0x8f, 0xc0, 0xe6, 0xcc, 0xb3, 0x66, 0xd6, 0x62, 0xb4, 0xba, 0xd8,
	0xef, 0x7c, 0x3b, 0x7a, 0xf1, 0x7d, 0xe7, 0x93, 0x54, 0xc8, 0xfc, 0xd9, 0xbc, 0x94, 0x3c, 0xa7,
	0xb2, 0x5e, 0x6f, 0xb1, 0x9e, 0xc7, 0x36, 0x67, 0xe4, 0x0a, 0x20, 0x91, 0x48, 0x35, 0xb2, 0x35,
	0xd5, 0x9e, 0x3d, 0xb3, 0x16, 0xce, 0xe5, 0x24, 0xe8, 0xee, 0x05, 0x87, 0x7b, 0xc1, 0xcd, 0xe1,
	0xde, 0xea, 0xf8, 0x6e, 0xe7, 0xf7, 0x3e, 0x7e, 0xf1, 0xad, 0x78, 0x64, 0x7c, 0x4b, 0xdd, 0x84,
	0x54, 0x25, 0x3b, 0x84, 0xf4, 0xff, 0x25, 0xc4, 0xf8, 0x96, 0x9a, 0x3c, 0x07, 0x60, 0x98, 0xa1,
	0x09, 0x19, 0xfc, 0x35, 0x64, 0xd0, 0x05, 0x18, 0xcf, 0x52, 0x93, 0x27, 0x30, 0x54, 0x9a, 0xea,
	0x4a, 0x79, 0x30, 0xb3, 0x16, 0xa7, 0x97, 0x17, 0xc1, 0x9f, 0xd5, 0x06, 0xa6, 0x9f, 0xe0, 0x75,
	0xcb, 0xc4, 0x86, 0x25, 0xf7, 0xe1, 0x94, 0x71, 0x55, 0x66, 0xb4, 0x5e, 0x1b, 0xb7, 0xd3, 0x54,
	0x17, 0x9f, 0x18, 0xb5, 0xc3, 0xc9, 0x3d, 0x18, 0x1f, 0xb0, 0x82, 0xe6, 0xe8, 0x9d, 0xb7, 0x90,
	0x63, 0xb4, 0x57, 0x34, 0xc7, 0x79, 0x05, 0x43, 0x03, 0x3b, 0x70, 0xf4, 0xa6, 0xd8, 0x16, 0xe2,
	0x43, 0xe1, 0xf6, 0xc8, 0x18, 0x8e, 0x23, 0xf5, 0x52, 0x72, 0x2c, 0x98, 0x6b, 0x91, 0xff, 0xe1,
	0x2c, 0x52, 0x37, 0xb2, 0x52, 0x1a, 0x99, 0x11, 0x6d, 0x72, 0x06, 0x4e, 0xa4, 0x62, 0x7c, 0x5f,
	0x61, 0x23, 0xbb, 0xfd, 0x46, 0xf8, 0x35, 0x5e, 0xa3, 0x3b, 0x20, 0x27, 0x30, 0x8a, 0xd4, 0x2a,
	0x13, 0xc9, 0x16, 0x99, 0xfb, 0x1f, 0x01, 0x18, 0x5e, 0xd7, 0x0a, 0xb3, 0x5b, 0xf7, 0xe1, 0xea,
	0xe9, 0xdd, 0x7e, 0x6a, 0x7d, 0xde, 0x4f, 0xad, 0xaf, 0xfb, 0xa9, 0xf5, 0xe9, 0xdb, 0xb4, 0xf7,
	0xf6, 0x41, 0xca, 0xf5, 0xbb, 0x6a, 0x13, 0x24, 0x22, 0x0f, 0xdb, 0x0a, 0xcc, 0x37, 0x11, 0x12,
	0xc3, 0xdf, 0x0f, 0x71, 0x33, 0x6c, 0x5b, 0x7d, 0xfc, 0x33, 0x00, 0x00, 0xff, 0xff, 0x25, 0xd9,
	0xc1, 0xfc, 0x9d, 0x02, 0x00, 0x00,
}
