// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/p2p/kind.proto

package p2p

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import berty_entity1 "github.com/berty/berty/core/entity"
import berty_entity2 "github.com/berty/berty/core/entity"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Kind int32

const (
	Kind_Unknown Kind = 0
	// Sent events are used by the UI.
	Kind_Sent Kind = 101
	// Ack events are created and sent after receiving an event from a peer.
	Kind_Ack Kind = 102
	// Ping events can be use to check and measure the availability of a peer.
	Kind_Ping                   Kind = 103
	Kind_ContactRequest         Kind = 201
	Kind_ContactRequestAccepted Kind = 202
	Kind_ContactShareMe         Kind = 203
	Kind_ContactShare           Kind = 204
	Kind_ConversationInvite     Kind = 301
)

var Kind_name = map[int32]string{
	0:   "Unknown",
	101: "Sent",
	102: "Ack",
	103: "Ping",
	201: "ContactRequest",
	202: "ContactRequestAccepted",
	203: "ContactShareMe",
	204: "ContactShare",
	301: "ConversationInvite",
}
var Kind_value = map[string]int32{
	"Unknown":                0,
	"Sent":                   101,
	"Ack":                    102,
	"Ping":                   103,
	"ContactRequest":         201,
	"ContactRequestAccepted": 202,
	"ContactShareMe":         203,
	"ContactShare":           204,
	"ConversationInvite":     301,
}

func (x Kind) String() string {
	return proto.EnumName(Kind_name, int32(x))
}
func (Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptorKind, []int{0} }

type SentAttrs struct {
	IDs []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *SentAttrs) Reset()                    { *m = SentAttrs{} }
func (m *SentAttrs) String() string            { return proto.CompactTextString(m) }
func (*SentAttrs) ProtoMessage()               {}
func (*SentAttrs) Descriptor() ([]byte, []int) { return fileDescriptorKind, []int{0} }

func (m *SentAttrs) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

type AckAttrs struct {
	IDs    []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	ErrMsg string   `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
}

func (m *AckAttrs) Reset()                    { *m = AckAttrs{} }
func (m *AckAttrs) String() string            { return proto.CompactTextString(m) }
func (*AckAttrs) ProtoMessage()               {}
func (*AckAttrs) Descriptor() ([]byte, []int) { return fileDescriptorKind, []int{1} }

func (m *AckAttrs) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

func (m *AckAttrs) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type PingAttrs struct {
}

func (m *PingAttrs) Reset()                    { *m = PingAttrs{} }
func (m *PingAttrs) String() string            { return proto.CompactTextString(m) }
func (*PingAttrs) ProtoMessage()               {}
func (*PingAttrs) Descriptor() ([]byte, []int) { return fileDescriptorKind, []int{2} }

type ContactRequestAttrs struct {
	Me        *berty_entity1.Contact `protobuf:"bytes,1,opt,name=me" json:"me,omitempty"`
	IntroText string                 `protobuf:"bytes,2,opt,name=intro_text,json=introText,proto3" json:"intro_text,omitempty"`
}

func (m *ContactRequestAttrs) Reset()                    { *m = ContactRequestAttrs{} }
func (m *ContactRequestAttrs) String() string            { return proto.CompactTextString(m) }
func (*ContactRequestAttrs) ProtoMessage()               {}
func (*ContactRequestAttrs) Descriptor() ([]byte, []int) { return fileDescriptorKind, []int{3} }

func (m *ContactRequestAttrs) GetMe() *berty_entity1.Contact {
	if m != nil {
		return m.Me
	}
	return nil
}

func (m *ContactRequestAttrs) GetIntroText() string {
	if m != nil {
		return m.IntroText
	}
	return ""
}

type ContactRequestAcceptedAttrs struct {
}

func (m *ContactRequestAcceptedAttrs) Reset()                    { *m = ContactRequestAcceptedAttrs{} }
func (m *ContactRequestAcceptedAttrs) String() string            { return proto.CompactTextString(m) }
func (*ContactRequestAcceptedAttrs) ProtoMessage()               {}
func (*ContactRequestAcceptedAttrs) Descriptor() ([]byte, []int) { return fileDescriptorKind, []int{4} }

type ContactShareMeAttrs struct {
	Me *berty_entity1.Contact `protobuf:"bytes,1,opt,name=me" json:"me,omitempty"`
}

func (m *ContactShareMeAttrs) Reset()                    { *m = ContactShareMeAttrs{} }
func (m *ContactShareMeAttrs) String() string            { return proto.CompactTextString(m) }
func (*ContactShareMeAttrs) ProtoMessage()               {}
func (*ContactShareMeAttrs) Descriptor() ([]byte, []int) { return fileDescriptorKind, []int{5} }

func (m *ContactShareMeAttrs) GetMe() *berty_entity1.Contact {
	if m != nil {
		return m.Me
	}
	return nil
}

type ContactShareAttrs struct {
	Contact *berty_entity1.Contact `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
}

func (m *ContactShareAttrs) Reset()                    { *m = ContactShareAttrs{} }
func (m *ContactShareAttrs) String() string            { return proto.CompactTextString(m) }
func (*ContactShareAttrs) ProtoMessage()               {}
func (*ContactShareAttrs) Descriptor() ([]byte, []int) { return fileDescriptorKind, []int{6} }

func (m *ContactShareAttrs) GetContact() *berty_entity1.Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

type ConversationInviteAttrs struct {
	Conversation *berty_entity2.Conversation `protobuf:"bytes,1,opt,name=conversation" json:"conversation,omitempty"`
}

func (m *ConversationInviteAttrs) Reset()                    { *m = ConversationInviteAttrs{} }
func (m *ConversationInviteAttrs) String() string            { return proto.CompactTextString(m) }
func (*ConversationInviteAttrs) ProtoMessage()               {}
func (*ConversationInviteAttrs) Descriptor() ([]byte, []int) { return fileDescriptorKind, []int{7} }

func (m *ConversationInviteAttrs) GetConversation() *berty_entity2.Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func init() {
	proto.RegisterType((*SentAttrs)(nil), "berty.p2p.SentAttrs")
	proto.RegisterType((*AckAttrs)(nil), "berty.p2p.AckAttrs")
	proto.RegisterType((*PingAttrs)(nil), "berty.p2p.PingAttrs")
	proto.RegisterType((*ContactRequestAttrs)(nil), "berty.p2p.ContactRequestAttrs")
	proto.RegisterType((*ContactRequestAcceptedAttrs)(nil), "berty.p2p.ContactRequestAcceptedAttrs")
	proto.RegisterType((*ContactShareMeAttrs)(nil), "berty.p2p.ContactShareMeAttrs")
	proto.RegisterType((*ContactShareAttrs)(nil), "berty.p2p.ContactShareAttrs")
	proto.RegisterType((*ConversationInviteAttrs)(nil), "berty.p2p.ConversationInviteAttrs")
	proto.RegisterEnum("berty.p2p.Kind", Kind_name, Kind_value)
}
func (m *SentAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentAttrs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for _, s := range m.IDs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *AckAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckAttrs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for _, s := range m.IDs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKind(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	return i, nil
}

func (m *PingAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingAttrs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ContactRequestAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestAttrs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Me != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKind(dAtA, i, uint64(m.Me.Size()))
		n1, err := m.Me.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.IntroText) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKind(dAtA, i, uint64(len(m.IntroText)))
		i += copy(dAtA[i:], m.IntroText)
	}
	return i, nil
}

func (m *ContactRequestAcceptedAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestAcceptedAttrs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ContactShareMeAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactShareMeAttrs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Me != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKind(dAtA, i, uint64(m.Me.Size()))
		n2, err := m.Me.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ContactShareAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactShareAttrs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Contact != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKind(dAtA, i, uint64(m.Contact.Size()))
		n3, err := m.Contact.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ConversationInviteAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationInviteAttrs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Conversation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKind(dAtA, i, uint64(m.Conversation.Size()))
		n4, err := m.Conversation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintKind(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SentAttrs) Size() (n int) {
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for _, s := range m.IDs {
			l = len(s)
			n += 1 + l + sovKind(uint64(l))
		}
	}
	return n
}

func (m *AckAttrs) Size() (n int) {
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for _, s := range m.IDs {
			l = len(s)
			n += 1 + l + sovKind(uint64(l))
		}
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovKind(uint64(l))
	}
	return n
}

func (m *PingAttrs) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ContactRequestAttrs) Size() (n int) {
	var l int
	_ = l
	if m.Me != nil {
		l = m.Me.Size()
		n += 1 + l + sovKind(uint64(l))
	}
	l = len(m.IntroText)
	if l > 0 {
		n += 1 + l + sovKind(uint64(l))
	}
	return n
}

func (m *ContactRequestAcceptedAttrs) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ContactShareMeAttrs) Size() (n int) {
	var l int
	_ = l
	if m.Me != nil {
		l = m.Me.Size()
		n += 1 + l + sovKind(uint64(l))
	}
	return n
}

func (m *ContactShareAttrs) Size() (n int) {
	var l int
	_ = l
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovKind(uint64(l))
	}
	return n
}

func (m *ConversationInviteAttrs) Size() (n int) {
	var l int
	_ = l
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovKind(uint64(l))
	}
	return n
}

func sovKind(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKind(x uint64) (n int) {
	return sovKind(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SentAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDs = append(m.IDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AckAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDs = append(m.IDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipKind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Me", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKind
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Me == nil {
				m.Me = &berty_entity1.Contact{}
			}
			if err := m.Me.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntroText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntroText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestAcceptedAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestAcceptedAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestAcceptedAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipKind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactShareMeAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactShareMeAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactShareMeAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Me", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKind
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Me == nil {
				m.Me = &berty_entity1.Contact{}
			}
			if err := m.Me.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactShareAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactShareAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactShareAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKind
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &berty_entity1.Contact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationInviteAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationInviteAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationInviteAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKind
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &berty_entity2.Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKind(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKind
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKind
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKind
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKind
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKind
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKind(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKind = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKind   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/p2p/kind.proto", fileDescriptorKind) }

var fileDescriptorKind = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x14, 0xec, 0x26, 0x55, 0x53, 0xbf, 0x54, 0x68, 0xbb, 0x2d, 0x6d, 0x9a, 0xaa, 0x21, 0x32, 0x02,
	0x45, 0x1c, 0x6c, 0x29, 0x88, 0x1b, 0x20, 0xa5, 0x2d, 0x87, 0x0a, 0x55, 0x42, 0x29, 0x1c, 0x80,
	0x03, 0x4a, 0xd6, 0x0f, 0x77, 0x65, 0x65, 0xd7, 0xac, 0x5f, 0x4b, 0xfb, 0x4f, 0xb8, 0x73, 0xe6,
	0x7f, 0xf0, 0x75, 0xe0, 0x17, 0x20, 0x64, 0xfe, 0x08, 0xb2, 0xbd, 0x2d, 0x2e, 0x45, 0xa0, 0x5e,
	0xac, 0xf5, 0x78, 0xde, 0x8c, 0xe7, 0x8d, 0x0d, 0x62, 0x92, 0xaa, 0x30, 0x1d, 0xa6, 0x61, 0xa2,
	0x74, 0x14, 0xa4, 0xd6, 0x90, 0x11, 0xde, 0x14, 0x2d, 0x9d, 0x06, 0xe9, 0x30, 0xed, 0xae, 0xa2,
	0x26, 0x45, 0xa7, 0xa1, 0x34, 0x9a, 0x26, 0x92, 0x2a, 0x42, 0x77, 0xe3, 0x37, 0x7a, 0x8c, 0x36,
	0x9b, 0x90, 0x32, 0xda, 0x3d, 0x5a, 0x8d, 0x4d, 0x6c, 0xca, 0x63, 0x58, 0x9c, 0x2a, 0xd4, 0xbf,
	0x0d, 0xde, 0x01, 0x6a, 0x1a, 0x11, 0xd9, 0x4c, 0x6c, 0x40, 0x53, 0x45, 0x59, 0x87, 0xf5, 0x9b,
	0x03, 0x6f, 0xbb, 0x95, 0x7f, 0xbf, 0xd1, 0xdc, 0xdb, 0xcd, 0xc6, 0x05, 0xe6, 0x3f, 0x80, 0xc5,
	0x91, 0x4c, 0xfe, 0x47, 0x13, 0x6b, 0xb0, 0xf0, 0xc8, 0xda, 0xfd, 0x2c, 0xee, 0x34, 0xfa, 0x6c,
	0xe0, 0x8d, 0xdd, 0x9d, 0xdf, 0x06, 0xef, 0x89, 0xd2, 0x71, 0x39, 0xef, 0xbf, 0x84, 0x95, 0x9d,
	0xea, 0xad, 0xc7, 0xf8, 0xe6, 0x08, 0x33, 0xe7, 0x7e, 0x0b, 0x1a, 0x33, 0xec, 0xb0, 0x3e, 0x1b,
	0xb4, 0x87, 0xd7, 0x83, 0x2a, 0x69, 0x15, 0x27, 0x38, 0xa3, 0x37, 0x66, 0x28, 0xb6, 0x00, 0x94,
	0x26, 0x6b, 0x5e, 0x11, 0x9e, 0x90, 0xb3, 0xf1, 0x4a, 0xe4, 0x29, 0x9e, 0x90, 0xbf, 0x05, 0x9b,
	0x7f, 0x88, 0x4b, 0x89, 0x29, 0x61, 0x54, 0x79, 0xdf, 0x3f, 0xf7, 0x3e, 0x38, 0x9c, 0x58, 0xdc,
	0xc7, 0xab, 0x78, 0xfb, 0xbb, 0xb0, 0x5c, 0x9f, 0xae, 0x66, 0x43, 0x68, 0xb9, 0x12, 0xfe, 0x2d,
	0x70, 0xc6, 0xf2, 0x9f, 0xc3, 0xfa, 0x4e, 0xad, 0x9f, 0x3d, 0x7d, 0xac, 0xc8, 0x69, 0x3d, 0x84,
	0xa5, 0x7a, 0x75, 0x4e, 0xb0, 0x7b, 0x49, 0xf0, 0x9c, 0x31, 0xbe, 0xc0, 0xbf, 0xf3, 0x9e, 0xc1,
	0xfc, 0x63, 0xa5, 0x23, 0xd1, 0x86, 0xd6, 0x33, 0x9d, 0x68, 0xf3, 0x56, 0xf3, 0x39, 0xb1, 0x08,
	0xf3, 0x45, 0xc9, 0x1c, 0x45, 0x0b, 0x9a, 0x23, 0x99, 0xf0, 0xd7, 0x05, 0x54, 0x14, 0xc2, 0x63,
	0xb1, 0x02, 0xd7, 0x2e, 0x2e, 0x8c, 0x7f, 0x62, 0x62, 0x13, 0xd6, 0xfe, 0xbe, 0x45, 0xfe, 0x99,
	0xd5, 0x26, 0xdc, 0x0e, 0xf9, 0x17, 0x26, 0x96, 0x61, 0xa9, 0x0e, 0xf2, 0xaf, 0x4c, 0xac, 0x83,
	0xb8, 0x9c, 0x93, 0x7f, 0x68, 0x6c, 0xdf, 0xfb, 0x98, 0xf7, 0xd8, 0xb7, 0xbc, 0xc7, 0x7e, 0xe4,
	0x3d, 0xf6, 0xee, 0x67, 0x6f, 0xee, 0xc5, 0xcd, 0x58, 0xd1, 0xe1, 0xd1, 0x34, 0x90, 0x66, 0x16,
	0x96, 0x59, 0xdd, 0x55, 0x1a, 0x8b, 0xa1, 0xfb, 0x11, 0xa6, 0x0b, 0xe5, 0x27, 0x7b, 0xf7, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x14, 0xfb, 0xa4, 0x1a, 0x03, 0x00, 0x00,
}
