// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/node/service.proto

package node // import "berty.tech/core/api/node"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import p2p "berty.tech/core/api/p2p"
import _ "berty.tech/core/api/protobuf"
import entity "berty.tech/core/entity"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingDestination struct {
	Destination          string   `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingDestination) Reset()         { *m = PingDestination{} }
func (m *PingDestination) String() string { return proto.CompactTextString(m) }
func (*PingDestination) ProtoMessage()    {}
func (*PingDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_90a0eb8257f317b4, []int{0}
}
func (m *PingDestination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingDestination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PingDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingDestination.Merge(dst, src)
}
func (m *PingDestination) XXX_Size() int {
	return m.Size()
}
func (m *PingDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_PingDestination.DiscardUnknown(m)
}

var xxx_messageInfo_PingDestination proto.InternalMessageInfo

func (m *PingDestination) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type ContactRequestInput struct {
	Contact              *entity.Contact `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
	IntroText            string          `protobuf:"bytes,2,opt,name=intro_text,json=introText,proto3" json:"intro_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ContactRequestInput) Reset()         { *m = ContactRequestInput{} }
func (m *ContactRequestInput) String() string { return proto.CompactTextString(m) }
func (*ContactRequestInput) ProtoMessage()    {}
func (*ContactRequestInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_90a0eb8257f317b4, []int{1}
}
func (m *ContactRequestInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ContactRequestInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestInput.Merge(dst, src)
}
func (m *ContactRequestInput) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestInput.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestInput proto.InternalMessageInfo

func (m *ContactRequestInput) GetContact() *entity.Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *ContactRequestInput) GetIntroText() string {
	if m != nil {
		return m.IntroText
	}
	return ""
}

type ConversationAddMessageInput struct {
	Conversation         *entity.Conversation `protobuf:"bytes,1,opt,name=conversation" json:"conversation,omitempty"`
	Message              *entity.Message      `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConversationAddMessageInput) Reset()         { *m = ConversationAddMessageInput{} }
func (m *ConversationAddMessageInput) String() string { return proto.CompactTextString(m) }
func (*ConversationAddMessageInput) ProtoMessage()    {}
func (*ConversationAddMessageInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_90a0eb8257f317b4, []int{2}
}
func (m *ConversationAddMessageInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationAddMessageInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationAddMessageInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConversationAddMessageInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationAddMessageInput.Merge(dst, src)
}
func (m *ConversationAddMessageInput) XXX_Size() int {
	return m.Size()
}
func (m *ConversationAddMessageInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationAddMessageInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationAddMessageInput proto.InternalMessageInfo

func (m *ConversationAddMessageInput) GetConversation() *entity.Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *ConversationAddMessageInput) GetMessage() *entity.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type EventStreamInput struct {
	Filter               *p2p.Event `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EventStreamInput) Reset()         { *m = EventStreamInput{} }
func (m *EventStreamInput) String() string { return proto.CompactTextString(m) }
func (*EventStreamInput) ProtoMessage()    {}
func (*EventStreamInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_90a0eb8257f317b4, []int{3}
}
func (m *EventStreamInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStreamInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStreamInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EventStreamInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStreamInput.Merge(dst, src)
}
func (m *EventStreamInput) XXX_Size() int {
	return m.Size()
}
func (m *EventStreamInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStreamInput.DiscardUnknown(m)
}

var xxx_messageInfo_EventStreamInput proto.InternalMessageInfo

func (m *EventStreamInput) GetFilter() *p2p.Event {
	if m != nil {
		return m.Filter
	}
	return nil
}

type EventListInput struct {
	Limit                uint32     `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Filter               *p2p.Event `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EventListInput) Reset()         { *m = EventListInput{} }
func (m *EventListInput) String() string { return proto.CompactTextString(m) }
func (*EventListInput) ProtoMessage()    {}
func (*EventListInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_90a0eb8257f317b4, []int{4}
}
func (m *EventListInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventListInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventListInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EventListInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventListInput.Merge(dst, src)
}
func (m *EventListInput) XXX_Size() int {
	return m.Size()
}
func (m *EventListInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EventListInput.DiscardUnknown(m)
}

var xxx_messageInfo_EventListInput proto.InternalMessageInfo

func (m *EventListInput) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *EventListInput) GetFilter() *p2p.Event {
	if m != nil {
		return m.Filter
	}
	return nil
}

type ContactListInput struct {
	Filter               *entity.Contact `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ContactListInput) Reset()         { *m = ContactListInput{} }
func (m *ContactListInput) String() string { return proto.CompactTextString(m) }
func (*ContactListInput) ProtoMessage()    {}
func (*ContactListInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_90a0eb8257f317b4, []int{5}
}
func (m *ContactListInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactListInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactListInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ContactListInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactListInput.Merge(dst, src)
}
func (m *ContactListInput) XXX_Size() int {
	return m.Size()
}
func (m *ContactListInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactListInput.DiscardUnknown(m)
}

var xxx_messageInfo_ContactListInput proto.InternalMessageInfo

func (m *ContactListInput) GetFilter() *entity.Contact {
	if m != nil {
		return m.Filter
	}
	return nil
}

type ConversationListInput struct {
	Filter               *entity.Conversation `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConversationListInput) Reset()         { *m = ConversationListInput{} }
func (m *ConversationListInput) String() string { return proto.CompactTextString(m) }
func (*ConversationListInput) ProtoMessage()    {}
func (*ConversationListInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_90a0eb8257f317b4, []int{6}
}
func (m *ConversationListInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationListInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationListInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConversationListInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationListInput.Merge(dst, src)
}
func (m *ConversationListInput) XXX_Size() int {
	return m.Size()
}
func (m *ConversationListInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationListInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationListInput proto.InternalMessageInfo

func (m *ConversationListInput) GetFilter() *entity.Conversation {
	if m != nil {
		return m.Filter
	}
	return nil
}

type ConversationCreateInput struct {
	Contacts             []*entity.Contact `protobuf:"bytes,1,rep,name=contacts" json:"contacts,omitempty"`
	Title                string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Topic                string            `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConversationCreateInput) Reset()         { *m = ConversationCreateInput{} }
func (m *ConversationCreateInput) String() string { return proto.CompactTextString(m) }
func (*ConversationCreateInput) ProtoMessage()    {}
func (*ConversationCreateInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_90a0eb8257f317b4, []int{7}
}
func (m *ConversationCreateInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationCreateInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationCreateInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConversationCreateInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationCreateInput.Merge(dst, src)
}
func (m *ConversationCreateInput) XXX_Size() int {
	return m.Size()
}
func (m *ConversationCreateInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationCreateInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationCreateInput proto.InternalMessageInfo

func (m *ConversationCreateInput) GetContacts() []*entity.Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *ConversationCreateInput) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ConversationCreateInput) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type ConversationManageMembersInput struct {
	Conversation         *entity.Conversation         `protobuf:"bytes,1,opt,name=conversation" json:"conversation,omitempty"`
	Members              []*entity.ConversationMember `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ConversationManageMembersInput) Reset()         { *m = ConversationManageMembersInput{} }
func (m *ConversationManageMembersInput) String() string { return proto.CompactTextString(m) }
func (*ConversationManageMembersInput) ProtoMessage()    {}
func (*ConversationManageMembersInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_90a0eb8257f317b4, []int{8}
}
func (m *ConversationManageMembersInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationManageMembersInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationManageMembersInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConversationManageMembersInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationManageMembersInput.Merge(dst, src)
}
func (m *ConversationManageMembersInput) XXX_Size() int {
	return m.Size()
}
func (m *ConversationManageMembersInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationManageMembersInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationManageMembersInput proto.InternalMessageInfo

func (m *ConversationManageMembersInput) GetConversation() *entity.Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *ConversationManageMembersInput) GetMembers() []*entity.ConversationMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type Void struct {
	T                    bool     `protobuf:"varint,1,opt,name=T,proto3" json:"T,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_90a0eb8257f317b4, []int{9}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Void.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(dst, src)
}
func (m *Void) XXX_Size() int {
	return m.Size()
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func (m *Void) GetT() bool {
	if m != nil {
		return m.T
	}
	return false
}

func init() {
	proto.RegisterType((*PingDestination)(nil), "berty.node.PingDestination")
	proto.RegisterType((*ContactRequestInput)(nil), "berty.node.ContactRequestInput")
	proto.RegisterType((*ConversationAddMessageInput)(nil), "berty.node.ConversationAddMessageInput")
	proto.RegisterType((*EventStreamInput)(nil), "berty.node.EventStreamInput")
	proto.RegisterType((*EventListInput)(nil), "berty.node.EventListInput")
	proto.RegisterType((*ContactListInput)(nil), "berty.node.ContactListInput")
	proto.RegisterType((*ConversationListInput)(nil), "berty.node.ConversationListInput")
	proto.RegisterType((*ConversationCreateInput)(nil), "berty.node.ConversationCreateInput")
	proto.RegisterType((*ConversationManageMembersInput)(nil), "berty.node.ConversationManageMembersInput")
	proto.RegisterType((*Void)(nil), "berty.node.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// yield new events in real-time
	EventStream(ctx context.Context, in *EventStreamInput, opts ...grpc.CallOption) (Service_EventStreamClient, error)
	// list old events
	EventList(ctx context.Context, in *EventListInput, opts ...grpc.CallOption) (Service_EventListClient, error)
	GetEvent(ctx context.Context, in *p2p.Event, opts ...grpc.CallOption) (*p2p.Event, error)
	ContactRequest(ctx context.Context, in *ContactRequestInput, opts ...grpc.CallOption) (*entity.Contact, error)
	ContactAcceptRequest(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error)
	ContactRemove(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error)
	ContactUpdate(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error)
	ContactList(ctx context.Context, in *ContactListInput, opts ...grpc.CallOption) (Service_ContactListClient, error)
	GetContact(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error)
	ConversationCreate(ctx context.Context, in *ConversationCreateInput, opts ...grpc.CallOption) (*entity.Conversation, error)
	ConversationList(ctx context.Context, in *ConversationListInput, opts ...grpc.CallOption) (Service_ConversationListClient, error)
	ConversationInvite(ctx context.Context, in *ConversationManageMembersInput, opts ...grpc.CallOption) (*entity.Conversation, error)
	ConversationExclude(ctx context.Context, in *ConversationManageMembersInput, opts ...grpc.CallOption) (*entity.Conversation, error)
	ConversationAddMessage(ctx context.Context, in *ConversationAddMessageInput, opts ...grpc.CallOption) (*p2p.Event, error)
	GetConversation(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Conversation, error)
	GetConversationMember(ctx context.Context, in *entity.ConversationMember, opts ...grpc.CallOption) (*entity.ConversationMember, error)
	// HandleEvent is the unencrypted (and unsafe) version of HandleEnvelope.
	// it's only exposed over the node API, it should be completely deactivated in public releases
	HandleEvent(ctx context.Context, in *p2p.Event, opts ...grpc.CallOption) (*Void, error)
	GenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	DebugPing(ctx context.Context, in *PingDestination, opts ...grpc.CallOption) (*Void, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) EventStream(ctx context.Context, in *EventStreamInput, opts ...grpc.CallOption) (Service_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/berty.node.Service/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_EventStreamClient interface {
	Recv() (*p2p.Event, error)
	grpc.ClientStream
}

type serviceEventStreamClient struct {
	grpc.ClientStream
}

func (x *serviceEventStreamClient) Recv() (*p2p.Event, error) {
	m := new(p2p.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) EventList(ctx context.Context, in *EventListInput, opts ...grpc.CallOption) (Service_EventListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[1], "/berty.node.Service/EventList", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceEventListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_EventListClient interface {
	Recv() (*p2p.Event, error)
	grpc.ClientStream
}

type serviceEventListClient struct {
	grpc.ClientStream
}

func (x *serviceEventListClient) Recv() (*p2p.Event, error) {
	m := new(p2p.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) GetEvent(ctx context.Context, in *p2p.Event, opts ...grpc.CallOption) (*p2p.Event, error) {
	out := new(p2p.Event)
	err := c.cc.Invoke(ctx, "/berty.node.Service/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactRequest(ctx context.Context, in *ContactRequestInput, opts ...grpc.CallOption) (*entity.Contact, error) {
	out := new(entity.Contact)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ContactRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactAcceptRequest(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error) {
	out := new(entity.Contact)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ContactAcceptRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactRemove(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error) {
	out := new(entity.Contact)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ContactRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactUpdate(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error) {
	out := new(entity.Contact)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ContactUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactList(ctx context.Context, in *ContactListInput, opts ...grpc.CallOption) (Service_ContactListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[2], "/berty.node.Service/ContactList", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceContactListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_ContactListClient interface {
	Recv() (*entity.Contact, error)
	grpc.ClientStream
}

type serviceContactListClient struct {
	grpc.ClientStream
}

func (x *serviceContactListClient) Recv() (*entity.Contact, error) {
	m := new(entity.Contact)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) GetContact(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error) {
	out := new(entity.Contact)
	err := c.cc.Invoke(ctx, "/berty.node.Service/GetContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationCreate(ctx context.Context, in *ConversationCreateInput, opts ...grpc.CallOption) (*entity.Conversation, error) {
	out := new(entity.Conversation)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationList(ctx context.Context, in *ConversationListInput, opts ...grpc.CallOption) (Service_ConversationListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[3], "/berty.node.Service/ConversationList", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceConversationListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_ConversationListClient interface {
	Recv() (*entity.Conversation, error)
	grpc.ClientStream
}

type serviceConversationListClient struct {
	grpc.ClientStream
}

func (x *serviceConversationListClient) Recv() (*entity.Conversation, error) {
	m := new(entity.Conversation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) ConversationInvite(ctx context.Context, in *ConversationManageMembersInput, opts ...grpc.CallOption) (*entity.Conversation, error) {
	out := new(entity.Conversation)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationExclude(ctx context.Context, in *ConversationManageMembersInput, opts ...grpc.CallOption) (*entity.Conversation, error) {
	out := new(entity.Conversation)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationExclude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationAddMessage(ctx context.Context, in *ConversationAddMessageInput, opts ...grpc.CallOption) (*p2p.Event, error) {
	out := new(p2p.Event)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationAddMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetConversation(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Conversation, error) {
	out := new(entity.Conversation)
	err := c.cc.Invoke(ctx, "/berty.node.Service/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetConversationMember(ctx context.Context, in *entity.ConversationMember, opts ...grpc.CallOption) (*entity.ConversationMember, error) {
	out := new(entity.ConversationMember)
	err := c.cc.Invoke(ctx, "/berty.node.Service/GetConversationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) HandleEvent(ctx context.Context, in *p2p.Event, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/HandleEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/GenerateFakeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DebugPing(ctx context.Context, in *PingDestination, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/DebugPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// yield new events in real-time
	EventStream(*EventStreamInput, Service_EventStreamServer) error
	// list old events
	EventList(*EventListInput, Service_EventListServer) error
	GetEvent(context.Context, *p2p.Event) (*p2p.Event, error)
	ContactRequest(context.Context, *ContactRequestInput) (*entity.Contact, error)
	ContactAcceptRequest(context.Context, *entity.Contact) (*entity.Contact, error)
	ContactRemove(context.Context, *entity.Contact) (*entity.Contact, error)
	ContactUpdate(context.Context, *entity.Contact) (*entity.Contact, error)
	ContactList(*ContactListInput, Service_ContactListServer) error
	GetContact(context.Context, *entity.Contact) (*entity.Contact, error)
	ConversationCreate(context.Context, *ConversationCreateInput) (*entity.Conversation, error)
	ConversationList(*ConversationListInput, Service_ConversationListServer) error
	ConversationInvite(context.Context, *ConversationManageMembersInput) (*entity.Conversation, error)
	ConversationExclude(context.Context, *ConversationManageMembersInput) (*entity.Conversation, error)
	ConversationAddMessage(context.Context, *ConversationAddMessageInput) (*p2p.Event, error)
	GetConversation(context.Context, *entity.Conversation) (*entity.Conversation, error)
	GetConversationMember(context.Context, *entity.ConversationMember) (*entity.ConversationMember, error)
	// HandleEvent is the unencrypted (and unsafe) version of HandleEnvelope.
	// it's only exposed over the node API, it should be completely deactivated in public releases
	HandleEvent(context.Context, *p2p.Event) (*Void, error)
	GenerateFakeData(context.Context, *Void) (*Void, error)
	DebugPing(context.Context, *PingDestination) (*Void, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).EventStream(m, &serviceEventStreamServer{stream})
}

type Service_EventStreamServer interface {
	Send(*p2p.Event) error
	grpc.ServerStream
}

type serviceEventStreamServer struct {
	grpc.ServerStream
}

func (x *serviceEventStreamServer) Send(m *p2p.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_EventList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventListInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).EventList(m, &serviceEventListServer{stream})
}

type Service_EventListServer interface {
	Send(*p2p.Event) error
	grpc.ServerStream
}

type serviceEventListServer struct {
	grpc.ServerStream
}

func (x *serviceEventListServer) Send(m *p2p.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(p2p.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetEvent(ctx, req.(*p2p.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactRequest(ctx, req.(*ContactRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactAcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactAcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactAcceptRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactAcceptRequest(ctx, req.(*entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactRemove(ctx, req.(*entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactUpdate(ctx, req.(*entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContactListInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).ContactList(m, &serviceContactListServer{stream})
}

type Service_ContactListServer interface {
	Send(*entity.Contact) error
	grpc.ServerStream
}

type serviceContactListServer struct {
	grpc.ServerStream
}

func (x *serviceContactListServer) Send(m *entity.Contact) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/GetContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetContact(ctx, req.(*entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationCreate(ctx, req.(*ConversationCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConversationListInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).ConversationList(m, &serviceConversationListServer{stream})
}

type Service_ConversationListServer interface {
	Send(*entity.Conversation) error
	grpc.ServerStream
}

type serviceConversationListServer struct {
	grpc.ServerStream
}

func (x *serviceConversationListServer) Send(m *entity.Conversation) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_ConversationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationManageMembersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationInvite(ctx, req.(*ConversationManageMembersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationExclude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationManageMembersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationExclude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationExclude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationExclude(ctx, req.(*ConversationManageMembersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationAddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationAddMessageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationAddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationAddMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationAddMessage(ctx, req.(*ConversationAddMessageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetConversation(ctx, req.(*entity.Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetConversationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.ConversationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetConversationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/GetConversationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetConversationMember(ctx, req.(*entity.ConversationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_HandleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(p2p.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).HandleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/HandleEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).HandleEvent(ctx, req.(*p2p.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GenerateFakeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GenerateFakeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/GenerateFakeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GenerateFakeData(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DebugPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingDestination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DebugPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/DebugPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DebugPing(ctx, req.(*PingDestination))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "berty.node.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvent",
			Handler:    _Service_GetEvent_Handler,
		},
		{
			MethodName: "ContactRequest",
			Handler:    _Service_ContactRequest_Handler,
		},
		{
			MethodName: "ContactAcceptRequest",
			Handler:    _Service_ContactAcceptRequest_Handler,
		},
		{
			MethodName: "ContactRemove",
			Handler:    _Service_ContactRemove_Handler,
		},
		{
			MethodName: "ContactUpdate",
			Handler:    _Service_ContactUpdate_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _Service_GetContact_Handler,
		},
		{
			MethodName: "ConversationCreate",
			Handler:    _Service_ConversationCreate_Handler,
		},
		{
			MethodName: "ConversationInvite",
			Handler:    _Service_ConversationInvite_Handler,
		},
		{
			MethodName: "ConversationExclude",
			Handler:    _Service_ConversationExclude_Handler,
		},
		{
			MethodName: "ConversationAddMessage",
			Handler:    _Service_ConversationAddMessage_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _Service_GetConversation_Handler,
		},
		{
			MethodName: "GetConversationMember",
			Handler:    _Service_GetConversationMember_Handler,
		},
		{
			MethodName: "HandleEvent",
			Handler:    _Service_HandleEvent_Handler,
		},
		{
			MethodName: "GenerateFakeData",
			Handler:    _Service_GenerateFakeData_Handler,
		},
		{
			MethodName: "DebugPing",
			Handler:    _Service_DebugPing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _Service_EventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventList",
			Handler:       _Service_EventList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ContactList",
			Handler:       _Service_ContactList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConversationList",
			Handler:       _Service_ConversationList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/node/service.proto",
}

func (m *PingDestination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingDestination) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Destination) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Destination)))
		i += copy(dAtA[i:], m.Destination)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContactRequestInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Contact != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Contact.Size()))
		n1, err := m.Contact.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.IntroText) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.IntroText)))
		i += copy(dAtA[i:], m.IntroText)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConversationAddMessageInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationAddMessageInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Conversation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Conversation.Size()))
		n2, err := m.Conversation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Message.Size()))
		n3, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EventStreamInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStreamInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Filter.Size()))
		n4, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EventListInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventListInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Limit))
	}
	if m.Filter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Filter.Size()))
		n5, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContactListInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactListInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Filter.Size()))
		n6, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConversationListInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationListInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Filter.Size()))
		n7, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConversationCreateInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationCreateInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, msg := range m.Contacts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConversationManageMembersInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationManageMembersInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Conversation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Conversation.Size()))
		n8, err := m.Conversation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Void) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Void) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.T {
		dAtA[i] = 0x8
		i++
		if m.T {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PingDestination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.IntroText)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConversationAddMessageInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventStreamInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventListInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovService(uint64(m.Limit))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactListInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConversationListInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConversationCreateInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConversationManageMembersInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Void) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PingDestination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingDestination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingDestination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &entity.Contact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntroText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntroText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationAddMessageInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationAddMessageInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationAddMessageInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &entity.Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &entity.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStreamInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStreamInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStreamInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &p2p.Event{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventListInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventListInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventListInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &p2p.Event{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactListInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactListInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactListInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &entity.Contact{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationListInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationListInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationListInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &entity.Conversation{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationCreateInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationCreateInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationCreateInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &entity.Contact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationManageMembersInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationManageMembersInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationManageMembersInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &entity.Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &entity.ConversationMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Void) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Void: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Void: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.T = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/node/service.proto", fileDescriptor_service_90a0eb8257f317b4) }

var fileDescriptor_service_90a0eb8257f317b4 = []byte{
	// 1023 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x5f, 0x6f, 0xdb, 0x54,
	0x14, 0x9f, 0x3b, 0xb6, 0x35, 0x27, 0xdd, 0x16, 0xdd, 0xb5, 0x5d, 0x9c, 0xd1, 0xcc, 0x35, 0x83,
	0x8d, 0xaa, 0x4b, 0x46, 0x2a, 0xfe, 0x55, 0x13, 0xa8, 0x6b, 0x4a, 0xa9, 0x46, 0x50, 0x49, 0x0a,
	0x0f, 0x4c, 0x80, 0x1c, 0xfb, 0x2c, 0xbd, 0x5a, 0x62, 0x7b, 0xf6, 0x4d, 0xd4, 0x3c, 0x20, 0x78,
	0xe3, 0x6d, 0xcf, 0x3c, 0x00, 0x9f, 0x07, 0xf9, 0x09, 0xc1, 0x17, 0x40, 0xe5, 0x0b, 0xf8, 0x23,
	0x20, 0x5f, 0x5f, 0x3b, 0x4e, 0x6c, 0x27, 0x9a, 0x04, 0xd2, 0x1e, 0x7d, 0xee, 0xb9, 0xe7, 0xf7,
	0x3b, 0xbf, 0x7b, 0xfc, 0xf3, 0x35, 0xac, 0x6b, 0x36, 0xad, 0x9b, 0x96, 0x81, 0x75, 0x17, 0x9d,
	0x11, 0xd5, 0xb1, 0x66, 0x3b, 0x16, 0xb3, 0x08, 0x74, 0xd1, 0x61, 0xe3, 0x5a, 0xb0, 0x52, 0xa9,
	0x04, 0x39, 0x3c, 0xdc, 0x1d, 0x3e, 0xad, 0xf7, 0x1c, 0xcd, 0x3e, 0x7d, 0xde, 0x0f, 0xf3, 0x2a,
	0x37, 0xf8, 0x5a, 0xc3, 0xae, 0xe3, 0x08, 0x4d, 0x26, 0x82, 0xab, 0x68, 0x32, 0xca, 0xc6, 0x75,
	0xdd, 0x32, 0x99, 0xa6, 0x47, 0x51, 0x79, 0x12, 0x1d, 0xa1, 0xe3, 0x6a, 0x8c, 0x5a, 0xe6, 0xcc,
	0x86, 0x01, 0xba, 0xae, 0xd6, 0x13, 0x1c, 0xd4, 0x1d, 0xb8, 0x7e, 0x4c, 0xcd, 0x5e, 0x13, 0x5d,
	0x46, 0x4d, 0x9e, 0x4e, 0x14, 0x28, 0x1a, 0x93, 0xc7, 0xb2, 0xa4, 0x48, 0xf7, 0x0a, 0xed, 0x64,
	0x48, 0x45, 0xb8, 0xb1, 0x1f, 0xc2, 0xb6, 0xf1, 0xf9, 0x10, 0x5d, 0x76, 0x64, 0xda, 0x43, 0x46,
	0xea, 0x70, 0x45, 0xb0, 0xe1, 0x9b, 0x8a, 0x8d, 0xb5, 0x5a, 0xd8, 0x61, 0x88, 0x5c, 0x8b, 0xf6,
	0x44, 0x59, 0x64, 0x03, 0x80, 0x9a, 0xcc, 0xb1, 0xbe, 0x63, 0x78, 0xc6, 0xca, 0x4b, 0x1c, 0xa8,
	0xc0, 0x23, 0x27, 0x78, 0xc6, 0xd4, 0x17, 0x12, 0xdc, 0xda, 0x4f, 0x34, 0xb2, 0x67, 0x18, 0xad,
	0x90, 0x7c, 0x88, 0xf7, 0x11, 0xac, 0x24, 0xfb, 0x14, 0xa0, 0x95, 0x14, 0x68, 0x9c, 0xd1, 0x9e,
	0xca, 0x0f, 0xf8, 0x0a, 0x31, 0x38, 0x76, 0x8a, 0xaf, 0x00, 0x6b, 0x47, 0x59, 0xea, 0x43, 0x28,
	0x1d, 0x04, 0x47, 0xd0, 0x61, 0x0e, 0x6a, 0x83, 0x90, 0xc4, 0x3d, 0xb8, 0xfc, 0x94, 0xf6, 0x19,
	0x3a, 0x02, 0xbe, 0x24, 0x6a, 0xd8, 0x0d, 0xbb, 0xc6, 0x93, 0xdb, 0x62, 0x5d, 0x3d, 0x86, 0x6b,
	0x3c, 0xf0, 0x19, 0x8d, 0x04, 0x5b, 0x85, 0x4b, 0x7d, 0x3a, 0xa0, 0xa1, 0x5c, 0x57, 0xdb, 0xe1,
	0x43, 0xa2, 0xe2, 0xd2, 0x82, 0x8a, 0x7b, 0x50, 0x12, 0x9a, 0x4e, 0x6a, 0xde, 0x9f, 0xe1, 0x93,
	0x73, 0x06, 0x51, 0x89, 0xc7, 0xb0, 0x96, 0x54, 0x68, 0x52, 0xa7, 0x31, 0x53, 0x67, 0x9e, 0xac,
	0x51, 0xb1, 0x33, 0xb8, 0x99, 0x8c, 0xef, 0x3b, 0xa8, 0x31, 0x71, 0x56, 0xef, 0xc0, 0xb2, 0x38,
	0x75, 0xb7, 0x2c, 0x29, 0x17, 0xf3, 0x89, 0xc5, 0x69, 0x81, 0x3a, 0x8c, 0xb2, 0x3e, 0x8a, 0xc1,
	0x08, 0x1f, 0x78, 0xd4, 0xb2, 0xa9, 0x5e, 0xbe, 0x28, 0xa2, 0xc1, 0x83, 0xfa, 0x8b, 0x04, 0xd5,
	0x24, 0x74, 0x4b, 0x33, 0xb5, 0x1e, 0xb6, 0x70, 0xd0, 0x45, 0xc7, 0xfd, 0x6f, 0xa6, 0x65, 0x37,
	0x98, 0x16, 0x5e, 0xaf, 0xbc, 0xc4, 0x1b, 0x50, 0xf2, 0xb7, 0x86, 0xc0, 0xed, 0x68, 0x83, 0xba,
	0x0a, 0xaf, 0x7d, 0x65, 0x51, 0x83, 0xac, 0x80, 0x74, 0xc2, 0x81, 0x97, 0xdb, 0xd2, 0x49, 0xe3,
	0xaf, 0x12, 0x5c, 0xe9, 0x84, 0x8e, 0x40, 0xc6, 0x50, 0x4c, 0x8c, 0x16, 0x79, 0xbd, 0x36, 0xf1,
	0x86, 0xda, 0xec, 0xcc, 0x55, 0x52, 0x13, 0xa1, 0x7e, 0xe0, 0xf9, 0xf2, 0x9d, 0x67, 0xd4, 0x34,
	0x76, 0x95, 0x0e, 0x73, 0xa8, 0xd9, 0xdb, 0x56, 0x92, 0xe4, 0x8f, 0x9a, 0x51, 0xfc, 0x4f, 0x5f,
	0x5e, 0xe9, 0x0c, 0xbb, 0xae, 0xee, 0x50, 0x3b, 0x58, 0x79, 0x20, 0x91, 0x1f, 0x25, 0x28, 0xc4,
	0x83, 0x49, 0x2a, 0x29, 0xe4, 0x78, 0x26, 0x32, 0x70, 0xf7, 0x3d, 0x5f, 0x7e, 0x8f, 0x8f, 0xed,
	0xae, 0x72, 0x64, 0xb2, 0x6d, 0x25, 0xe4, 0xf0, 0x28, 0x48, 0x3b, 0x6e, 0xd8, 0x8f, 0xa9, 0x69,
	0xcc, 0x61, 0x72, 0xe9, 0x8b, 0x21, 0x3a, 0xe3, 0x07, 0x12, 0x69, 0xc1, 0xf2, 0x21, 0x32, 0x5e,
	0x92, 0xa4, 0x40, 0x32, 0x60, 0x37, 0x3c, 0x5f, 0x2e, 0x71, 0x37, 0x9c, 0xd4, 0xdb, 0x8c, 0x0b,
	0x92, 0x1f, 0xe0, 0xda, 0xb4, 0x3f, 0x91, 0xdb, 0xc9, 0xae, 0x32, 0xbc, 0xab, 0x92, 0x3d, 0x8d,
	0xea, 0xbb, 0x9e, 0x2f, 0xbf, 0x29, 0x26, 0x32, 0x01, 0xb5, 0xad, 0xc4, 0x2e, 0x95, 0x68, 0x67,
	0xb9, 0x35, 0x64, 0xe1, 0xac, 0x9c, 0xc2, 0xaa, 0xa8, 0xb0, 0xa7, 0xeb, 0x68, 0xc7, 0x34, 0xb2,
	0x51, 0xf2, 0xc0, 0x55, 0xcf, 0x97, 0x49, 0x1a, 0x7c, 0x0a, 0x49, 0x83, 0xab, 0x71, 0x3b, 0x03,
	0x6b, 0x84, 0xff, 0x03, 0xc4, 0x28, 0x86, 0xf8, 0xd2, 0x36, 0x34, 0xf6, 0xb2, 0x10, 0xef, 0x7b,
	0xbe, 0x7c, 0x37, 0x4b, 0x42, 0x83, 0xba, 0x76, 0x5f, 0x1b, 0x7f, 0xae, 0x0d, 0x30, 0x53, 0x44,
	0x17, 0x8a, 0x09, 0x77, 0x9b, 0x7e, 0x25, 0x66, 0x6d, 0x2f, 0x0f, 0xfc, 0xbe, 0xe7, 0xcb, 0x8a,
	0xcb, 0x34, 0x36, 0x74, 0xc5, 0x54, 0x1e, 0xf0, 0x04, 0xb1, 0xde, 0xe1, 0x2b, 0xc9, 0x49, 0x7c,
	0x02, 0x70, 0x88, 0x4c, 0x2c, 0xbf, 0x64, 0xa7, 0xb7, 0x73, 0xc5, 0x14, 0x73, 0xf9, 0x3d, 0x90,
	0xb4, 0x3f, 0x92, 0x37, 0x66, 0x1a, 0xcb, 0xf2, 0xcf, 0xca, 0x1c, 0x9f, 0x52, 0xdf, 0xf2, 0x7c,
	0x79, 0x3d, 0xb2, 0xcd, 0x00, 0xf8, 0x89, 0x40, 0xfe, 0x66, 0xfa, 0x20, 0xbf, 0xe5, 0x9f, 0x8b,
	0x29, 0xaf, 0x27, 0x9b, 0x79, 0xe0, 0x13, 0x69, 0xe7, 0x41, 0x17, 0x92, 0xda, 0xfd, 0x2a, 0x4d,
	0xf7, 0x77, 0x64, 0x8e, 0x28, 0x43, 0xb2, 0x95, 0x07, 0x91, 0x36, 0xe9, 0xb9, 0x58, 0x1f, 0x7b,
	0xbe, 0x5c, 0xcf, 0xf6, 0x92, 0x4d, 0x6e, 0x32, 0x8b, 0xfa, 0xff, 0x4d, 0xe2, 0xf7, 0x96, 0x78,
	0xff, 0xc1, 0x99, 0xde, 0x1f, 0x1a, 0xaf, 0x10, 0xc1, 0x17, 0x12, 0xac, 0x67, 0x5f, 0x78, 0xc8,
	0xdd, 0x3c, 0x8e, 0x33, 0x97, 0xa2, 0x0c, 0xb3, 0xfc, 0xd0, 0xf3, 0xe5, 0xb7, 0x73, 0x69, 0x89,
	0xbb, 0x4d, 0xf6, 0xab, 0x6f, 0xc1, 0xf5, 0xf0, 0x6d, 0x98, 0x7c, 0x06, 0xe7, 0x08, 0x30, 0x57,
	0x9c, 0x3b, 0x9e, 0x2f, 0xdf, 0xcc, 0x61, 0x31, 0x79, 0x43, 0x7e, 0x92, 0x60, 0x6d, 0x06, 0x31,
	0x94, 0x9f, 0x2c, 0xfc, 0xda, 0x56, 0x16, 0x66, 0xa8, 0x5b, 0x9e, 0x2f, 0x6f, 0xe8, 0xa9, 0x78,
	0x26, 0x93, 0x1d, 0x28, 0x7e, 0xaa, 0x99, 0x46, 0x1f, 0x17, 0x7d, 0x95, 0xf8, 0x89, 0x04, 0x5f,
	0x77, 0xf5, 0x02, 0x69, 0x42, 0xe9, 0x10, 0x4d, 0x74, 0x34, 0x86, 0x9f, 0x68, 0xcf, 0xb0, 0xa9,
	0x31, 0x8d, 0xa4, 0xf2, 0x32, 0x76, 0xae, 0x4c, 0xa9, 0xfe, 0x10, 0x0a, 0x4d, 0xec, 0x0e, 0x7b,
	0xc1, 0xc5, 0x9c, 0xdc, 0x4a, 0x26, 0xcf, 0x5c, 0xd5, 0xb3, 0x38, 0x3c, 0xda, 0xfa, 0xfd, 0xbc,
	0x2a, 0xfd, 0x71, 0x5e, 0x95, 0xfe, 0x3e, 0xaf, 0x4a, 0x3f, 0xff, 0x53, 0xbd, 0xf0, 0x75, 0x39,
	0x4c, 0x62, 0xa8, 0x9f, 0xd6, 0x75, 0xcb, 0xc1, 0x7a, 0xf4, 0x3f, 0xd2, 0xbd, 0xcc, 0x7f, 0x02,
	0x76, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x82, 0xa0, 0x84, 0xa2, 0xa2, 0x0c, 0x00, 0x00,
}
