// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/node/service.proto

package node

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	entity "berty.tech/core/entity"
	deviceinfo "berty.tech/core/pkg/deviceinfo"
	_ "berty.tech/core/pkg/validate"
	push "berty.tech/core/push"
	metric "berty.tech/network/metric"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NullableTrueFalse int32

const (
	NullableTrueFalse_Null  NullableTrueFalse = 0
	NullableTrueFalse_True  NullableTrueFalse = 1
	NullableTrueFalse_False NullableTrueFalse = 2
)

var NullableTrueFalse_name = map[int32]string{
	0: "Null",
	1: "True",
	2: "False",
}

var NullableTrueFalse_value = map[string]int32{
	"Null":  0,
	"True":  1,
	"False": 2,
}

func (x NullableTrueFalse) String() string {
	return proto.EnumName(NullableTrueFalse_name, int32(x))
}

func (NullableTrueFalse) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{0}
}

type CommitLog_Operation int32

const (
	CommitLog_Create CommitLog_Operation = 0
	CommitLog_Update CommitLog_Operation = 1
	CommitLog_Delete CommitLog_Operation = 2
)

var CommitLog_Operation_name = map[int32]string{
	0: "Create",
	1: "Update",
	2: "Delete",
}

var CommitLog_Operation_value = map[string]int32{
	"Create": 0,
	"Update": 1,
	"Delete": 2,
}

func (x CommitLog_Operation) String() string {
	return proto.EnumName(CommitLog_Operation_name, int32(x))
}

func (CommitLog_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{9, 0}
}

type Badge struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Badge) Reset()         { *m = Badge{} }
func (m *Badge) String() string { return proto.CompactTextString(m) }
func (*Badge) ProtoMessage()    {}
func (*Badge) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{0}
}
func (m *Badge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Badge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Badge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Badge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Badge.Merge(m, src)
}
func (m *Badge) XXX_Size() int {
	return m.Size()
}
func (m *Badge) XXX_DiscardUnknown() {
	xxx_messageInfo_Badge.DiscardUnknown(m)
}

var xxx_messageInfo_Badge proto.InternalMessageInfo

func (m *Badge) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TestErrorInput struct {
	Kind                 string   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestErrorInput) Reset()         { *m = TestErrorInput{} }
func (m *TestErrorInput) String() string { return proto.CompactTextString(m) }
func (*TestErrorInput) ProtoMessage()    {}
func (*TestErrorInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{1}
}
func (m *TestErrorInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestErrorInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestErrorInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestErrorInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestErrorInput.Merge(m, src)
}
func (m *TestErrorInput) XXX_Size() int {
	return m.Size()
}
func (m *TestErrorInput) XXX_DiscardUnknown() {
	xxx_messageInfo_TestErrorInput.DiscardUnknown(m)
}

var xxx_messageInfo_TestErrorInput proto.InternalMessageInfo

func (m *TestErrorInput) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type ProtocolsOutput struct {
	Protocols            []string `protobuf:"bytes,1,rep,name=protocols,proto3" json:"protocols,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtocolsOutput) Reset()         { *m = ProtocolsOutput{} }
func (m *ProtocolsOutput) String() string { return proto.CompactTextString(m) }
func (*ProtocolsOutput) ProtoMessage()    {}
func (*ProtocolsOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{2}
}
func (m *ProtocolsOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolsOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtocolsOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtocolsOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolsOutput.Merge(m, src)
}
func (m *ProtocolsOutput) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolsOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolsOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolsOutput proto.InternalMessageInfo

func (m *ProtocolsOutput) GetProtocols() []string {
	if m != nil {
		return m.Protocols
	}
	return nil
}

type AppVersionOutput struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppVersionOutput) Reset()         { *m = AppVersionOutput{} }
func (m *AppVersionOutput) String() string { return proto.CompactTextString(m) }
func (*AppVersionOutput) ProtoMessage()    {}
func (*AppVersionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{3}
}
func (m *AppVersionOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppVersionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppVersionOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppVersionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppVersionOutput.Merge(m, src)
}
func (m *AppVersionOutput) XXX_Size() int {
	return m.Size()
}
func (m *AppVersionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_AppVersionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_AppVersionOutput proto.InternalMessageInfo

func (m *AppVersionOutput) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type PingDestination struct {
	Destination          string   `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingDestination) Reset()         { *m = PingDestination{} }
func (m *PingDestination) String() string { return proto.CompactTextString(m) }
func (*PingDestination) ProtoMessage()    {}
func (*PingDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{4}
}
func (m *PingDestination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingDestination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingDestination.Merge(m, src)
}
func (m *PingDestination) XXX_Size() int {
	return m.Size()
}
func (m *PingDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_PingDestination.DiscardUnknown(m)
}

var xxx_messageInfo_PingDestination proto.InternalMessageInfo

func (m *PingDestination) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type ContactRequestInput struct {
	ContactID                  string   `protobuf:"bytes,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	ContactOverrideDisplayName string   `protobuf:"bytes,2,opt,name=contact_override_display_name,json=contactOverrideDisplayName,proto3" json:"contact_override_display_name,omitempty"`
	IntroText                  string   `protobuf:"bytes,3,opt,name=intro_text,json=introText,proto3" json:"intro_text,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *ContactRequestInput) Reset()         { *m = ContactRequestInput{} }
func (m *ContactRequestInput) String() string { return proto.CompactTextString(m) }
func (*ContactRequestInput) ProtoMessage()    {}
func (*ContactRequestInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{5}
}
func (m *ContactRequestInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestInput.Merge(m, src)
}
func (m *ContactRequestInput) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestInput.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestInput proto.InternalMessageInfo

func (m *ContactRequestInput) GetContactID() string {
	if m != nil {
		return m.ContactID
	}
	return ""
}

func (m *ContactRequestInput) GetContactOverrideDisplayName() string {
	if m != nil {
		return m.ContactOverrideDisplayName
	}
	return ""
}

func (m *ContactRequestInput) GetIntroText() string {
	if m != nil {
		return m.IntroText
	}
	return ""
}

type ContactAcceptRequestInput struct {
	ContactID            string   `protobuf:"bytes,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactAcceptRequestInput) Reset()         { *m = ContactAcceptRequestInput{} }
func (m *ContactAcceptRequestInput) String() string { return proto.CompactTextString(m) }
func (*ContactAcceptRequestInput) ProtoMessage()    {}
func (*ContactAcceptRequestInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{6}
}
func (m *ContactAcceptRequestInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactAcceptRequestInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactAcceptRequestInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactAcceptRequestInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactAcceptRequestInput.Merge(m, src)
}
func (m *ContactAcceptRequestInput) XXX_Size() int {
	return m.Size()
}
func (m *ContactAcceptRequestInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactAcceptRequestInput.DiscardUnknown(m)
}

var xxx_messageInfo_ContactAcceptRequestInput proto.InternalMessageInfo

func (m *ContactAcceptRequestInput) GetContactID() string {
	if m != nil {
		return m.ContactID
	}
	return ""
}

type ConversationAddMessageInput struct {
	Conversation         *entity.Conversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Message              *entity.Message      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConversationAddMessageInput) Reset()         { *m = ConversationAddMessageInput{} }
func (m *ConversationAddMessageInput) String() string { return proto.CompactTextString(m) }
func (*ConversationAddMessageInput) ProtoMessage()    {}
func (*ConversationAddMessageInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{7}
}
func (m *ConversationAddMessageInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationAddMessageInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationAddMessageInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationAddMessageInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationAddMessageInput.Merge(m, src)
}
func (m *ConversationAddMessageInput) XXX_Size() int {
	return m.Size()
}
func (m *ConversationAddMessageInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationAddMessageInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationAddMessageInput proto.InternalMessageInfo

func (m *ConversationAddMessageInput) GetConversation() *entity.Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *ConversationAddMessageInput) GetMessage() *entity.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type EventStreamInput struct {
	Filter               *entity.Event `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EventStreamInput) Reset()         { *m = EventStreamInput{} }
func (m *EventStreamInput) String() string { return proto.CompactTextString(m) }
func (*EventStreamInput) ProtoMessage()    {}
func (*EventStreamInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{8}
}
func (m *EventStreamInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStreamInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStreamInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStreamInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStreamInput.Merge(m, src)
}
func (m *EventStreamInput) XXX_Size() int {
	return m.Size()
}
func (m *EventStreamInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStreamInput.DiscardUnknown(m)
}

var xxx_messageInfo_EventStreamInput proto.InternalMessageInfo

func (m *EventStreamInput) GetFilter() *entity.Event {
	if m != nil {
		return m.Filter
	}
	return nil
}

// Storage sync
type CommitLog struct {
	Operation            CommitLog_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=berty.node.CommitLog_Operation" json:"operation,omitempty"`
	Entity               *CommitLog_Entity   `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CommitLog) Reset()         { *m = CommitLog{} }
func (m *CommitLog) String() string { return proto.CompactTextString(m) }
func (*CommitLog) ProtoMessage()    {}
func (*CommitLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{9}
}
func (m *CommitLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitLog.Merge(m, src)
}
func (m *CommitLog) XXX_Size() int {
	return m.Size()
}
func (m *CommitLog) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitLog.DiscardUnknown(m)
}

var xxx_messageInfo_CommitLog proto.InternalMessageInfo

func (m *CommitLog) GetOperation() CommitLog_Operation {
	if m != nil {
		return m.Operation
	}
	return CommitLog_Create
}

func (m *CommitLog) GetEntity() *CommitLog_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CommitLog_Entity struct {
	Config               *entity.Config               `protobuf:"bytes,101,opt,name=config,proto3" json:"config,omitempty"`
	Contact              *entity.Contact              `protobuf:"bytes,102,opt,name=contact,proto3" json:"contact,omitempty"`
	Device               *entity.Device               `protobuf:"bytes,103,opt,name=device,proto3" json:"device,omitempty"`
	Conversation         *entity.Conversation         `protobuf:"bytes,104,opt,name=conversation,proto3" json:"conversation,omitempty"`
	ConversationMember   *entity.ConversationMember   `protobuf:"bytes,105,opt,name=conversation_member,json=conversationMember,proto3" json:"conversation_member,omitempty"`
	Event                *entity.Event                `protobuf:"bytes,106,opt,name=event,proto3" json:"event,omitempty"`
	DevicePushConfig     *entity.DevicePushConfig     `protobuf:"bytes,107,opt,name=device_push_config,json=devicePushConfig,proto3" json:"device_push_config,omitempty"`
	DevicePushIdentifier *entity.DevicePushIdentifier `protobuf:"bytes,108,opt,name=device_push_identifier,json=devicePushIdentifier,proto3" json:"device_push_identifier,omitempty"`
	EventDispatch        *entity.EventDispatch        `protobuf:"bytes,109,opt,name=event_dispatch,json=eventDispatch,proto3" json:"event_dispatch,omitempty"`
	SenderAlias          *entity.SenderAlias          `protobuf:"bytes,110,opt,name=sender_alias,json=senderAlias,proto3" json:"sender_alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CommitLog_Entity) Reset()         { *m = CommitLog_Entity{} }
func (m *CommitLog_Entity) String() string { return proto.CompactTextString(m) }
func (*CommitLog_Entity) ProtoMessage()    {}
func (*CommitLog_Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{9, 0}
}
func (m *CommitLog_Entity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitLog_Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitLog_Entity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitLog_Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitLog_Entity.Merge(m, src)
}
func (m *CommitLog_Entity) XXX_Size() int {
	return m.Size()
}
func (m *CommitLog_Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitLog_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_CommitLog_Entity proto.InternalMessageInfo

func (m *CommitLog_Entity) GetConfig() *entity.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CommitLog_Entity) GetContact() *entity.Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *CommitLog_Entity) GetDevice() *entity.Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *CommitLog_Entity) GetConversation() *entity.Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *CommitLog_Entity) GetConversationMember() *entity.ConversationMember {
	if m != nil {
		return m.ConversationMember
	}
	return nil
}

func (m *CommitLog_Entity) GetEvent() *entity.Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *CommitLog_Entity) GetDevicePushConfig() *entity.DevicePushConfig {
	if m != nil {
		return m.DevicePushConfig
	}
	return nil
}

func (m *CommitLog_Entity) GetDevicePushIdentifier() *entity.DevicePushIdentifier {
	if m != nil {
		return m.DevicePushIdentifier
	}
	return nil
}

func (m *CommitLog_Entity) GetEventDispatch() *entity.EventDispatch {
	if m != nil {
		return m.EventDispatch
	}
	return nil
}

func (m *CommitLog_Entity) GetSenderAlias() *entity.SenderAlias {
	if m != nil {
		return m.SenderAlias
	}
	return nil
}

//
// EventList
//
type EventListInput struct {
	Filter               *entity.Event     `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	OnlyWithoutAckedAt   NullableTrueFalse `protobuf:"varint,2,opt,name=only_without_acked_at,json=onlyWithoutAckedAt,proto3,enum=berty.node.NullableTrueFalse" json:"only_without_acked_at,omitempty"`
	OnlyWithoutSeenAt    NullableTrueFalse `protobuf:"varint,3,opt,name=only_without_seen_at,json=onlyWithoutSeenAt,proto3,enum=berty.node.NullableTrueFalse" json:"only_without_seen_at,omitempty"`
	Paginate             *Pagination       `protobuf:"bytes,99,opt,name=paginate,proto3" json:"paginate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EventListInput) Reset()         { *m = EventListInput{} }
func (m *EventListInput) String() string { return proto.CompactTextString(m) }
func (*EventListInput) ProtoMessage()    {}
func (*EventListInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{10}
}
func (m *EventListInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventListInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventListInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventListInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventListInput.Merge(m, src)
}
func (m *EventListInput) XXX_Size() int {
	return m.Size()
}
func (m *EventListInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EventListInput.DiscardUnknown(m)
}

var xxx_messageInfo_EventListInput proto.InternalMessageInfo

func (m *EventListInput) GetFilter() *entity.Event {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *EventListInput) GetOnlyWithoutAckedAt() NullableTrueFalse {
	if m != nil {
		return m.OnlyWithoutAckedAt
	}
	return NullableTrueFalse_Null
}

func (m *EventListInput) GetOnlyWithoutSeenAt() NullableTrueFalse {
	if m != nil {
		return m.OnlyWithoutSeenAt
	}
	return NullableTrueFalse_Null
}

func (m *EventListInput) GetPaginate() *Pagination {
	if m != nil {
		return m.Paginate
	}
	return nil
}

type ContactListInput struct {
	Filter               *entity.Contact `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Paginate             *Pagination     `protobuf:"bytes,99,opt,name=paginate,proto3" json:"paginate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ContactListInput) Reset()         { *m = ContactListInput{} }
func (m *ContactListInput) String() string { return proto.CompactTextString(m) }
func (*ContactListInput) ProtoMessage()    {}
func (*ContactListInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{11}
}
func (m *ContactListInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactListInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactListInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactListInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactListInput.Merge(m, src)
}
func (m *ContactListInput) XXX_Size() int {
	return m.Size()
}
func (m *ContactListInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactListInput.DiscardUnknown(m)
}

var xxx_messageInfo_ContactListInput proto.InternalMessageInfo

func (m *ContactListInput) GetFilter() *entity.Contact {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ContactListInput) GetPaginate() *Pagination {
	if m != nil {
		return m.Paginate
	}
	return nil
}

type ContactInput struct {
	Filter               *entity.Contact `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ContactInput) Reset()         { *m = ContactInput{} }
func (m *ContactInput) String() string { return proto.CompactTextString(m) }
func (*ContactInput) ProtoMessage()    {}
func (*ContactInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{12}
}
func (m *ContactInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactInput.Merge(m, src)
}
func (m *ContactInput) XXX_Size() int {
	return m.Size()
}
func (m *ContactInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactInput.DiscardUnknown(m)
}

var xxx_messageInfo_ContactInput proto.InternalMessageInfo

func (m *ContactInput) GetFilter() *entity.Contact {
	if m != nil {
		return m.Filter
	}
	return nil
}

type ConversationListInput struct {
	Filter               *entity.Conversation `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Paginate             *Pagination          `protobuf:"bytes,99,opt,name=paginate,proto3" json:"paginate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConversationListInput) Reset()         { *m = ConversationListInput{} }
func (m *ConversationListInput) String() string { return proto.CompactTextString(m) }
func (*ConversationListInput) ProtoMessage()    {}
func (*ConversationListInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{13}
}
func (m *ConversationListInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationListInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationListInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationListInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationListInput.Merge(m, src)
}
func (m *ConversationListInput) XXX_Size() int {
	return m.Size()
}
func (m *ConversationListInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationListInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationListInput proto.InternalMessageInfo

func (m *ConversationListInput) GetFilter() *entity.Conversation {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ConversationListInput) GetPaginate() *Pagination {
	if m != nil {
		return m.Paginate
	}
	return nil
}

type ConversationCreateInput struct {
	Contacts             []*entity.Contact        `protobuf:"bytes,1,rep,name=contacts,proto3" json:"contacts,omitempty"`
	Title                string                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Topic                string                   `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Kind                 entity.Conversation_Kind `protobuf:"varint,4,opt,name=kind,proto3,enum=berty.entity.Conversation_Kind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ConversationCreateInput) Reset()         { *m = ConversationCreateInput{} }
func (m *ConversationCreateInput) String() string { return proto.CompactTextString(m) }
func (*ConversationCreateInput) ProtoMessage()    {}
func (*ConversationCreateInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{14}
}
func (m *ConversationCreateInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationCreateInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationCreateInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationCreateInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationCreateInput.Merge(m, src)
}
func (m *ConversationCreateInput) XXX_Size() int {
	return m.Size()
}
func (m *ConversationCreateInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationCreateInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationCreateInput proto.InternalMessageInfo

func (m *ConversationCreateInput) GetContacts() []*entity.Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *ConversationCreateInput) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ConversationCreateInput) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ConversationCreateInput) GetKind() entity.Conversation_Kind {
	if m != nil {
		return m.Kind
	}
	return entity.Conversation_Unknown
}

type ConversationManageMembersInput struct {
	Conversation         *entity.Conversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Contacts             []*entity.Contact    `protobuf:"bytes,2,rep,name=contacts,proto3" json:"contacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConversationManageMembersInput) Reset()         { *m = ConversationManageMembersInput{} }
func (m *ConversationManageMembersInput) String() string { return proto.CompactTextString(m) }
func (*ConversationManageMembersInput) ProtoMessage()    {}
func (*ConversationManageMembersInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{15}
}
func (m *ConversationManageMembersInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationManageMembersInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationManageMembersInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationManageMembersInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationManageMembersInput.Merge(m, src)
}
func (m *ConversationManageMembersInput) XXX_Size() int {
	return m.Size()
}
func (m *ConversationManageMembersInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationManageMembersInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationManageMembersInput proto.InternalMessageInfo

func (m *ConversationManageMembersInput) GetConversation() *entity.Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *ConversationManageMembersInput) GetContacts() []*entity.Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

type DevicePushConfigCreateInput struct {
	RelayPubkey          string              `protobuf:"bytes,1,opt,name=relay_pubkey,json=relayPubkey,proto3" json:"relay_pubkey,omitempty"`
	PushID               []byte              `protobuf:"bytes,2,opt,name=push_id,json=pushId,proto3" json:"push_id,omitempty"`
	PushType             push.DevicePushType `protobuf:"varint,3,opt,name=push_type,json=pushType,proto3,enum=berty.push.DevicePushType" json:"push_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DevicePushConfigCreateInput) Reset()         { *m = DevicePushConfigCreateInput{} }
func (m *DevicePushConfigCreateInput) String() string { return proto.CompactTextString(m) }
func (*DevicePushConfigCreateInput) ProtoMessage()    {}
func (*DevicePushConfigCreateInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{16}
}
func (m *DevicePushConfigCreateInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevicePushConfigCreateInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevicePushConfigCreateInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevicePushConfigCreateInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePushConfigCreateInput.Merge(m, src)
}
func (m *DevicePushConfigCreateInput) XXX_Size() int {
	return m.Size()
}
func (m *DevicePushConfigCreateInput) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePushConfigCreateInput.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePushConfigCreateInput proto.InternalMessageInfo

func (m *DevicePushConfigCreateInput) GetRelayPubkey() string {
	if m != nil {
		return m.RelayPubkey
	}
	return ""
}

func (m *DevicePushConfigCreateInput) GetPushID() []byte {
	if m != nil {
		return m.PushID
	}
	return nil
}

func (m *DevicePushConfigCreateInput) GetPushType() push.DevicePushType {
	if m != nil {
		return m.PushType
	}
	return push.DevicePushType_UnknownDevicePushType
}

type Pagination struct {
	// argument definition
	OrderBy   string `protobuf:"bytes,1,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	OrderDesc bool   `protobuf:"varint,2,opt,name=order_desc,json=orderDesc,proto3" json:"order_desc,omitempty"`
	// feed definition
	First                int32    `protobuf:"varint,11,opt,name=first,proto3" json:"first,omitempty"`
	After                string   `protobuf:"bytes,12,opt,name=after,proto3" json:"after,omitempty"`
	Last                 int32    `protobuf:"varint,13,opt,name=last,proto3" json:"last,omitempty"`
	Before               string   `protobuf:"bytes,14,opt,name=before,proto3" json:"before,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagination) Reset()         { *m = Pagination{} }
func (m *Pagination) String() string { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()    {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{17}
}
func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(m, src)
}
func (m *Pagination) XXX_Size() int {
	return m.Size()
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *Pagination) GetOrderDesc() bool {
	if m != nil {
		return m.OrderDesc
	}
	return false
}

func (m *Pagination) GetFirst() int32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *Pagination) GetAfter() string {
	if m != nil {
		return m.After
	}
	return ""
}

func (m *Pagination) GetLast() int32 {
	if m != nil {
		return m.Last
	}
	return 0
}

func (m *Pagination) GetBefore() string {
	if m != nil {
		return m.Before
	}
	return ""
}

type IntegrationTestInput struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntegrationTestInput) Reset()         { *m = IntegrationTestInput{} }
func (m *IntegrationTestInput) String() string { return proto.CompactTextString(m) }
func (*IntegrationTestInput) ProtoMessage()    {}
func (*IntegrationTestInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{18}
}
func (m *IntegrationTestInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntegrationTestInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntegrationTestInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntegrationTestInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegrationTestInput.Merge(m, src)
}
func (m *IntegrationTestInput) XXX_Size() int {
	return m.Size()
}
func (m *IntegrationTestInput) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegrationTestInput.DiscardUnknown(m)
}

var xxx_messageInfo_IntegrationTestInput proto.InternalMessageInfo

func (m *IntegrationTestInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type IntegrationTestOutput struct {
	Name                 string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Success              bool      `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Verbose              string    `protobuf:"bytes,3,opt,name=verbose,proto3" json:"verbose,omitempty"`
	StartedAt            time.Time `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3,stdtime" json:"started_at"`
	FinishedAt           time.Time `protobuf:"bytes,5,opt,name=finished_at,json=finishedAt,proto3,stdtime" json:"finished_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *IntegrationTestOutput) Reset()         { *m = IntegrationTestOutput{} }
func (m *IntegrationTestOutput) String() string { return proto.CompactTextString(m) }
func (*IntegrationTestOutput) ProtoMessage()    {}
func (*IntegrationTestOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{19}
}
func (m *IntegrationTestOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntegrationTestOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntegrationTestOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntegrationTestOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegrationTestOutput.Merge(m, src)
}
func (m *IntegrationTestOutput) XXX_Size() int {
	return m.Size()
}
func (m *IntegrationTestOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegrationTestOutput.DiscardUnknown(m)
}

var xxx_messageInfo_IntegrationTestOutput proto.InternalMessageInfo

func (m *IntegrationTestOutput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IntegrationTestOutput) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *IntegrationTestOutput) GetVerbose() string {
	if m != nil {
		return m.Verbose
	}
	return ""
}

func (m *IntegrationTestOutput) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

func (m *IntegrationTestOutput) GetFinishedAt() time.Time {
	if m != nil {
		return m.FinishedAt
	}
	return time.Time{}
}

type Void struct {
	T                    bool     `protobuf:"varint,1,opt,name=T,proto3" json:"T,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{20}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Void.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return m.Size()
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func (m *Void) GetT() bool {
	if m != nil {
		return m.T
	}
	return false
}

type Bool struct {
	Ret                  bool     `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bool) Reset()         { *m = Bool{} }
func (m *Bool) String() string { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()    {}
func (*Bool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{21}
}
func (m *Bool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bool.Merge(m, src)
}
func (m *Bool) XXX_Size() int {
	return m.Size()
}
func (m *Bool) XXX_DiscardUnknown() {
	xxx_messageInfo_Bool.DiscardUnknown(m)
}

var xxx_messageInfo_Bool proto.InternalMessageInfo

func (m *Bool) GetRet() bool {
	if m != nil {
		return m.Ret
	}
	return false
}

type EventIDInput struct {
	EventID              string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventIDInput) Reset()         { *m = EventIDInput{} }
func (m *EventIDInput) String() string { return proto.CompactTextString(m) }
func (*EventIDInput) ProtoMessage()    {}
func (*EventIDInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{22}
}
func (m *EventIDInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventIDInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventIDInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventIDInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventIDInput.Merge(m, src)
}
func (m *EventIDInput) XXX_Size() int {
	return m.Size()
}
func (m *EventIDInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EventIDInput.DiscardUnknown(m)
}

var xxx_messageInfo_EventIDInput proto.InternalMessageInfo

func (m *EventIDInput) GetEventID() string {
	if m != nil {
		return m.EventID
	}
	return ""
}

type LogStreamInput struct {
	Continues            bool     `protobuf:"varint,1,opt,name=continues,proto3" json:"continues,omitempty"`
	LogLevel             string   `protobuf:"bytes,2,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	Namespaces           string   `protobuf:"bytes,3,opt,name=namespaces,proto3" json:"namespaces,omitempty"`
	Last                 int32    `protobuf:"varint,4,opt,name=last,proto3" json:"last,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogStreamInput) Reset()         { *m = LogStreamInput{} }
func (m *LogStreamInput) String() string { return proto.CompactTextString(m) }
func (*LogStreamInput) ProtoMessage()    {}
func (*LogStreamInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{23}
}
func (m *LogStreamInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStreamInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStreamInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStreamInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStreamInput.Merge(m, src)
}
func (m *LogStreamInput) XXX_Size() int {
	return m.Size()
}
func (m *LogStreamInput) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStreamInput.DiscardUnknown(m)
}

var xxx_messageInfo_LogStreamInput proto.InternalMessageInfo

func (m *LogStreamInput) GetContinues() bool {
	if m != nil {
		return m.Continues
	}
	return false
}

func (m *LogStreamInput) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

func (m *LogStreamInput) GetNamespaces() string {
	if m != nil {
		return m.Namespaces
	}
	return ""
}

func (m *LogStreamInput) GetLast() int32 {
	if m != nil {
		return m.Last
	}
	return 0
}

type LogEntry struct {
	Line                 string   `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{24}
}
func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return m.Size()
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

type LogfileEntry struct {
	Path                 string     `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Filesize             int32      `protobuf:"varint,2,opt,name=filesize,proto3" json:"filesize,omitempty"`
	CreatedAt            *time.Time `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt            *time.Time `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LogfileEntry) Reset()         { *m = LogfileEntry{} }
func (m *LogfileEntry) String() string { return proto.CompactTextString(m) }
func (*LogfileEntry) ProtoMessage()    {}
func (*LogfileEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{25}
}
func (m *LogfileEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogfileEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogfileEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogfileEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogfileEntry.Merge(m, src)
}
func (m *LogfileEntry) XXX_Size() int {
	return m.Size()
}
func (m *LogfileEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogfileEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogfileEntry proto.InternalMessageInfo

func (m *LogfileEntry) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *LogfileEntry) GetFilesize() int32 {
	if m != nil {
		return m.Filesize
	}
	return 0
}

func (m *LogfileEntry) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *LogfileEntry) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type LogfileReadInput struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogfileReadInput) Reset()         { *m = LogfileReadInput{} }
func (m *LogfileReadInput) String() string { return proto.CompactTextString(m) }
func (*LogfileReadInput) ProtoMessage()    {}
func (*LogfileReadInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{26}
}
func (m *LogfileReadInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogfileReadInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogfileReadInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogfileReadInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogfileReadInput.Merge(m, src)
}
func (m *LogfileReadInput) XXX_Size() int {
	return m.Size()
}
func (m *LogfileReadInput) XXX_DiscardUnknown() {
	xxx_messageInfo_LogfileReadInput.DiscardUnknown(m)
}

var xxx_messageInfo_LogfileReadInput proto.InternalMessageInfo

func (m *LogfileReadInput) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// NodeEvent is embedded in a classical entity.Event with entity.Event.Kind = entity.Kind_Node
// we don't need to add base information as the created_at field, as we can already
// read them from the parent entity.Event.
type NodeEvent struct {
	// Kind is an enum defining the event type.
	Kind Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=berty.node.Kind" json:"kind,omitempty"`
	// Attributes is a nested protobuf message containing per-event-type additional attributes.
	Attributes           []byte   `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeEvent) Reset()         { *m = NodeEvent{} }
func (m *NodeEvent) String() string { return proto.CompactTextString(m) }
func (*NodeEvent) ProtoMessage()    {}
func (*NodeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdad188f091bc, []int{27}
}
func (m *NodeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeEvent.Merge(m, src)
}
func (m *NodeEvent) XXX_Size() int {
	return m.Size()
}
func (m *NodeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_NodeEvent proto.InternalMessageInfo

func (m *NodeEvent) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_Unknown
}

func (m *NodeEvent) GetAttributes() []byte {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterEnum("berty.node.NullableTrueFalse", NullableTrueFalse_name, NullableTrueFalse_value)
	proto.RegisterEnum("berty.node.CommitLog_Operation", CommitLog_Operation_name, CommitLog_Operation_value)
	proto.RegisterType((*Badge)(nil), "berty.node.Badge")
	proto.RegisterType((*TestErrorInput)(nil), "berty.node.TestErrorInput")
	proto.RegisterType((*ProtocolsOutput)(nil), "berty.node.ProtocolsOutput")
	proto.RegisterType((*AppVersionOutput)(nil), "berty.node.AppVersionOutput")
	proto.RegisterType((*PingDestination)(nil), "berty.node.PingDestination")
	proto.RegisterType((*ContactRequestInput)(nil), "berty.node.ContactRequestInput")
	proto.RegisterType((*ContactAcceptRequestInput)(nil), "berty.node.ContactAcceptRequestInput")
	proto.RegisterType((*ConversationAddMessageInput)(nil), "berty.node.ConversationAddMessageInput")
	proto.RegisterType((*EventStreamInput)(nil), "berty.node.EventStreamInput")
	proto.RegisterType((*CommitLog)(nil), "berty.node.CommitLog")
	proto.RegisterType((*CommitLog_Entity)(nil), "berty.node.CommitLog.Entity")
	proto.RegisterType((*EventListInput)(nil), "berty.node.EventListInput")
	proto.RegisterType((*ContactListInput)(nil), "berty.node.ContactListInput")
	proto.RegisterType((*ContactInput)(nil), "berty.node.ContactInput")
	proto.RegisterType((*ConversationListInput)(nil), "berty.node.ConversationListInput")
	proto.RegisterType((*ConversationCreateInput)(nil), "berty.node.ConversationCreateInput")
	proto.RegisterType((*ConversationManageMembersInput)(nil), "berty.node.ConversationManageMembersInput")
	proto.RegisterType((*DevicePushConfigCreateInput)(nil), "berty.node.DevicePushConfigCreateInput")
	proto.RegisterType((*Pagination)(nil), "berty.node.Pagination")
	proto.RegisterType((*IntegrationTestInput)(nil), "berty.node.IntegrationTestInput")
	proto.RegisterType((*IntegrationTestOutput)(nil), "berty.node.IntegrationTestOutput")
	proto.RegisterType((*Void)(nil), "berty.node.Void")
	proto.RegisterType((*Bool)(nil), "berty.node.Bool")
	proto.RegisterType((*EventIDInput)(nil), "berty.node.EventIDInput")
	proto.RegisterType((*LogStreamInput)(nil), "berty.node.LogStreamInput")
	proto.RegisterType((*LogEntry)(nil), "berty.node.LogEntry")
	proto.RegisterType((*LogfileEntry)(nil), "berty.node.LogfileEntry")
	proto.RegisterType((*LogfileReadInput)(nil), "berty.node.LogfileReadInput")
	proto.RegisterType((*NodeEvent)(nil), "berty.node.NodeEvent")
}

func init() { proto.RegisterFile("api/node/service.proto", fileDescriptor_f2dcdad188f091bc) }

var fileDescriptor_f2dcdad188f091bc = []byte{
	// 2590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0x4b, 0x73, 0x1b, 0xc7,
	0xf1, 0xd7, 0x52, 0x7c, 0x00, 0x0d, 0x9a, 0x82, 0x46, 0x24, 0x0d, 0x81, 0x12, 0x29, 0xaf, 0xf5,
	0xf7, 0xdf, 0x51, 0x1c, 0x80, 0x05, 0x3b, 0x52, 0xd9, 0x96, 0x1f, 0x00, 0x21, 0x59, 0xb4, 0x69,
	0x99, 0x5e, 0x51, 0xb6, 0xcb, 0x95, 0x14, 0xb2, 0xd8, 0x6d, 0x2c, 0x27, 0x5c, 0xec, 0x6e, 0x76,
	0x07, 0xb4, 0x98, 0x8b, 0x53, 0xa5, 0x2f, 0x90, 0xaa, 0x5c, 0x72, 0xca, 0x21, 0xb9, 0xe4, 0x16,
	0x57, 0xe5, 0x92, 0x63, 0x72, 0x48, 0x95, 0x8e, 0xf9, 0x04, 0x4a, 0x8a, 0xb9, 0xa4, 0x2a, 0x97,
	0x7c, 0x81, 0x54, 0xa5, 0xe6, 0xb1, 0x8b, 0x5d, 0x60, 0x01, 0x3e, 0xec, 0x8b, 0x34, 0xd3, 0xfb,
	0xeb, 0xdf, 0xf4, 0xcc, 0xf4, 0xf4, 0x74, 0x0f, 0x08, 0xab, 0x66, 0x40, 0xeb, 0x9e, 0x6f, 0x63,
	0x3d, 0xc2, 0xf0, 0x90, 0x5a, 0x58, 0x0b, 0x42, 0x9f, 0xf9, 0x04, 0xba, 0x18, 0xb2, 0xa3, 0x1a,
	0xff, 0x52, 0xbd, 0x92, 0x60, 0x0e, 0xa8, 0x67, 0x4b, 0x40, 0x95, 0xa0, 0xc7, 0x28, 0x3b, 0xaa,
	0xe3, 0x21, 0x7a, 0x4c, 0xc9, 0xae, 0x28, 0x99, 0xe5, 0x7b, 0x3d, 0xea, 0x28, 0xe1, 0xf2, 0x50,
	0xc8, 0x4c, 0x6b, 0x14, 0x6a, 0xe3, 0x70, 0xd0, 0xea, 0x55, 0x25, 0x8c, 0xd0, 0xb3, 0x31, 0xec,
	0x98, 0x2e, 0x35, 0x23, 0xf5, 0x69, 0x23, 0x83, 0xef, 0x04, 0x83, 0x68, 0xbf, 0x93, 0x19, 0xe6,
	0xe5, 0x1c, 0x00, 0xb5, 0xb9, 0xb0, 0x47, 0x31, 0x1c, 0x19, 0xc0, 0xf2, 0xbd, 0x43, 0x0c, 0x23,
	0x93, 0x51, 0xdf, 0x1b, 0x31, 0xb3, 0x8f, 0x51, 0x64, 0x3a, 0xb1, 0x45, 0x6b, 0x1e, 0xb2, 0xaf,
	0xfc, 0xf0, 0xa0, 0xde, 0x47, 0x16, 0x52, 0x4b, 0xfd, 0x17, 0xb3, 0x8d, 0x7c, 0x0c, 0x30, 0x19,
	0x68, 0x23, 0x38, 0x70, 0x94, 0x29, 0xd4, 0xeb, 0xf9, 0xa9, 0x66, 0x4c, 0xcc, 0x01, 0x87, 0xa6,
	0x4b, 0x6d, 0x93, 0x61, 0xd2, 0x50, 0x1f, 0x2f, 0x71, 0xeb, 0xeb, 0xfc, 0x9f, 0xd8, 0x38, 0xc7,
	0x77, 0x7c, 0xd1, 0xac, 0xf3, 0x56, 0x3c, 0x88, 0xe3, 0xfb, 0x8e, 0x8b, 0x75, 0xd1, 0xeb, 0x0e,
	0x7a, 0x75, 0x46, 0xfb, 0x18, 0x31, 0xb3, 0x1f, 0x48, 0x80, 0x7e, 0x1d, 0xe6, 0x5a, 0xa6, 0xed,
	0x20, 0x59, 0x86, 0xb9, 0x43, 0xd3, 0x1d, 0x60, 0x45, 0xbb, 0xa1, 0xbd, 0x3a, 0x67, 0xc8, 0x8e,
	0x7e, 0x13, 0x96, 0xf6, 0x30, 0x62, 0xf7, 0xc2, 0xd0, 0x0f, 0xb7, 0xbd, 0x60, 0xc0, 0x08, 0x81,
	0x59, 0xbe, 0xc5, 0x02, 0x56, 0x34, 0x44, 0x5b, 0xaf, 0xc3, 0xa5, 0x5d, 0xce, 0x66, 0xf9, 0x6e,
	0xf4, 0xc9, 0x80, 0x71, 0xd8, 0x35, 0x28, 0x06, 0xb1, 0xa8, 0xa2, 0xdd, 0xb8, 0xf8, 0x6a, 0xd1,
	0x18, 0x0a, 0xf4, 0xd7, 0xa0, 0xdc, 0x0c, 0x82, 0xcf, 0x30, 0x8c, 0xa8, 0xef, 0x29, 0x8d, 0x0a,
	0x2c, 0x1c, 0x4a, 0x81, 0xe2, 0x8e, 0xbb, 0xfa, 0xeb, 0x70, 0x69, 0x97, 0x7a, 0x4e, 0x1b, 0x23,
	0x46, 0x3d, 0xb1, 0x21, 0xe4, 0x06, 0x94, 0xec, 0x61, 0x57, 0x29, 0xa4, 0x45, 0xfa, 0x37, 0x1a,
	0x5c, 0xd9, 0x92, 0xfe, 0x64, 0xe0, 0xcf, 0x06, 0x18, 0x31, 0x69, 0xff, 0x26, 0x80, 0x72, 0xb3,
	0x0e, 0x55, 0xb3, 0x68, 0x5d, 0xfe, 0xcf, 0xd3, 0xaa, 0x76, 0xfc, 0x7c, 0xa3, 0xa8, 0x14, 0xb6,
	0xdb, 0x46, 0x51, 0x81, 0xb6, 0x6d, 0xd2, 0x84, 0xeb, 0xb1, 0x86, 0x7f, 0x88, 0x61, 0x48, 0x6d,
	0xec, 0xd8, 0x34, 0x0a, 0x5c, 0xf3, 0xa8, 0xe3, 0x99, 0x7d, 0xac, 0xcc, 0x88, 0xd1, 0xab, 0x0a,
	0xf4, 0x89, 0xc2, 0xb4, 0x25, 0xe4, 0xa1, 0xd9, 0x47, 0x72, 0x13, 0x80, 0x7a, 0x2c, 0xf4, 0x3b,
	0x0c, 0x9f, 0xb0, 0xca, 0x45, 0x31, 0xe8, 0xdc, 0x9f, 0x9f, 0x56, 0x7f, 0x31, 0x63, 0x14, 0xc5,
	0x87, 0x3d, 0x7c, 0xc2, 0xf4, 0x4f, 0xe1, 0xaa, 0x32, 0xa0, 0x69, 0x59, 0x18, 0x64, 0xed, 0x7e,
	0x23, 0xc7, 0xee, 0x95, 0x3f, 0x3d, 0xad, 0x6a, 0xd3, 0x6c, 0xd7, 0x7f, 0xab, 0xc1, 0xda, 0x56,
	0xca, 0x93, 0x9b, 0xb6, 0xfd, 0xb1, 0xf4, 0x5e, 0xc9, 0xfa, 0x00, 0x16, 0xd3, 0x8e, 0x2e, 0x78,
	0x4b, 0x8d, 0x6a, 0x4d, 0x1e, 0x6d, 0xe9, 0xef, 0xb5, 0x34, 0x41, 0xab, 0xf0, 0xfb, 0xa7, 0x55,
	0xed, 0x9b, 0xa7, 0xd5, 0x0b, 0x46, 0x46, 0x93, 0xbc, 0x09, 0x0b, 0xea, 0x5c, 0x88, 0xf5, 0x28,
	0x35, 0x56, 0xb2, 0x24, 0x6a, 0xd8, 0x94, 0x7e, 0x8c, 0xd7, 0xdf, 0x83, 0xf2, 0x3d, 0x1e, 0x22,
	0x1e, 0xb1, 0x10, 0xcd, 0xbe, 0x34, 0xec, 0xfb, 0x30, 0xdf, 0xa3, 0x2e, 0xc3, 0x50, 0x99, 0x74,
	0x25, 0xcb, 0x26, 0xf0, 0x86, 0x82, 0xe8, 0x7f, 0x99, 0x87, 0xe2, 0x96, 0xdf, 0xef, 0x53, 0xb6,
	0xe3, 0x3b, 0x64, 0x0b, 0x8a, 0x7e, 0x80, 0xe1, 0x70, 0x42, 0x4b, 0x8d, 0x8d, 0xda, 0x30, 0x56,
	0xd5, 0x12, 0x64, 0xed, 0x93, 0x18, 0xd6, 0x9a, 0xfd, 0xd7, 0xd3, 0xaa, 0x66, 0x0c, 0xf5, 0xc8,
	0xbb, 0x30, 0x2f, 0x87, 0x52, 0xb3, 0xb9, 0x96, 0xcf, 0x70, 0x4f, 0x60, 0x52, 0x93, 0x52, 0x5a,
	0xd5, 0xff, 0xce, 0xc2, 0xbc, 0xfc, 0x48, 0x5e, 0x83, 0x79, 0x19, 0x86, 0x2a, 0x28, 0xa8, 0x96,
	0xc7, 0x56, 0xb7, 0x47, 0x1d, 0x43, 0x61, 0x48, 0x1d, 0x16, 0xd4, 0xf6, 0x55, 0x7a, 0x79, 0xeb,
	0x18, 0xfb, 0x74, 0x8c, 0xe2, 0xf4, 0x32, 0x74, 0x54, 0x9c, 0x3c, 0xfa, 0xb6, 0xf8, 0x66, 0x28,
	0x0c, 0x79, 0x77, 0x64, 0xc3, 0xf7, 0x4f, 0xda, 0xf0, 0x91, 0x6d, 0xfe, 0x14, 0xae, 0xa4, 0xfb,
	0x9d, 0x3e, 0xf6, 0xbb, 0x18, 0x56, 0xa8, 0xa0, 0xb9, 0x31, 0x99, 0xe6, 0x63, 0x81, 0x33, 0x88,
	0x35, 0x26, 0x23, 0xdf, 0x83, 0x39, 0x71, 0x43, 0x54, 0x7e, 0x3a, 0x79, 0xa7, 0x25, 0x82, 0xec,
	0x00, 0x19, 0x8f, 0xee, 0x95, 0x03, 0xa1, 0xb7, 0x9e, 0x37, 0xef, 0xdd, 0x41, 0xb4, 0xaf, 0x16,
	0xb8, 0x6c, 0x8f, 0x48, 0xc8, 0x17, 0xb0, 0x9a, 0x7f, 0x15, 0x54, 0x5c, 0xc1, 0xa8, 0x4f, 0x62,
	0xdc, 0x4e, 0x90, 0xc6, 0xb2, 0x9d, 0x23, 0x25, 0x2d, 0x58, 0x12, 0x06, 0x8b, 0x38, 0x61, 0x32,
	0x6b, 0xbf, 0xd2, 0x17, 0x8c, 0x6b, 0x39, 0x73, 0x6b, 0x2b, 0x88, 0xf1, 0x02, 0xa6, 0xbb, 0xe4,
	0x2e, 0x2c, 0xa6, 0x2f, 0xb9, 0x8a, 0x27, 0x18, 0xae, 0x66, 0x19, 0x1e, 0x09, 0x44, 0x93, 0x03,
	0x8c, 0x52, 0x34, 0xec, 0xe8, 0x75, 0x28, 0x26, 0xde, 0x4d, 0x00, 0xe6, 0xb7, 0x42, 0x34, 0x19,
	0x96, 0x2f, 0xf0, 0xf6, 0xe3, 0x80, 0x5f, 0x24, 0x65, 0x8d, 0xb7, 0xdb, 0xe8, 0x22, 0xc3, 0xf2,
	0x8c, 0xfe, 0xab, 0x19, 0x58, 0x12, 0xf6, 0xec, 0xd0, 0x38, 0xe4, 0x9c, 0xe5, 0x0c, 0x92, 0x5d,
	0x58, 0xf1, 0x3d, 0xf7, 0xa8, 0xf3, 0x15, 0x65, 0xfb, 0xfe, 0x80, 0x75, 0x4c, 0xeb, 0x00, 0xed,
	0x8e, 0xc9, 0xc4, 0xf9, 0x59, 0x6a, 0x5c, 0x4f, 0x9f, 0x9f, 0x87, 0x03, 0xd7, 0x35, 0xbb, 0x2e,
	0xee, 0x85, 0x03, 0xbc, 0x6f, 0xba, 0x11, 0x1a, 0x84, 0xeb, 0x7e, 0x2e, 0x55, 0x9b, 0x5c, 0xb3,
	0xc9, 0xc8, 0x43, 0x58, 0xce, 0x30, 0x46, 0x88, 0x1e, 0x27, 0xbc, 0x78, 0x1a, 0xc2, 0xcb, 0x29,
	0xc2, 0x47, 0x88, 0x5e, 0x93, 0x91, 0x06, 0x14, 0x02, 0xd3, 0xe1, 0xf7, 0x03, 0x56, 0x2c, 0x31,
	0xa1, 0xd5, 0x34, 0xc7, 0xae, 0xfc, 0xc6, 0x5d, 0x3e, 0xc1, 0xe9, 0x03, 0x28, 0xab, 0x03, 0x37,
	0x5c, 0x96, 0x1f, 0x8c, 0x2c, 0xcb, 0x84, 0x03, 0x1a, 0x2f, 0xcc, 0x79, 0x86, 0x7d, 0x07, 0x16,
	0xe3, 0x70, 0x7e, 0x8e, 0x21, 0xf5, 0xaf, 0x61, 0x25, 0x7d, 0xf6, 0x86, 0xa6, 0x37, 0x46, 0x78,
	0xa6, 0x9d, 0xfb, 0x6f, 0x63, 0xff, 0x1f, 0x35, 0x78, 0x31, 0x4d, 0x26, 0xbd, 0x4f, 0xda, 0x70,
	0x07, 0x0a, 0x2a, 0x74, 0xc9, 0xc4, 0x60, 0xd2, 0x6c, 0x5a, 0xb3, 0xcf, 0x78, 0x4c, 0x4e, 0xc0,
	0x3c, 0x43, 0x61, 0x94, 0xb9, 0xf1, 0x7d, 0x2b, 0x3b, 0x42, 0xea, 0x07, 0xd4, 0x92, 0xb7, 0xaa,
	0x21, 0x3b, 0xe4, 0x75, 0x95, 0xa5, 0xcc, 0x66, 0xc2, 0x7f, 0xce, 0x34, 0x6b, 0x1f, 0x51, 0xcf,
	0x56, 0x69, 0xcc, 0xef, 0x34, 0x58, 0xcf, 0xc4, 0x2c, 0xd3, 0x33, 0x1d, 0x94, 0x51, 0x2a, 0xfa,
	0xae, 0xef, 0xcb, 0xf4, 0x32, 0xcc, 0x9c, 0x61, 0x19, 0xf4, 0x3f, 0x68, 0xb0, 0x36, 0x1a, 0xdc,
	0xd2, 0xeb, 0xdb, 0x80, 0xc5, 0x10, 0x79, 0x6e, 0x12, 0x0c, 0xba, 0x07, 0x78, 0xa4, 0x52, 0x85,
	0x4b, 0xc7, 0xcf, 0x37, 0x4a, 0x06, 0x97, 0xef, 0x0a, 0xb1, 0x51, 0x0a, 0x87, 0x1d, 0xf2, 0x32,
	0x2c, 0xa8, 0x10, 0x28, 0x16, 0x77, 0xb1, 0x05, 0xc7, 0xcf, 0x37, 0xe6, 0x45, 0x50, 0x6b, 0x1b,
	0xf3, 0x81, 0x08, 0x6e, 0xe4, 0x0e, 0x14, 0x05, 0x88, 0x1d, 0x05, 0xa8, 0x0e, 0x61, 0x3c, 0x71,
	0x91, 0x87, 0x0e, 0x8d, 0xda, 0x3b, 0x0a, 0xd0, 0x28, 0x04, 0xaa, 0xa5, 0xff, 0x46, 0x03, 0x18,
	0xba, 0x09, 0xb9, 0x0a, 0x05, 0x3f, 0xe4, 0x71, 0xad, 0x7b, 0x14, 0x67, 0x7a, 0xa2, 0xdf, 0x3a,
	0x22, 0xd7, 0x01, 0xe4, 0x27, 0x1b, 0x23, 0x4b, 0x98, 0x52, 0x30, 0x8a, 0x42, 0xd2, 0xc6, 0xc8,
	0xe2, 0x7b, 0xdd, 0xa3, 0x61, 0xc4, 0x2a, 0x25, 0x99, 0xa3, 0x8a, 0x0e, 0x97, 0x9a, 0x3d, 0xee,
	0xd3, 0x8b, 0xd2, 0x03, 0x44, 0x87, 0xe7, 0xa9, 0xae, 0x19, 0xb1, 0xca, 0x0b, 0x02, 0x2a, 0xda,
	0x64, 0x15, 0xe6, 0xbb, 0xd8, 0xf3, 0x43, 0xac, 0x2c, 0x09, 0xa8, 0xea, 0xe9, 0xb7, 0x60, 0x79,
	0xdb, 0x63, 0xe8, 0xc8, 0x70, 0xb9, 0x97, 0xe4, 0x5c, 0x04, 0x66, 0x45, 0x82, 0xa7, 0x72, 0x5d,
	0xde, 0xd6, 0xff, 0xad, 0xc1, 0xca, 0x08, 0x58, 0x25, 0xb0, 0x39, 0x68, 0x9e, 0xd4, 0x46, 0x03,
	0xcb, 0xc2, 0x28, 0x52, 0xb3, 0x89, 0xbb, 0x2a, 0xdd, 0xed, 0xfa, 0x11, 0x2a, 0xcf, 0x8d, 0xbb,
	0x64, 0x0b, 0x20, 0x62, 0x66, 0xc8, 0x64, 0xf8, 0x9c, 0x55, 0x1e, 0x26, 0x13, 0xf9, 0x5a, 0x9c,
	0xc8, 0xd7, 0xf6, 0xe2, 0x44, 0xbe, 0x55, 0x78, 0xf6, 0x7c, 0xe3, 0xc2, 0x2f, 0xff, 0xbe, 0xa1,
	0x19, 0x45, 0xa5, 0xd7, 0x64, 0xe4, 0x1e, 0x94, 0x7a, 0xd4, 0xa3, 0xd1, 0xbe, 0x64, 0x99, 0x3b,
	0x03, 0x0b, 0xc4, 0x8a, 0x4d, 0xa6, 0x2f, 0xc3, 0xec, 0x67, 0x3e, 0xb5, 0xc9, 0x22, 0x68, 0x7b,
	0x62, 0x62, 0x05, 0x43, 0xdb, 0xd3, 0x2b, 0x30, 0xdb, 0xf2, 0x7d, 0x97, 0x94, 0xe1, 0x62, 0x88,
	0x4c, 0xc9, 0x79, 0x53, 0xbf, 0x0d, 0x8b, 0xe2, 0x5a, 0xd8, 0x6e, 0xcb, 0x15, 0x7c, 0x05, 0x0a,
	0xf2, 0x22, 0x4c, 0x72, 0xd6, 0xd2, 0xf1, 0xf3, 0x8d, 0x05, 0x85, 0x31, 0x16, 0xc4, 0xc7, 0x6d,
	0x5b, 0xff, 0x1a, 0x96, 0x76, 0x7c, 0x27, 0x9d, 0x00, 0x5e, 0x03, 0x91, 0xc6, 0x52, 0x6f, 0x80,
	0x91, 0x1a, 0x61, 0x28, 0x20, 0x6b, 0x50, 0x74, 0x7d, 0xa7, 0xe3, 0xe2, 0x21, 0xba, 0x2a, 0x1e,
	0x14, 0x5c, 0xdf, 0xd9, 0xe1, 0x7d, 0xb2, 0x0e, 0xc0, 0x17, 0x3f, 0x0a, 0x4c, 0x0b, 0x23, 0xb5,
	0xba, 0x29, 0x49, 0xe2, 0x1a, 0xb3, 0x43, 0xd7, 0xd0, 0xd7, 0xa1, 0xb0, 0xe3, 0x3b, 0xf7, 0x3c,
	0x16, 0x1e, 0x89, 0xef, 0xd4, 0x4b, 0x36, 0x92, 0xb7, 0xf5, 0x67, 0x1a, 0x2c, 0xee, 0xf8, 0x4e,
	0x8f, 0xba, 0x98, 0x80, 0x02, 0x93, 0xed, 0xc7, 0x20, 0xde, 0x26, 0x55, 0x28, 0x70, 0x40, 0x44,
	0x7f, 0x2e, 0x83, 0xd4, 0x9c, 0x91, 0xf4, 0xf9, 0xae, 0x5a, 0xe2, 0x94, 0xda, 0xf1, 0x1d, 0x76,
	0xf2, 0x7e, 0x68, 0x72, 0x57, 0x95, 0x5e, 0x93, 0x71, 0x92, 0x81, 0xb8, 0xbc, 0xcf, 0xe0, 0x1a,
	0x8a, 0x44, 0xe9, 0x35, 0x99, 0xfe, 0x0a, 0x94, 0xd5, 0x4c, 0x0c, 0x34, 0xed, 0xc4, 0xd3, 0x47,
	0x67, 0xa3, 0x7f, 0x0a, 0xc5, 0x87, 0xbe, 0x8d, 0x62, 0xaf, 0xc8, 0xcd, 0x54, 0xd9, 0xb7, 0xd4,
	0x28, 0xa7, 0x6f, 0x80, 0x61, 0x04, 0xe5, 0x2b, 0x6f, 0x32, 0x16, 0xd2, 0xee, 0x80, 0xa1, 0xf4,
	0xf8, 0x45, 0x23, 0x25, 0xb9, 0xd5, 0x80, 0xcb, 0x63, 0x57, 0x35, 0x29, 0xc0, 0x2c, 0x17, 0x96,
	0x2f, 0xf0, 0x16, 0x17, 0x97, 0x35, 0x52, 0x84, 0x39, 0xf1, 0xb1, 0x3c, 0xd3, 0xf8, 0xeb, 0x4b,
	0xb0, 0xf0, 0x48, 0x3e, 0x3c, 0x90, 0x06, 0xcc, 0x6c, 0xb7, 0x49, 0x66, 0x74, 0xee, 0x9e, 0xd5,
	0x38, 0x0e, 0xa9, 0x6a, 0xbb, 0xa6, 0x6a, 0xf0, 0x5d, 0xc4, 0x90, 0xdc, 0x85, 0x4b, 0x49, 0xbe,
	0x2e, 0x1d, 0x2c, 0x87, 0x60, 0x25, 0x37, 0xbd, 0xdf, 0xd4, 0x48, 0x0b, 0x4a, 0xa9, 0xda, 0x84,
	0x64, 0xca, 0x80, 0xd1, 0xa2, 0xa5, 0x9a, 0x97, 0x20, 0x6d, 0x6a, 0xe4, 0x5d, 0x28, 0x26, 0x99,
	0x15, 0xa9, 0x8e, 0x31, 0x24, 0xd7, 0xf3, 0x24, 0xfd, 0xf7, 0x95, 0x0d, 0x8f, 0x3d, 0x9e, 0x02,
	0x9d, 0x87, 0xe1, 0x0d, 0x28, 0x7c, 0x80, 0x4c, 0xee, 0x64, 0x1e, 0x24, 0x57, 0x8f, 0x34, 0x94,
	0xdd, 0x3c, 0x7f, 0xca, 0x57, 0x1b, 0x5b, 0x48, 0x72, 0x1b, 0x40, 0xe6, 0x85, 0xc8, 0x0f, 0xc9,
	0xe9, 0xc7, 0xda, 0x84, 0x79, 0x95, 0x95, 0x8f, 0x6f, 0x4e, 0x6e, 0xc1, 0x44, 0x6e, 0x8b, 0x1c,
	0xa9, 0x47, 0x9d, 0xdd, 0x41, 0xd7, 0xa5, 0xd6, 0xa9, 0xf5, 0xde, 0x8a, 0xf5, 0x64, 0x1a, 0x4c,
	0x72, 0x51, 0x13, 0x74, 0x1f, 0xc0, 0x52, 0xf6, 0x4d, 0x81, 0x8c, 0x54, 0x96, 0x63, 0xef, 0x0d,
	0xd5, 0xfc, 0x5b, 0x9d, 0xec, 0xc1, 0x72, 0x5e, 0xad, 0x4f, 0xfe, 0x2f, 0x87, 0x6f, 0xfc, 0x35,
	0x60, 0x12, 0xeb, 0x3b, 0xf0, 0x42, 0x62, 0x43, 0xdf, 0x3f, 0x44, 0x92, 0x8f, 0x3b, 0x59, 0x5d,
	0xad, 0xcd, 0xd9, 0xd4, 0xdb, 0x50, 0x4a, 0x25, 0xcb, 0xe4, 0x5a, 0xce, 0x54, 0x86, 0x9e, 0x9a,
	0xcf, 0xb1, 0xa9, 0x91, 0x3b, 0xb0, 0x10, 0x13, 0x9e, 0x6d, 0xf8, 0xb7, 0x93, 0xe1, 0x85, 0xc3,
	0x9e, 0x4d, 0xf9, 0x7d, 0x91, 0x32, 0xf3, 0xe6, 0xd6, 0x3e, 0x5a, 0x07, 0xd2, 0xa7, 0x3e, 0xc2,
	0xa3, 0x49, 0x34, 0x19, 0x6f, 0x13, 0x97, 0xe1, 0x9d, 0x4c, 0xa9, 0x20, 0x1f, 0xd5, 0xc6, 0x7d,
	0xf2, 0x72, 0x46, 0x4f, 0x80, 0x1e, 0x03, 0x19, 0xcf, 0x95, 0xc9, 0xcb, 0x23, 0xab, 0x97, 0x97,
	0x4b, 0x57, 0xa7, 0x24, 0x9e, 0xbc, 0x56, 0x4e, 0xf7, 0xd5, 0x8e, 0x4e, 0xd1, 0x98, 0xca, 0xf6,
	0x48, 0xcc, 0x2e, 0x53, 0x52, 0x90, 0x97, 0x26, 0x99, 0x38, 0xdc, 0xe5, 0x29, 0x94, 0x9b, 0x1a,
	0xf9, 0x51, 0xd6, 0xc4, 0x6d, 0xef, 0x90, 0x32, 0x24, 0xb7, 0x26, 0xd1, 0x8e, 0xe7, 0xe3, 0x53,
	0x4d, 0xfe, 0xb1, 0x78, 0x00, 0x4c, 0xfa, 0xf7, 0x9e, 0x58, 0xee, 0xc0, 0xfe, 0xee, 0xe8, 0x3f,
	0x83, 0xd5, 0xfc, 0x97, 0x35, 0xf2, 0xff, 0x93, 0x46, 0x18, 0x79, 0x7d, 0xcb, 0x8f, 0x84, 0xf7,
	0x45, 0x7c, 0x1a, 0x8e, 0x73, 0xde, 0x1d, 0xfb, 0x22, 0xbb, 0xb8, 0xea, 0xb1, 0xe5, 0xc4, 0x27,
	0x9a, 0xea, 0x89, 0x08, 0xf2, 0x61, 0xd6, 0x17, 0x78, 0x16, 0x71, 0x6e, 0x2b, 0x47, 0xbc, 0x54,
	0x85, 0xad, 0xf3, 0xb2, 0x3d, 0x18, 0x29, 0x7c, 0xcd, 0x48, 0x5d, 0x7a, 0xd3, 0x08, 0x73, 0x77,
	0xe1, 0xee, 0x78, 0x09, 0x7d, 0x86, 0x23, 0xdd, 0x82, 0xcb, 0x99, 0x22, 0x50, 0x08, 0xa7, 0xd9,
	0x90, 0xc3, 0xf1, 0x21, 0x2c, 0x8f, 0x96, 0x79, 0xe2, 0xd4, 0x8d, 0x1b, 0x70, 0xc2, 0xcb, 0xd7,
	0xa6, 0x46, 0x4c, 0x58, 0xcd, 0x2f, 0x19, 0xb3, 0xbe, 0x3a, 0xa5, 0xac, 0x3c, 0x69, 0x10, 0xd2,
	0x86, 0xf5, 0x51, 0xd9, 0x43, 0x93, 0xd1, 0x43, 0x34, 0xd0, 0xa1, 0x11, 0xaf, 0xc8, 0xc6, 0x0d,
	0x1f, 0x4f, 0x1f, 0xee, 0xc3, 0x8d, 0x7c, 0x96, 0xc7, 0x5e, 0x78, 0x16, 0x9e, 0x2f, 0xc6, 0x27,
	0xac, 0x5c, 0xeb, 0x84, 0x79, 0x9c, 0x38, 0xcf, 0x1c, 0x66, 0x15, 0x5a, 0xbf, 0x2d, 0xf3, 0x6d,
	0x28, 0x3d, 0x30, 0x3d, 0xdb, 0xc5, 0x29, 0x79, 0xda, 0xd8, 0x4c, 0xf5, 0x0b, 0xe4, 0x36, 0x94,
	0x3f, 0x40, 0x0f, 0x43, 0x93, 0xe1, 0x7d, 0xf3, 0x00, 0xdb, 0x26, 0x33, 0x4f, 0xb5, 0x46, 0x5f,
	0xc2, 0x15, 0x63, 0xe0, 0x8d, 0xd4, 0xb2, 0x51, 0x12, 0x21, 0x04, 0x30, 0xaf, 0x2c, 0xae, 0xbe,
	0x34, 0x05, 0xa1, 0x6a, 0xe1, 0xb7, 0xa0, 0xd8, 0xc6, 0xee, 0xc0, 0xd9, 0xa5, 0x9e, 0x43, 0xd6,
	0x32, 0xef, 0x45, 0xd9, 0x5f, 0x72, 0x72, 0xec, 0x6a, 0xc1, 0x65, 0xa1, 0x2b, 0x12, 0x9e, 0x81,
	0x5a, 0x8d, 0xca, 0x58, 0xd2, 0xab, 0x4a, 0xcc, 0xfc, 0xe3, 0xfb, 0x43, 0xb8, 0x94, 0xe6, 0x68,
	0xba, 0xee, 0xa9, 0x96, 0xa4, 0x05, 0x25, 0xb9, 0x2d, 0xdb, 0x5e, 0xcf, 0x8f, 0x72, 0x54, 0xe2,
	0xa9, 0x07, 0x07, 0x4e, 0x2d, 0xf5, 0x83, 0x5d, 0x5a, 0xe9, 0x2e, 0xc0, 0xf0, 0xb7, 0xad, 0x1c,
	0x8a, 0x4c, 0x5a, 0x34, 0xf6, 0x2b, 0xd8, 0x6d, 0x98, 0xe3, 0x55, 0x4b, 0xde, 0xd8, 0x6b, 0x93,
	0x8b, 0x9c, 0x88, 0xb4, 0xa1, 0x98, 0xfc, 0x04, 0x47, 0xa6, 0x94, 0x43, 0xd5, 0xec, 0x66, 0x8c,
	0xfc, 0x6a, 0xf7, 0x1e, 0x14, 0x87, 0x55, 0x52, 0xa6, 0xce, 0xc8, 0x56, 0xe7, 0x49, 0x7a, 0x1c,
	0x7f, 0x13, 0x35, 0xf1, 0xa6, 0xc6, 0x73, 0x30, 0x55, 0x5b, 0x4e, 0x88, 0x55, 0x95, 0x11, 0xc5,
	0xa4, 0xa0, 0xde, 0xd4, 0xc8, 0x56, 0xa2, 0x2c, 0xae, 0x94, 0x6b, 0x39, 0xd0, 0xa4, 0x62, 0x9d,
	0x68, 0xc1, 0x5d, 0x58, 0xe5, 0x7e, 0xb8, 0xe3, 0x3b, 0x2d, 0xd3, 0x3a, 0x70, 0x42, 0x7f, 0xe0,
	0xd9, 0xe2, 0xe7, 0xcb, 0x53, 0x39, 0xc0, 0xdb, 0xb0, 0x32, 0xa6, 0xfd, 0xb9, 0x19, 0x7a, 0xa7,
	0x52, 0xce, 0x1b, 0x5a, 0x78, 0xe1, 0xa9, 0xb4, 0xeb, 0x50, 0xe4, 0xda, 0xbb, 0xa6, 0x97, 0x5b,
	0xcc, 0x8c, 0x2b, 0xbc, 0x29, 0x15, 0xe4, 0xe4, 0x32, 0x9b, 0x95, 0xfd, 0xc9, 0x36, 0x47, 0xf5,
	0x27, 0x50, 0xfe, 0xd8, 0xf7, 0x28, 0xf3, 0xc3, 0x96, 0xe9, 0xd9, 0x5f, 0x51, 0x9b, 0xed, 0x93,
	0x9b, 0xf9, 0x4e, 0x93, 0x00, 0x1e, 0x31, 0x93, 0x45, 0xd5, 0x53, 0xa1, 0x44, 0xcd, 0xbb, 0xa8,
	0x46, 0x98, 0xe4, 0xce, 0x53, 0x9c, 0x54, 0xf8, 0xc2, 0xd2, 0x07, 0x28, 0x32, 0x69, 0xe4, 0x69,
	0x53, 0x2e, 0xc3, 0x46, 0x3e, 0x03, 0x57, 0x92, 0x2a, 0x3b, 0xf0, 0x62, 0x42, 0xc2, 0xe3, 0x54,
	0xd8, 0x33, 0x2d, 0x3c, 0x37, 0xdb, 0x3b, 0x00, 0x3b, 0xb4, 0x1b, 0x34, 0x76, 0x45, 0x50, 0xbb,
	0x3e, 0xc1, 0x7c, 0xea, 0xf1, 0xa0, 0x33, 0x5e, 0x1f, 0xb4, 0x6e, 0x3d, 0x3b, 0x5e, 0xd7, 0xfe,
	0x76, 0xbc, 0xae, 0xfd, 0xe3, 0x78, 0x5d, 0xfb, 0xf5, 0x3f, 0xd7, 0x2f, 0x7c, 0x59, 0x91, 0x10,
	0x86, 0xd6, 0x7e, 0xdd, 0xf2, 0x43, 0xac, 0xc7, 0x7f, 0x44, 0xd1, 0x9d, 0x17, 0x6f, 0x39, 0xaf,
	0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xba, 0xfc, 0x61, 0x7b, 0x21, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// return node current ID
	ID(ctx context.Context, in *Void, opts ...grpc.CallOption) (*metric.Peer, error)
	//
	// Storage sync
	//
	CommitLogStream(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_CommitLogStreamClient, error)
	// yield new events in real-time
	EventStream(ctx context.Context, in *EventStreamInput, opts ...grpc.CallOption) (Service_EventStreamClient, error)
	// list old events
	EventList(ctx context.Context, in *EventListInput, opts ...grpc.CallOption) (Service_EventListClient, error)
	EventUnseen(ctx context.Context, in *EventListInput, opts ...grpc.CallOption) (Service_EventUnseenClient, error)
	GetEvent(ctx context.Context, in *entity.Event, opts ...grpc.CallOption) (*entity.Event, error)
	EventSeen(ctx context.Context, in *entity.Event, opts ...grpc.CallOption) (*Void, error)
	EventRetry(ctx context.Context, in *entity.Event, opts ...grpc.CallOption) (*entity.Event, error)
	//
	// Config
	//
	Config(ctx context.Context, in *Void, opts ...grpc.CallOption) (*entity.Config, error)
	ConfigPublic(ctx context.Context, in *Void, opts ...grpc.CallOption) (*entity.Config, error)
	ConfigUpdate(ctx context.Context, in *entity.Config, opts ...grpc.CallOption) (*entity.Config, error)
	ContactRequest(ctx context.Context, in *ContactRequestInput, opts ...grpc.CallOption) (*entity.Contact, error)
	ContactAcceptRequest(ctx context.Context, in *ContactAcceptRequestInput, opts ...grpc.CallOption) (*entity.Contact, error)
	ContactRemove(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error)
	ContactUpdate(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error)
	ContactList(ctx context.Context, in *ContactListInput, opts ...grpc.CallOption) (Service_ContactListClient, error)
	Contact(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error)
	ContactSeen(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error)
	ContactCheckPublicKey(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*Bool, error)
	ContactListBadge(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Badge, error)
	ConversationCreate(ctx context.Context, in *ConversationCreateInput, opts ...grpc.CallOption) (*entity.Conversation, error)
	ConversationUpdate(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Conversation, error)
	ConversationList(ctx context.Context, in *ConversationListInput, opts ...grpc.CallOption) (Service_ConversationListClient, error)
	ConversationInvite(ctx context.Context, in *ConversationManageMembersInput, opts ...grpc.CallOption) (*entity.Conversation, error)
	ConversationExclude(ctx context.Context, in *ConversationManageMembersInput, opts ...grpc.CallOption) (*entity.Conversation, error)
	ConversationAddMessage(ctx context.Context, in *ConversationAddMessageInput, opts ...grpc.CallOption) (*entity.Event, error)
	Conversation(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Conversation, error)
	ConversationMember(ctx context.Context, in *entity.ConversationMember, opts ...grpc.CallOption) (*entity.ConversationMember, error)
	ConversationRead(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Conversation, error)
	ConversationRemove(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Conversation, error)
	ConversationLastEvent(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Event, error)
	ConversationListBadge(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Badge, error)
	ConversationBadge(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*Badge, error)
	DevicePushConfigList(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_DevicePushConfigListClient, error)
	DevicePushConfigCreate(ctx context.Context, in *DevicePushConfigCreateInput, opts ...grpc.CallOption) (*entity.DevicePushConfig, error)
	DevicePushConfigNativeRegister(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	DevicePushConfigNativeUnregister(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	DevicePushConfigRemove(ctx context.Context, in *entity.DevicePushConfig, opts ...grpc.CallOption) (*entity.DevicePushConfig, error)
	DevicePushConfigUpdate(ctx context.Context, in *entity.DevicePushConfig, opts ...grpc.CallOption) (*entity.DevicePushConfig, error)
	// HandleEvent is the unencrypted (and unsafe) version of HandleEnvelope.
	// it's only exposed over the node API, it should be completely deactivated in public releases
	HandleEvent(ctx context.Context, in *entity.Event, opts ...grpc.CallOption) (*Void, error)
	GenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	RunIntegrationTests(ctx context.Context, in *IntegrationTestInput, opts ...grpc.CallOption) (*IntegrationTestOutput, error)
	DebugPing(ctx context.Context, in *PingDestination, opts ...grpc.CallOption) (*Void, error)
	DebugRequeueEvent(ctx context.Context, in *EventIDInput, opts ...grpc.CallOption) (*entity.Event, error)
	DebugRequeueAll(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	DeviceInfos(ctx context.Context, in *Void, opts ...grpc.CallOption) (*deviceinfo.DeviceInfos, error)
	AppVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AppVersionOutput, error)
	Peers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*metric.Peers, error)
	Protocols(ctx context.Context, in *metric.Peer, opts ...grpc.CallOption) (*ProtocolsOutput, error)
	LogStream(ctx context.Context, in *LogStreamInput, opts ...grpc.CallOption) (Service_LogStreamClient, error)
	LogfileList(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_LogfileListClient, error)
	LogfileRead(ctx context.Context, in *LogfileReadInput, opts ...grpc.CallOption) (Service_LogfileReadClient, error)
	TestLogBackgroundError(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	TestLogBackgroundWarn(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	TestLogBackgroundDebug(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	TestPanic(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	TestError(ctx context.Context, in *TestErrorInput, opts ...grpc.CallOption) (*Void, error)
	// Yield bandwidth in real-time
	MonitorBandwidth(ctx context.Context, in *metric.BandwidthStats, opts ...grpc.CallOption) (Service_MonitorBandwidthClient, error)
	// Yield new peers in real-time
	MonitorPeers(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_MonitorPeersClient, error)
	GetListenAddrs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*metric.ListAddrs, error)
	GetListenInterfaceAddrs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*metric.ListAddrs, error)
	Libp2PPing(ctx context.Context, in *metric.PingReq, opts ...grpc.CallOption) (*Bool, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) ID(ctx context.Context, in *Void, opts ...grpc.CallOption) (*metric.Peer, error) {
	out := new(metric.Peer)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CommitLogStream(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_CommitLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/berty.node.Service/CommitLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceCommitLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_CommitLogStreamClient interface {
	Recv() (*CommitLog, error)
	grpc.ClientStream
}

type serviceCommitLogStreamClient struct {
	grpc.ClientStream
}

func (x *serviceCommitLogStreamClient) Recv() (*CommitLog, error) {
	m := new(CommitLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) EventStream(ctx context.Context, in *EventStreamInput, opts ...grpc.CallOption) (Service_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[1], "/berty.node.Service/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_EventStreamClient interface {
	Recv() (*entity.Event, error)
	grpc.ClientStream
}

type serviceEventStreamClient struct {
	grpc.ClientStream
}

func (x *serviceEventStreamClient) Recv() (*entity.Event, error) {
	m := new(entity.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) EventList(ctx context.Context, in *EventListInput, opts ...grpc.CallOption) (Service_EventListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[2], "/berty.node.Service/EventList", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceEventListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_EventListClient interface {
	Recv() (*entity.Event, error)
	grpc.ClientStream
}

type serviceEventListClient struct {
	grpc.ClientStream
}

func (x *serviceEventListClient) Recv() (*entity.Event, error) {
	m := new(entity.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) EventUnseen(ctx context.Context, in *EventListInput, opts ...grpc.CallOption) (Service_EventUnseenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[3], "/berty.node.Service/EventUnseen", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceEventUnseenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_EventUnseenClient interface {
	Recv() (*entity.Event, error)
	grpc.ClientStream
}

type serviceEventUnseenClient struct {
	grpc.ClientStream
}

func (x *serviceEventUnseenClient) Recv() (*entity.Event, error) {
	m := new(entity.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) GetEvent(ctx context.Context, in *entity.Event, opts ...grpc.CallOption) (*entity.Event, error) {
	out := new(entity.Event)
	err := c.cc.Invoke(ctx, "/berty.node.Service/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) EventSeen(ctx context.Context, in *entity.Event, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/EventSeen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) EventRetry(ctx context.Context, in *entity.Event, opts ...grpc.CallOption) (*entity.Event, error) {
	out := new(entity.Event)
	err := c.cc.Invoke(ctx, "/berty.node.Service/EventRetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Config(ctx context.Context, in *Void, opts ...grpc.CallOption) (*entity.Config, error) {
	out := new(entity.Config)
	err := c.cc.Invoke(ctx, "/berty.node.Service/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConfigPublic(ctx context.Context, in *Void, opts ...grpc.CallOption) (*entity.Config, error) {
	out := new(entity.Config)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConfigPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConfigUpdate(ctx context.Context, in *entity.Config, opts ...grpc.CallOption) (*entity.Config, error) {
	out := new(entity.Config)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConfigUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactRequest(ctx context.Context, in *ContactRequestInput, opts ...grpc.CallOption) (*entity.Contact, error) {
	out := new(entity.Contact)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ContactRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactAcceptRequest(ctx context.Context, in *ContactAcceptRequestInput, opts ...grpc.CallOption) (*entity.Contact, error) {
	out := new(entity.Contact)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ContactAcceptRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactRemove(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error) {
	out := new(entity.Contact)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ContactRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactUpdate(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error) {
	out := new(entity.Contact)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ContactUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactList(ctx context.Context, in *ContactListInput, opts ...grpc.CallOption) (Service_ContactListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[4], "/berty.node.Service/ContactList", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceContactListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_ContactListClient interface {
	Recv() (*entity.Contact, error)
	grpc.ClientStream
}

type serviceContactListClient struct {
	grpc.ClientStream
}

func (x *serviceContactListClient) Recv() (*entity.Contact, error) {
	m := new(entity.Contact)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) Contact(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error) {
	out := new(entity.Contact)
	err := c.cc.Invoke(ctx, "/berty.node.Service/Contact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactSeen(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*entity.Contact, error) {
	out := new(entity.Contact)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ContactSeen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactCheckPublicKey(ctx context.Context, in *entity.Contact, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ContactCheckPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactListBadge(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Badge, error) {
	out := new(Badge)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ContactListBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationCreate(ctx context.Context, in *ConversationCreateInput, opts ...grpc.CallOption) (*entity.Conversation, error) {
	out := new(entity.Conversation)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationUpdate(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Conversation, error) {
	out := new(entity.Conversation)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationList(ctx context.Context, in *ConversationListInput, opts ...grpc.CallOption) (Service_ConversationListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[5], "/berty.node.Service/ConversationList", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceConversationListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_ConversationListClient interface {
	Recv() (*entity.Conversation, error)
	grpc.ClientStream
}

type serviceConversationListClient struct {
	grpc.ClientStream
}

func (x *serviceConversationListClient) Recv() (*entity.Conversation, error) {
	m := new(entity.Conversation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) ConversationInvite(ctx context.Context, in *ConversationManageMembersInput, opts ...grpc.CallOption) (*entity.Conversation, error) {
	out := new(entity.Conversation)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationExclude(ctx context.Context, in *ConversationManageMembersInput, opts ...grpc.CallOption) (*entity.Conversation, error) {
	out := new(entity.Conversation)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationExclude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationAddMessage(ctx context.Context, in *ConversationAddMessageInput, opts ...grpc.CallOption) (*entity.Event, error) {
	out := new(entity.Event)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationAddMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Conversation(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Conversation, error) {
	out := new(entity.Conversation)
	err := c.cc.Invoke(ctx, "/berty.node.Service/Conversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationMember(ctx context.Context, in *entity.ConversationMember, opts ...grpc.CallOption) (*entity.ConversationMember, error) {
	out := new(entity.ConversationMember)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationRead(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Conversation, error) {
	out := new(entity.Conversation)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationRemove(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Conversation, error) {
	out := new(entity.Conversation)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationLastEvent(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*entity.Event, error) {
	out := new(entity.Event)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationLastEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationListBadge(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Badge, error) {
	out := new(Badge)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationListBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ConversationBadge(ctx context.Context, in *entity.Conversation, opts ...grpc.CallOption) (*Badge, error) {
	out := new(Badge)
	err := c.cc.Invoke(ctx, "/berty.node.Service/ConversationBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DevicePushConfigList(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_DevicePushConfigListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[6], "/berty.node.Service/DevicePushConfigList", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceDevicePushConfigListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_DevicePushConfigListClient interface {
	Recv() (*entity.DevicePushConfig, error)
	grpc.ClientStream
}

type serviceDevicePushConfigListClient struct {
	grpc.ClientStream
}

func (x *serviceDevicePushConfigListClient) Recv() (*entity.DevicePushConfig, error) {
	m := new(entity.DevicePushConfig)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) DevicePushConfigCreate(ctx context.Context, in *DevicePushConfigCreateInput, opts ...grpc.CallOption) (*entity.DevicePushConfig, error) {
	out := new(entity.DevicePushConfig)
	err := c.cc.Invoke(ctx, "/berty.node.Service/DevicePushConfigCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DevicePushConfigNativeRegister(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/DevicePushConfigNativeRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DevicePushConfigNativeUnregister(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/DevicePushConfigNativeUnregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DevicePushConfigRemove(ctx context.Context, in *entity.DevicePushConfig, opts ...grpc.CallOption) (*entity.DevicePushConfig, error) {
	out := new(entity.DevicePushConfig)
	err := c.cc.Invoke(ctx, "/berty.node.Service/DevicePushConfigRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DevicePushConfigUpdate(ctx context.Context, in *entity.DevicePushConfig, opts ...grpc.CallOption) (*entity.DevicePushConfig, error) {
	out := new(entity.DevicePushConfig)
	err := c.cc.Invoke(ctx, "/berty.node.Service/DevicePushConfigUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) HandleEvent(ctx context.Context, in *entity.Event, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/HandleEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/GenerateFakeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RunIntegrationTests(ctx context.Context, in *IntegrationTestInput, opts ...grpc.CallOption) (*IntegrationTestOutput, error) {
	out := new(IntegrationTestOutput)
	err := c.cc.Invoke(ctx, "/berty.node.Service/RunIntegrationTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DebugPing(ctx context.Context, in *PingDestination, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/DebugPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DebugRequeueEvent(ctx context.Context, in *EventIDInput, opts ...grpc.CallOption) (*entity.Event, error) {
	out := new(entity.Event)
	err := c.cc.Invoke(ctx, "/berty.node.Service/DebugRequeueEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DebugRequeueAll(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/DebugRequeueAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeviceInfos(ctx context.Context, in *Void, opts ...grpc.CallOption) (*deviceinfo.DeviceInfos, error) {
	out := new(deviceinfo.DeviceInfos)
	err := c.cc.Invoke(ctx, "/berty.node.Service/DeviceInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AppVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AppVersionOutput, error) {
	out := new(AppVersionOutput)
	err := c.cc.Invoke(ctx, "/berty.node.Service/AppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Peers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*metric.Peers, error) {
	out := new(metric.Peers)
	err := c.cc.Invoke(ctx, "/berty.node.Service/Peers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Protocols(ctx context.Context, in *metric.Peer, opts ...grpc.CallOption) (*ProtocolsOutput, error) {
	out := new(ProtocolsOutput)
	err := c.cc.Invoke(ctx, "/berty.node.Service/Protocols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LogStream(ctx context.Context, in *LogStreamInput, opts ...grpc.CallOption) (Service_LogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[7], "/berty.node.Service/LogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_LogStreamClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type serviceLogStreamClient struct {
	grpc.ClientStream
}

func (x *serviceLogStreamClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) LogfileList(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_LogfileListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[8], "/berty.node.Service/LogfileList", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceLogfileListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_LogfileListClient interface {
	Recv() (*LogfileEntry, error)
	grpc.ClientStream
}

type serviceLogfileListClient struct {
	grpc.ClientStream
}

func (x *serviceLogfileListClient) Recv() (*LogfileEntry, error) {
	m := new(LogfileEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) LogfileRead(ctx context.Context, in *LogfileReadInput, opts ...grpc.CallOption) (Service_LogfileReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[9], "/berty.node.Service/LogfileRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceLogfileReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_LogfileReadClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type serviceLogfileReadClient struct {
	grpc.ClientStream
}

func (x *serviceLogfileReadClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) TestLogBackgroundError(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/TestLogBackgroundError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TestLogBackgroundWarn(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/TestLogBackgroundWarn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TestLogBackgroundDebug(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/TestLogBackgroundDebug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TestPanic(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/TestPanic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TestError(ctx context.Context, in *TestErrorInput, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/berty.node.Service/TestError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) MonitorBandwidth(ctx context.Context, in *metric.BandwidthStats, opts ...grpc.CallOption) (Service_MonitorBandwidthClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[10], "/berty.node.Service/MonitorBandwidth", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceMonitorBandwidthClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_MonitorBandwidthClient interface {
	Recv() (*metric.BandwidthStats, error)
	grpc.ClientStream
}

type serviceMonitorBandwidthClient struct {
	grpc.ClientStream
}

func (x *serviceMonitorBandwidthClient) Recv() (*metric.BandwidthStats, error) {
	m := new(metric.BandwidthStats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) MonitorPeers(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_MonitorPeersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[11], "/berty.node.Service/MonitorPeers", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceMonitorPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_MonitorPeersClient interface {
	Recv() (*metric.Peer, error)
	grpc.ClientStream
}

type serviceMonitorPeersClient struct {
	grpc.ClientStream
}

func (x *serviceMonitorPeersClient) Recv() (*metric.Peer, error) {
	m := new(metric.Peer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) GetListenAddrs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*metric.ListAddrs, error) {
	out := new(metric.ListAddrs)
	err := c.cc.Invoke(ctx, "/berty.node.Service/GetListenAddrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetListenInterfaceAddrs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*metric.ListAddrs, error) {
	out := new(metric.ListAddrs)
	err := c.cc.Invoke(ctx, "/berty.node.Service/GetListenInterfaceAddrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Libp2PPing(ctx context.Context, in *metric.PingReq, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/berty.node.Service/Libp2PPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// return node current ID
	ID(context.Context, *Void) (*metric.Peer, error)
	//
	// Storage sync
	//
	CommitLogStream(*Void, Service_CommitLogStreamServer) error
	// yield new events in real-time
	EventStream(*EventStreamInput, Service_EventStreamServer) error
	// list old events
	EventList(*EventListInput, Service_EventListServer) error
	EventUnseen(*EventListInput, Service_EventUnseenServer) error
	GetEvent(context.Context, *entity.Event) (*entity.Event, error)
	EventSeen(context.Context, *entity.Event) (*Void, error)
	EventRetry(context.Context, *entity.Event) (*entity.Event, error)
	//
	// Config
	//
	Config(context.Context, *Void) (*entity.Config, error)
	ConfigPublic(context.Context, *Void) (*entity.Config, error)
	ConfigUpdate(context.Context, *entity.Config) (*entity.Config, error)
	ContactRequest(context.Context, *ContactRequestInput) (*entity.Contact, error)
	ContactAcceptRequest(context.Context, *ContactAcceptRequestInput) (*entity.Contact, error)
	ContactRemove(context.Context, *entity.Contact) (*entity.Contact, error)
	ContactUpdate(context.Context, *entity.Contact) (*entity.Contact, error)
	ContactList(*ContactListInput, Service_ContactListServer) error
	Contact(context.Context, *entity.Contact) (*entity.Contact, error)
	ContactSeen(context.Context, *entity.Contact) (*entity.Contact, error)
	ContactCheckPublicKey(context.Context, *entity.Contact) (*Bool, error)
	ContactListBadge(context.Context, *Void) (*Badge, error)
	ConversationCreate(context.Context, *ConversationCreateInput) (*entity.Conversation, error)
	ConversationUpdate(context.Context, *entity.Conversation) (*entity.Conversation, error)
	ConversationList(*ConversationListInput, Service_ConversationListServer) error
	ConversationInvite(context.Context, *ConversationManageMembersInput) (*entity.Conversation, error)
	ConversationExclude(context.Context, *ConversationManageMembersInput) (*entity.Conversation, error)
	ConversationAddMessage(context.Context, *ConversationAddMessageInput) (*entity.Event, error)
	Conversation(context.Context, *entity.Conversation) (*entity.Conversation, error)
	ConversationMember(context.Context, *entity.ConversationMember) (*entity.ConversationMember, error)
	ConversationRead(context.Context, *entity.Conversation) (*entity.Conversation, error)
	ConversationRemove(context.Context, *entity.Conversation) (*entity.Conversation, error)
	ConversationLastEvent(context.Context, *entity.Conversation) (*entity.Event, error)
	ConversationListBadge(context.Context, *Void) (*Badge, error)
	ConversationBadge(context.Context, *entity.Conversation) (*Badge, error)
	DevicePushConfigList(*Void, Service_DevicePushConfigListServer) error
	DevicePushConfigCreate(context.Context, *DevicePushConfigCreateInput) (*entity.DevicePushConfig, error)
	DevicePushConfigNativeRegister(context.Context, *Void) (*Void, error)
	DevicePushConfigNativeUnregister(context.Context, *Void) (*Void, error)
	DevicePushConfigRemove(context.Context, *entity.DevicePushConfig) (*entity.DevicePushConfig, error)
	DevicePushConfigUpdate(context.Context, *entity.DevicePushConfig) (*entity.DevicePushConfig, error)
	// HandleEvent is the unencrypted (and unsafe) version of HandleEnvelope.
	// it's only exposed over the node API, it should be completely deactivated in public releases
	HandleEvent(context.Context, *entity.Event) (*Void, error)
	GenerateFakeData(context.Context, *Void) (*Void, error)
	RunIntegrationTests(context.Context, *IntegrationTestInput) (*IntegrationTestOutput, error)
	DebugPing(context.Context, *PingDestination) (*Void, error)
	DebugRequeueEvent(context.Context, *EventIDInput) (*entity.Event, error)
	DebugRequeueAll(context.Context, *Void) (*Void, error)
	DeviceInfos(context.Context, *Void) (*deviceinfo.DeviceInfos, error)
	AppVersion(context.Context, *Void) (*AppVersionOutput, error)
	Peers(context.Context, *Void) (*metric.Peers, error)
	Protocols(context.Context, *metric.Peer) (*ProtocolsOutput, error)
	LogStream(*LogStreamInput, Service_LogStreamServer) error
	LogfileList(*Void, Service_LogfileListServer) error
	LogfileRead(*LogfileReadInput, Service_LogfileReadServer) error
	TestLogBackgroundError(context.Context, *Void) (*Void, error)
	TestLogBackgroundWarn(context.Context, *Void) (*Void, error)
	TestLogBackgroundDebug(context.Context, *Void) (*Void, error)
	TestPanic(context.Context, *Void) (*Void, error)
	TestError(context.Context, *TestErrorInput) (*Void, error)
	// Yield bandwidth in real-time
	MonitorBandwidth(*metric.BandwidthStats, Service_MonitorBandwidthServer) error
	// Yield new peers in real-time
	MonitorPeers(*Void, Service_MonitorPeersServer) error
	GetListenAddrs(context.Context, *Void) (*metric.ListAddrs, error)
	GetListenInterfaceAddrs(context.Context, *Void) (*metric.ListAddrs, error)
	Libp2PPing(context.Context, *metric.PingReq) (*Bool, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) ID(ctx context.Context, req *Void) (*metric.Peer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ID not implemented")
}
func (*UnimplementedServiceServer) CommitLogStream(req *Void, srv Service_CommitLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CommitLogStream not implemented")
}
func (*UnimplementedServiceServer) EventStream(req *EventStreamInput, srv Service_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (*UnimplementedServiceServer) EventList(req *EventListInput, srv Service_EventListServer) error {
	return status.Errorf(codes.Unimplemented, "method EventList not implemented")
}
func (*UnimplementedServiceServer) EventUnseen(req *EventListInput, srv Service_EventUnseenServer) error {
	return status.Errorf(codes.Unimplemented, "method EventUnseen not implemented")
}
func (*UnimplementedServiceServer) GetEvent(ctx context.Context, req *entity.Event) (*entity.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (*UnimplementedServiceServer) EventSeen(ctx context.Context, req *entity.Event) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventSeen not implemented")
}
func (*UnimplementedServiceServer) EventRetry(ctx context.Context, req *entity.Event) (*entity.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventRetry not implemented")
}
func (*UnimplementedServiceServer) Config(ctx context.Context, req *Void) (*entity.Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (*UnimplementedServiceServer) ConfigPublic(ctx context.Context, req *Void) (*entity.Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigPublic not implemented")
}
func (*UnimplementedServiceServer) ConfigUpdate(ctx context.Context, req *entity.Config) (*entity.Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdate not implemented")
}
func (*UnimplementedServiceServer) ContactRequest(ctx context.Context, req *ContactRequestInput) (*entity.Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequest not implemented")
}
func (*UnimplementedServiceServer) ContactAcceptRequest(ctx context.Context, req *ContactAcceptRequestInput) (*entity.Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactAcceptRequest not implemented")
}
func (*UnimplementedServiceServer) ContactRemove(ctx context.Context, req *entity.Contact) (*entity.Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRemove not implemented")
}
func (*UnimplementedServiceServer) ContactUpdate(ctx context.Context, req *entity.Contact) (*entity.Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactUpdate not implemented")
}
func (*UnimplementedServiceServer) ContactList(req *ContactListInput, srv Service_ContactListServer) error {
	return status.Errorf(codes.Unimplemented, "method ContactList not implemented")
}
func (*UnimplementedServiceServer) Contact(ctx context.Context, req *entity.Contact) (*entity.Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Contact not implemented")
}
func (*UnimplementedServiceServer) ContactSeen(ctx context.Context, req *entity.Contact) (*entity.Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactSeen not implemented")
}
func (*UnimplementedServiceServer) ContactCheckPublicKey(ctx context.Context, req *entity.Contact) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactCheckPublicKey not implemented")
}
func (*UnimplementedServiceServer) ContactListBadge(ctx context.Context, req *Void) (*Badge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactListBadge not implemented")
}
func (*UnimplementedServiceServer) ConversationCreate(ctx context.Context, req *ConversationCreateInput) (*entity.Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationCreate not implemented")
}
func (*UnimplementedServiceServer) ConversationUpdate(ctx context.Context, req *entity.Conversation) (*entity.Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationUpdate not implemented")
}
func (*UnimplementedServiceServer) ConversationList(req *ConversationListInput, srv Service_ConversationListServer) error {
	return status.Errorf(codes.Unimplemented, "method ConversationList not implemented")
}
func (*UnimplementedServiceServer) ConversationInvite(ctx context.Context, req *ConversationManageMembersInput) (*entity.Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationInvite not implemented")
}
func (*UnimplementedServiceServer) ConversationExclude(ctx context.Context, req *ConversationManageMembersInput) (*entity.Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationExclude not implemented")
}
func (*UnimplementedServiceServer) ConversationAddMessage(ctx context.Context, req *ConversationAddMessageInput) (*entity.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationAddMessage not implemented")
}
func (*UnimplementedServiceServer) Conversation(ctx context.Context, req *entity.Conversation) (*entity.Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Conversation not implemented")
}
func (*UnimplementedServiceServer) ConversationMember(ctx context.Context, req *entity.ConversationMember) (*entity.ConversationMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationMember not implemented")
}
func (*UnimplementedServiceServer) ConversationRead(ctx context.Context, req *entity.Conversation) (*entity.Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationRead not implemented")
}
func (*UnimplementedServiceServer) ConversationRemove(ctx context.Context, req *entity.Conversation) (*entity.Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationRemove not implemented")
}
func (*UnimplementedServiceServer) ConversationLastEvent(ctx context.Context, req *entity.Conversation) (*entity.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationLastEvent not implemented")
}
func (*UnimplementedServiceServer) ConversationListBadge(ctx context.Context, req *Void) (*Badge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationListBadge not implemented")
}
func (*UnimplementedServiceServer) ConversationBadge(ctx context.Context, req *entity.Conversation) (*Badge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationBadge not implemented")
}
func (*UnimplementedServiceServer) DevicePushConfigList(req *Void, srv Service_DevicePushConfigListServer) error {
	return status.Errorf(codes.Unimplemented, "method DevicePushConfigList not implemented")
}
func (*UnimplementedServiceServer) DevicePushConfigCreate(ctx context.Context, req *DevicePushConfigCreateInput) (*entity.DevicePushConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicePushConfigCreate not implemented")
}
func (*UnimplementedServiceServer) DevicePushConfigNativeRegister(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicePushConfigNativeRegister not implemented")
}
func (*UnimplementedServiceServer) DevicePushConfigNativeUnregister(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicePushConfigNativeUnregister not implemented")
}
func (*UnimplementedServiceServer) DevicePushConfigRemove(ctx context.Context, req *entity.DevicePushConfig) (*entity.DevicePushConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicePushConfigRemove not implemented")
}
func (*UnimplementedServiceServer) DevicePushConfigUpdate(ctx context.Context, req *entity.DevicePushConfig) (*entity.DevicePushConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicePushConfigUpdate not implemented")
}
func (*UnimplementedServiceServer) HandleEvent(ctx context.Context, req *entity.Event) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleEvent not implemented")
}
func (*UnimplementedServiceServer) GenerateFakeData(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFakeData not implemented")
}
func (*UnimplementedServiceServer) RunIntegrationTests(ctx context.Context, req *IntegrationTestInput) (*IntegrationTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunIntegrationTests not implemented")
}
func (*UnimplementedServiceServer) DebugPing(ctx context.Context, req *PingDestination) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugPing not implemented")
}
func (*UnimplementedServiceServer) DebugRequeueEvent(ctx context.Context, req *EventIDInput) (*entity.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugRequeueEvent not implemented")
}
func (*UnimplementedServiceServer) DebugRequeueAll(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugRequeueAll not implemented")
}
func (*UnimplementedServiceServer) DeviceInfos(ctx context.Context, req *Void) (*deviceinfo.DeviceInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfos not implemented")
}
func (*UnimplementedServiceServer) AppVersion(ctx context.Context, req *Void) (*AppVersionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppVersion not implemented")
}
func (*UnimplementedServiceServer) Peers(ctx context.Context, req *Void) (*metric.Peers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peers not implemented")
}
func (*UnimplementedServiceServer) Protocols(ctx context.Context, req *metric.Peer) (*ProtocolsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Protocols not implemented")
}
func (*UnimplementedServiceServer) LogStream(req *LogStreamInput, srv Service_LogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LogStream not implemented")
}
func (*UnimplementedServiceServer) LogfileList(req *Void, srv Service_LogfileListServer) error {
	return status.Errorf(codes.Unimplemented, "method LogfileList not implemented")
}
func (*UnimplementedServiceServer) LogfileRead(req *LogfileReadInput, srv Service_LogfileReadServer) error {
	return status.Errorf(codes.Unimplemented, "method LogfileRead not implemented")
}
func (*UnimplementedServiceServer) TestLogBackgroundError(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestLogBackgroundError not implemented")
}
func (*UnimplementedServiceServer) TestLogBackgroundWarn(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestLogBackgroundWarn not implemented")
}
func (*UnimplementedServiceServer) TestLogBackgroundDebug(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestLogBackgroundDebug not implemented")
}
func (*UnimplementedServiceServer) TestPanic(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestPanic not implemented")
}
func (*UnimplementedServiceServer) TestError(ctx context.Context, req *TestErrorInput) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestError not implemented")
}
func (*UnimplementedServiceServer) MonitorBandwidth(req *metric.BandwidthStats, srv Service_MonitorBandwidthServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorBandwidth not implemented")
}
func (*UnimplementedServiceServer) MonitorPeers(req *Void, srv Service_MonitorPeersServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorPeers not implemented")
}
func (*UnimplementedServiceServer) GetListenAddrs(ctx context.Context, req *Void) (*metric.ListAddrs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenAddrs not implemented")
}
func (*UnimplementedServiceServer) GetListenInterfaceAddrs(ctx context.Context, req *Void) (*metric.ListAddrs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenInterfaceAddrs not implemented")
}
func (*UnimplementedServiceServer) Libp2PPing(ctx context.Context, req *metric.PingReq) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Libp2PPing not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_ID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ID(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CommitLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).CommitLogStream(m, &serviceCommitLogStreamServer{stream})
}

type Service_CommitLogStreamServer interface {
	Send(*CommitLog) error
	grpc.ServerStream
}

type serviceCommitLogStreamServer struct {
	grpc.ServerStream
}

func (x *serviceCommitLogStreamServer) Send(m *CommitLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).EventStream(m, &serviceEventStreamServer{stream})
}

type Service_EventStreamServer interface {
	Send(*entity.Event) error
	grpc.ServerStream
}

type serviceEventStreamServer struct {
	grpc.ServerStream
}

func (x *serviceEventStreamServer) Send(m *entity.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_EventList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventListInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).EventList(m, &serviceEventListServer{stream})
}

type Service_EventListServer interface {
	Send(*entity.Event) error
	grpc.ServerStream
}

type serviceEventListServer struct {
	grpc.ServerStream
}

func (x *serviceEventListServer) Send(m *entity.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_EventUnseen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventListInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).EventUnseen(m, &serviceEventUnseenServer{stream})
}

type Service_EventUnseenServer interface {
	Send(*entity.Event) error
	grpc.ServerStream
}

type serviceEventUnseenServer struct {
	grpc.ServerStream
}

func (x *serviceEventUnseenServer) Send(m *entity.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetEvent(ctx, req.(*entity.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_EventSeen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).EventSeen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/EventSeen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).EventSeen(ctx, req.(*entity.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_EventRetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).EventRetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/EventRetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).EventRetry(ctx, req.(*entity.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Config(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConfigPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConfigPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConfigPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConfigPublic(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConfigUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConfigUpdate(ctx, req.(*entity.Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactRequest(ctx, req.(*ContactRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactAcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactAcceptRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactAcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactAcceptRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactAcceptRequest(ctx, req.(*ContactAcceptRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactRemove(ctx, req.(*entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactUpdate(ctx, req.(*entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContactListInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).ContactList(m, &serviceContactListServer{stream})
}

type Service_ContactListServer interface {
	Send(*entity.Contact) error
	grpc.ServerStream
}

type serviceContactListServer struct {
	grpc.ServerStream
}

func (x *serviceContactListServer) Send(m *entity.Contact) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_Contact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Contact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/Contact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Contact(ctx, req.(*entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactSeen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactSeen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactSeen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactSeen(ctx, req.(*entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactCheckPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactCheckPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactCheckPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactCheckPublicKey(ctx, req.(*entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactListBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactListBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactListBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactListBadge(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationCreate(ctx, req.(*ConversationCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationUpdate(ctx, req.(*entity.Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConversationListInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).ConversationList(m, &serviceConversationListServer{stream})
}

type Service_ConversationListServer interface {
	Send(*entity.Conversation) error
	grpc.ServerStream
}

type serviceConversationListServer struct {
	grpc.ServerStream
}

func (x *serviceConversationListServer) Send(m *entity.Conversation) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_ConversationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationManageMembersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationInvite(ctx, req.(*ConversationManageMembersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationExclude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationManageMembersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationExclude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationExclude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationExclude(ctx, req.(*ConversationManageMembersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationAddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationAddMessageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationAddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationAddMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationAddMessage(ctx, req.(*ConversationAddMessageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Conversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Conversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/Conversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Conversation(ctx, req.(*entity.Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.ConversationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationMember(ctx, req.(*entity.ConversationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationRead(ctx, req.(*entity.Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationRemove(ctx, req.(*entity.Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationLastEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationLastEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationLastEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationLastEvent(ctx, req.(*entity.Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationListBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationListBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationListBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationListBadge(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ConversationBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ConversationBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ConversationBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ConversationBadge(ctx, req.(*entity.Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DevicePushConfigList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).DevicePushConfigList(m, &serviceDevicePushConfigListServer{stream})
}

type Service_DevicePushConfigListServer interface {
	Send(*entity.DevicePushConfig) error
	grpc.ServerStream
}

type serviceDevicePushConfigListServer struct {
	grpc.ServerStream
}

func (x *serviceDevicePushConfigListServer) Send(m *entity.DevicePushConfig) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_DevicePushConfigCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicePushConfigCreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DevicePushConfigCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/DevicePushConfigCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DevicePushConfigCreate(ctx, req.(*DevicePushConfigCreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DevicePushConfigNativeRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DevicePushConfigNativeRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/DevicePushConfigNativeRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DevicePushConfigNativeRegister(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DevicePushConfigNativeUnregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DevicePushConfigNativeUnregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/DevicePushConfigNativeUnregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DevicePushConfigNativeUnregister(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DevicePushConfigRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.DevicePushConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DevicePushConfigRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/DevicePushConfigRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DevicePushConfigRemove(ctx, req.(*entity.DevicePushConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DevicePushConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.DevicePushConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DevicePushConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/DevicePushConfigUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DevicePushConfigUpdate(ctx, req.(*entity.DevicePushConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_HandleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).HandleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/HandleEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).HandleEvent(ctx, req.(*entity.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GenerateFakeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GenerateFakeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/GenerateFakeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GenerateFakeData(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RunIntegrationTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RunIntegrationTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/RunIntegrationTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RunIntegrationTests(ctx, req.(*IntegrationTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DebugPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingDestination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DebugPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/DebugPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DebugPing(ctx, req.(*PingDestination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DebugRequeueEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventIDInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DebugRequeueEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/DebugRequeueEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DebugRequeueEvent(ctx, req.(*EventIDInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DebugRequeueAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DebugRequeueAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/DebugRequeueAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DebugRequeueAll(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeviceInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeviceInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/DeviceInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeviceInfos(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/AppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AppVersion(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Peers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Peers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/Peers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Peers(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Protocols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metric.Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Protocols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/Protocols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Protocols(ctx, req.(*metric.Peer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_LogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogStreamInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).LogStream(m, &serviceLogStreamServer{stream})
}

type Service_LogStreamServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type serviceLogStreamServer struct {
	grpc.ServerStream
}

func (x *serviceLogStreamServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_LogfileList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).LogfileList(m, &serviceLogfileListServer{stream})
}

type Service_LogfileListServer interface {
	Send(*LogfileEntry) error
	grpc.ServerStream
}

type serviceLogfileListServer struct {
	grpc.ServerStream
}

func (x *serviceLogfileListServer) Send(m *LogfileEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_LogfileRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogfileReadInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).LogfileRead(m, &serviceLogfileReadServer{stream})
}

type Service_LogfileReadServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type serviceLogfileReadServer struct {
	grpc.ServerStream
}

func (x *serviceLogfileReadServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_TestLogBackgroundError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TestLogBackgroundError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/TestLogBackgroundError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TestLogBackgroundError(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TestLogBackgroundWarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TestLogBackgroundWarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/TestLogBackgroundWarn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TestLogBackgroundWarn(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TestLogBackgroundDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TestLogBackgroundDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/TestLogBackgroundDebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TestLogBackgroundDebug(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TestPanic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TestPanic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/TestPanic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TestPanic(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TestError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestErrorInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TestError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/TestError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TestError(ctx, req.(*TestErrorInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_MonitorBandwidth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(metric.BandwidthStats)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).MonitorBandwidth(m, &serviceMonitorBandwidthServer{stream})
}

type Service_MonitorBandwidthServer interface {
	Send(*metric.BandwidthStats) error
	grpc.ServerStream
}

type serviceMonitorBandwidthServer struct {
	grpc.ServerStream
}

func (x *serviceMonitorBandwidthServer) Send(m *metric.BandwidthStats) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_MonitorPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).MonitorPeers(m, &serviceMonitorPeersServer{stream})
}

type Service_MonitorPeersServer interface {
	Send(*metric.Peer) error
	grpc.ServerStream
}

type serviceMonitorPeersServer struct {
	grpc.ServerStream
}

func (x *serviceMonitorPeersServer) Send(m *metric.Peer) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_GetListenAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetListenAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/GetListenAddrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetListenAddrs(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetListenInterfaceAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetListenInterfaceAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/GetListenInterfaceAddrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetListenInterfaceAddrs(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Libp2PPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metric.PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Libp2PPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/Libp2PPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Libp2PPing(ctx, req.(*metric.PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "berty.node.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ID",
			Handler:    _Service_ID_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _Service_GetEvent_Handler,
		},
		{
			MethodName: "EventSeen",
			Handler:    _Service_EventSeen_Handler,
		},
		{
			MethodName: "EventRetry",
			Handler:    _Service_EventRetry_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _Service_Config_Handler,
		},
		{
			MethodName: "ConfigPublic",
			Handler:    _Service_ConfigPublic_Handler,
		},
		{
			MethodName: "ConfigUpdate",
			Handler:    _Service_ConfigUpdate_Handler,
		},
		{
			MethodName: "ContactRequest",
			Handler:    _Service_ContactRequest_Handler,
		},
		{
			MethodName: "ContactAcceptRequest",
			Handler:    _Service_ContactAcceptRequest_Handler,
		},
		{
			MethodName: "ContactRemove",
			Handler:    _Service_ContactRemove_Handler,
		},
		{
			MethodName: "ContactUpdate",
			Handler:    _Service_ContactUpdate_Handler,
		},
		{
			MethodName: "Contact",
			Handler:    _Service_Contact_Handler,
		},
		{
			MethodName: "ContactSeen",
			Handler:    _Service_ContactSeen_Handler,
		},
		{
			MethodName: "ContactCheckPublicKey",
			Handler:    _Service_ContactCheckPublicKey_Handler,
		},
		{
			MethodName: "ContactListBadge",
			Handler:    _Service_ContactListBadge_Handler,
		},
		{
			MethodName: "ConversationCreate",
			Handler:    _Service_ConversationCreate_Handler,
		},
		{
			MethodName: "ConversationUpdate",
			Handler:    _Service_ConversationUpdate_Handler,
		},
		{
			MethodName: "ConversationInvite",
			Handler:    _Service_ConversationInvite_Handler,
		},
		{
			MethodName: "ConversationExclude",
			Handler:    _Service_ConversationExclude_Handler,
		},
		{
			MethodName: "ConversationAddMessage",
			Handler:    _Service_ConversationAddMessage_Handler,
		},
		{
			MethodName: "Conversation",
			Handler:    _Service_Conversation_Handler,
		},
		{
			MethodName: "ConversationMember",
			Handler:    _Service_ConversationMember_Handler,
		},
		{
			MethodName: "ConversationRead",
			Handler:    _Service_ConversationRead_Handler,
		},
		{
			MethodName: "ConversationRemove",
			Handler:    _Service_ConversationRemove_Handler,
		},
		{
			MethodName: "ConversationLastEvent",
			Handler:    _Service_ConversationLastEvent_Handler,
		},
		{
			MethodName: "ConversationListBadge",
			Handler:    _Service_ConversationListBadge_Handler,
		},
		{
			MethodName: "ConversationBadge",
			Handler:    _Service_ConversationBadge_Handler,
		},
		{
			MethodName: "DevicePushConfigCreate",
			Handler:    _Service_DevicePushConfigCreate_Handler,
		},
		{
			MethodName: "DevicePushConfigNativeRegister",
			Handler:    _Service_DevicePushConfigNativeRegister_Handler,
		},
		{
			MethodName: "DevicePushConfigNativeUnregister",
			Handler:    _Service_DevicePushConfigNativeUnregister_Handler,
		},
		{
			MethodName: "DevicePushConfigRemove",
			Handler:    _Service_DevicePushConfigRemove_Handler,
		},
		{
			MethodName: "DevicePushConfigUpdate",
			Handler:    _Service_DevicePushConfigUpdate_Handler,
		},
		{
			MethodName: "HandleEvent",
			Handler:    _Service_HandleEvent_Handler,
		},
		{
			MethodName: "GenerateFakeData",
			Handler:    _Service_GenerateFakeData_Handler,
		},
		{
			MethodName: "RunIntegrationTests",
			Handler:    _Service_RunIntegrationTests_Handler,
		},
		{
			MethodName: "DebugPing",
			Handler:    _Service_DebugPing_Handler,
		},
		{
			MethodName: "DebugRequeueEvent",
			Handler:    _Service_DebugRequeueEvent_Handler,
		},
		{
			MethodName: "DebugRequeueAll",
			Handler:    _Service_DebugRequeueAll_Handler,
		},
		{
			MethodName: "DeviceInfos",
			Handler:    _Service_DeviceInfos_Handler,
		},
		{
			MethodName: "AppVersion",
			Handler:    _Service_AppVersion_Handler,
		},
		{
			MethodName: "Peers",
			Handler:    _Service_Peers_Handler,
		},
		{
			MethodName: "Protocols",
			Handler:    _Service_Protocols_Handler,
		},
		{
			MethodName: "TestLogBackgroundError",
			Handler:    _Service_TestLogBackgroundError_Handler,
		},
		{
			MethodName: "TestLogBackgroundWarn",
			Handler:    _Service_TestLogBackgroundWarn_Handler,
		},
		{
			MethodName: "TestLogBackgroundDebug",
			Handler:    _Service_TestLogBackgroundDebug_Handler,
		},
		{
			MethodName: "TestPanic",
			Handler:    _Service_TestPanic_Handler,
		},
		{
			MethodName: "TestError",
			Handler:    _Service_TestError_Handler,
		},
		{
			MethodName: "GetListenAddrs",
			Handler:    _Service_GetListenAddrs_Handler,
		},
		{
			MethodName: "GetListenInterfaceAddrs",
			Handler:    _Service_GetListenInterfaceAddrs_Handler,
		},
		{
			MethodName: "Libp2PPing",
			Handler:    _Service_Libp2PPing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommitLogStream",
			Handler:       _Service_CommitLogStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventStream",
			Handler:       _Service_EventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventList",
			Handler:       _Service_EventList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventUnseen",
			Handler:       _Service_EventUnseen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ContactList",
			Handler:       _Service_ContactList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConversationList",
			Handler:       _Service_ConversationList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DevicePushConfigList",
			Handler:       _Service_DevicePushConfigList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LogStream",
			Handler:       _Service_LogStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LogfileList",
			Handler:       _Service_LogfileList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LogfileRead",
			Handler:       _Service_LogfileRead_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorBandwidth",
			Handler:       _Service_MonitorBandwidth_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorPeers",
			Handler:       _Service_MonitorPeers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/node/service.proto",
}

func (m *Badge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Badge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Badge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestErrorInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestErrorInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestErrorInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintService(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtocolsOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolsOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtocolsOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Protocols) > 0 {
		for iNdEx := len(m.Protocols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Protocols[iNdEx])
			copy(dAtA[i:], m.Protocols[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.Protocols[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppVersionOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppVersionOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppVersionOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintService(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PingDestination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingDestination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingDestination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintService(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IntroText) > 0 {
		i -= len(m.IntroText)
		copy(dAtA[i:], m.IntroText)
		i = encodeVarintService(dAtA, i, uint64(len(m.IntroText)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContactOverrideDisplayName) > 0 {
		i -= len(m.ContactOverrideDisplayName)
		copy(dAtA[i:], m.ContactOverrideDisplayName)
		i = encodeVarintService(dAtA, i, uint64(len(m.ContactOverrideDisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContactID) > 0 {
		i -= len(m.ContactID)
		copy(dAtA[i:], m.ContactID)
		i = encodeVarintService(dAtA, i, uint64(len(m.ContactID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactAcceptRequestInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactAcceptRequestInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactAcceptRequestInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactID) > 0 {
		i -= len(m.ContactID)
		copy(dAtA[i:], m.ContactID)
		i = encodeVarintService(dAtA, i, uint64(len(m.ContactID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationAddMessageInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationAddMessageInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationAddMessageInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventStreamInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStreamInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStreamInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Entity != nil {
		{
			size, err := m.Entity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Operation != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitLog_Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitLog_Entity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitLog_Entity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SenderAlias != nil {
		{
			size, err := m.SenderAlias.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf2
	}
	if m.EventDispatch != nil {
		{
			size, err := m.EventDispatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xea
	}
	if m.DevicePushIdentifier != nil {
		{
			size, err := m.DevicePushIdentifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	if m.DevicePushConfig != nil {
		{
			size, err := m.DevicePushConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if m.ConversationMember != nil {
		{
			size, err := m.ConversationMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if m.Device != nil {
		{
			size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if m.Contact != nil {
		{
			size, err := m.Contact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}

func (m *EventListInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventListInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventListInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Paginate != nil {
		{
			size, err := m.Paginate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.OnlyWithoutSeenAt != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.OnlyWithoutSeenAt))
		i--
		dAtA[i] = 0x18
	}
	if m.OnlyWithoutAckedAt != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.OnlyWithoutAckedAt))
		i--
		dAtA[i] = 0x10
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactListInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactListInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactListInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Paginate != nil {
		{
			size, err := m.Paginate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationListInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationListInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationListInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Paginate != nil {
		{
			size, err := m.Paginate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationCreateInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationCreateInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationCreateInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Kind != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintService(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConversationManageMembersInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationManageMembersInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationManageMembersInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DevicePushConfigCreateInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicePushConfigCreateInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevicePushConfigCreateInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PushType != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.PushType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PushID) > 0 {
		i -= len(m.PushID)
		copy(dAtA[i:], m.PushID)
		i = encodeVarintService(dAtA, i, uint64(len(m.PushID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RelayPubkey) > 0 {
		i -= len(m.RelayPubkey)
		copy(dAtA[i:], m.RelayPubkey)
		i = encodeVarintService(dAtA, i, uint64(len(m.RelayPubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pagination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pagination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pagination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Before) > 0 {
		i -= len(m.Before)
		copy(dAtA[i:], m.Before)
		i = encodeVarintService(dAtA, i, uint64(len(m.Before)))
		i--
		dAtA[i] = 0x72
	}
	if m.Last != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Last))
		i--
		dAtA[i] = 0x68
	}
	if len(m.After) > 0 {
		i -= len(m.After)
		copy(dAtA[i:], m.After)
		i = encodeVarintService(dAtA, i, uint64(len(m.After)))
		i--
		dAtA[i] = 0x62
	}
	if m.First != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.First))
		i--
		dAtA[i] = 0x58
	}
	if m.OrderDesc {
		i--
		if m.OrderDesc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintService(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IntegrationTestInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntegrationTestInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntegrationTestInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IntegrationTestOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntegrationTestOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntegrationTestOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n23, err23 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.FinishedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.FinishedAt):])
	if err23 != nil {
		return 0, err23
	}
	i -= n23
	i = encodeVarintService(dAtA, i, uint64(n23))
	i--
	dAtA[i] = 0x2a
	n24, err24 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt):])
	if err24 != nil {
		return 0, err24
	}
	i -= n24
	i = encodeVarintService(dAtA, i, uint64(n24))
	i--
	dAtA[i] = 0x22
	if len(m.Verbose) > 0 {
		i -= len(m.Verbose)
		copy(dAtA[i:], m.Verbose)
		i = encodeVarintService(dAtA, i, uint64(len(m.Verbose)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Void) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Void) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Void) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.T {
		i--
		if m.T {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ret {
		i--
		if m.Ret {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventIDInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventIDInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventIDInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EventID) > 0 {
		i -= len(m.EventID)
		copy(dAtA[i:], m.EventID)
		i = encodeVarintService(dAtA, i, uint64(len(m.EventID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogStreamInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStreamInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStreamInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Last != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Last))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Namespaces) > 0 {
		i -= len(m.Namespaces)
		copy(dAtA[i:], m.Namespaces)
		i = encodeVarintService(dAtA, i, uint64(len(m.Namespaces)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LogLevel) > 0 {
		i -= len(m.LogLevel)
		copy(dAtA[i:], m.LogLevel)
		i = encodeVarintService(dAtA, i, uint64(len(m.LogLevel)))
		i--
		dAtA[i] = 0x12
	}
	if m.Continues {
		i--
		if m.Continues {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Line) > 0 {
		i -= len(m.Line)
		copy(dAtA[i:], m.Line)
		i = encodeVarintService(dAtA, i, uint64(len(m.Line)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogfileEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogfileEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogfileEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		n25, err25 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err25 != nil {
			return 0, err25
		}
		i -= n25
		i = encodeVarintService(dAtA, i, uint64(n25))
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != nil {
		n26, err26 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err26 != nil {
			return 0, err26
		}
		i -= n26
		i = encodeVarintService(dAtA, i, uint64(n26))
		i--
		dAtA[i] = 0x1a
	}
	if m.Filesize != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Filesize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintService(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogfileReadInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogfileReadInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogfileReadInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintService(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Attributes) > 0 {
		i -= len(m.Attributes)
		copy(dAtA[i:], m.Attributes)
		i = encodeVarintService(dAtA, i, uint64(len(m.Attributes)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Badge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovService(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestErrorInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtocolsOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Protocols) > 0 {
		for _, s := range m.Protocols {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppVersionOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingDestination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContactID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ContactOverrideDisplayName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.IntroText)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactAcceptRequestInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContactID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConversationAddMessageInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventStreamInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommitLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != 0 {
		n += 1 + sovService(uint64(m.Operation))
	}
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommitLog_Entity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.ConversationMember != nil {
		l = m.ConversationMember.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.DevicePushConfig != nil {
		l = m.DevicePushConfig.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.DevicePushIdentifier != nil {
		l = m.DevicePushIdentifier.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.EventDispatch != nil {
		l = m.EventDispatch.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.SenderAlias != nil {
		l = m.SenderAlias.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventListInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.OnlyWithoutAckedAt != 0 {
		n += 1 + sovService(uint64(m.OnlyWithoutAckedAt))
	}
	if m.OnlyWithoutSeenAt != 0 {
		n += 1 + sovService(uint64(m.OnlyWithoutSeenAt))
	}
	if m.Paginate != nil {
		l = m.Paginate.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactListInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Paginate != nil {
		l = m.Paginate.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConversationListInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Paginate != nil {
		l = m.Paginate.Size()
		n += 2 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConversationCreateInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovService(uint64(m.Kind))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConversationManageMembersInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DevicePushConfigCreateInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RelayPubkey)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.PushID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.PushType != 0 {
		n += 1 + sovService(uint64(m.PushType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Pagination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.OrderDesc {
		n += 2
	}
	if m.First != 0 {
		n += 1 + sovService(uint64(m.First))
	}
	l = len(m.After)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Last != 0 {
		n += 1 + sovService(uint64(m.Last))
	}
	l = len(m.Before)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IntegrationTestInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IntegrationTestOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Success {
		n += 2
	}
	l = len(m.Verbose)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovService(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.FinishedAt)
	n += 1 + l + sovService(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Void) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventIDInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogStreamInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Continues {
		n += 2
	}
	l = len(m.LogLevel)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Namespaces)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Last != 0 {
		n += 1 + sovService(uint64(m.Last))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Line)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogfileEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Filesize != 0 {
		n += 1 + sovService(uint64(m.Filesize))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovService(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogfileReadInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovService(uint64(m.Kind))
	}
	l = len(m.Attributes)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Badge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Badge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Badge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestErrorInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestErrorInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestErrorInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtocolsOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolsOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolsOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocols = append(m.Protocols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppVersionOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppVersionOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppVersionOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingDestination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingDestination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingDestination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactOverrideDisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactOverrideDisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntroText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntroText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactAcceptRequestInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactAcceptRequestInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactAcceptRequestInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationAddMessageInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationAddMessageInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationAddMessageInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &entity.Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &entity.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStreamInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStreamInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStreamInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &entity.Event{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= CommitLog_Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &CommitLog_Entity{}
			}
			if err := m.Entity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitLog_Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &entity.Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &entity.Contact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &entity.Device{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &entity.Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConversationMember == nil {
				m.ConversationMember = &entity.ConversationMember{}
			}
			if err := m.ConversationMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &entity.Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePushConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DevicePushConfig == nil {
				m.DevicePushConfig = &entity.DevicePushConfig{}
			}
			if err := m.DevicePushConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePushIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DevicePushIdentifier == nil {
				m.DevicePushIdentifier = &entity.DevicePushIdentifier{}
			}
			if err := m.DevicePushIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventDispatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventDispatch == nil {
				m.EventDispatch = &entity.EventDispatch{}
			}
			if err := m.EventDispatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAlias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderAlias == nil {
				m.SenderAlias = &entity.SenderAlias{}
			}
			if err := m.SenderAlias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventListInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventListInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventListInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &entity.Event{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyWithoutAckedAt", wireType)
			}
			m.OnlyWithoutAckedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlyWithoutAckedAt |= NullableTrueFalse(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyWithoutSeenAt", wireType)
			}
			m.OnlyWithoutSeenAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlyWithoutSeenAt |= NullableTrueFalse(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginate == nil {
				m.Paginate = &Pagination{}
			}
			if err := m.Paginate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactListInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactListInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactListInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &entity.Contact{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginate == nil {
				m.Paginate = &Pagination{}
			}
			if err := m.Paginate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &entity.Contact{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationListInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationListInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationListInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &entity.Conversation{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginate == nil {
				m.Paginate = &Pagination{}
			}
			if err := m.Paginate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationCreateInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationCreateInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationCreateInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &entity.Contact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= entity.Conversation_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationManageMembersInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationManageMembersInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationManageMembersInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &entity.Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &entity.Contact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevicePushConfigCreateInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicePushConfigCreateInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicePushConfigCreateInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushID = append(m.PushID[:0], dAtA[iNdEx:postIndex]...)
			if m.PushID == nil {
				m.PushID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushType", wireType)
			}
			m.PushType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushType |= push.DevicePushType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pagination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pagination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pagination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderDesc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderDesc = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			m.First = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.First |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.After = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			m.Last = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Last |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Before = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntegrationTestInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntegrationTestInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntegrationTestInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntegrationTestOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntegrationTestOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntegrationTestOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verbose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verbose = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.FinishedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Void) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Void: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Void: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.T = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventIDInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventIDInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventIDInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStreamInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStreamInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStreamInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Continues", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Continues = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			m.Last = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Last |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Line = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogfileEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogfileEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogfileEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			m.Filesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Filesize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogfileReadInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogfileReadInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogfileReadInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes[:0], dAtA[iNdEx:postIndex]...)
			if m.Attributes == nil {
				m.Attributes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)
