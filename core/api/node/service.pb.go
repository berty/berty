// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/node/service.proto

/*
	Package node is a generated protocol buffer package.

	It is generated from these files:
		api/node/service.proto

	It has these top-level messages:
		ContactRequestInput
		Void
*/
package node

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import berty_p2p1 "github.com/berty/berty/core/api/p2p"
import berty_entity "github.com/berty/berty/core/api/entity"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ContactRequestInput struct {
	Contact      *berty_entity.Contact `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
	IntroMessage string                `protobuf:"bytes,2,opt,name=intro_message,json=introMessage,proto3" json:"intro_message,omitempty"`
}

func (m *ContactRequestInput) Reset()                    { *m = ContactRequestInput{} }
func (m *ContactRequestInput) String() string            { return proto.CompactTextString(m) }
func (*ContactRequestInput) ProtoMessage()               {}
func (*ContactRequestInput) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *ContactRequestInput) GetContact() *berty_entity.Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *ContactRequestInput) GetIntroMessage() string {
	if m != nil {
		return m.IntroMessage
	}
	return ""
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func init() {
	proto.RegisterType((*ContactRequestInput)(nil), "berty.node.ContactRequestInput")
	proto.RegisterType((*Void)(nil), "berty.node.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	EventStream(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_EventStreamClient, error)
	EventList(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_EventListClient, error)
	ContactRequest(ctx context.Context, in *ContactRequestInput, opts ...grpc.CallOption) (*berty_entity.Contact, error)
	ContactAcceptRequest(ctx context.Context, in *berty_entity.Contact, opts ...grpc.CallOption) (*berty_entity.Contact, error)
	ContactRemove(ctx context.Context, in *berty_entity.Contact, opts ...grpc.CallOption) (*berty_entity.Contact, error)
	ContactUpdate(ctx context.Context, in *berty_entity.Contact, opts ...grpc.CallOption) (*berty_entity.Contact, error)
	ContactList(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_ContactListClient, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) EventStream(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_EventStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Service_serviceDesc.Streams[0], c.cc, "/berty.node.Service/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_EventStreamClient interface {
	Recv() (*berty_p2p1.Event, error)
	grpc.ClientStream
}

type serviceEventStreamClient struct {
	grpc.ClientStream
}

func (x *serviceEventStreamClient) Recv() (*berty_p2p1.Event, error) {
	m := new(berty_p2p1.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) EventList(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_EventListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Service_serviceDesc.Streams[1], c.cc, "/berty.node.Service/EventList", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceEventListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_EventListClient interface {
	Recv() (*berty_p2p1.Event, error)
	grpc.ClientStream
}

type serviceEventListClient struct {
	grpc.ClientStream
}

func (x *serviceEventListClient) Recv() (*berty_p2p1.Event, error) {
	m := new(berty_p2p1.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) ContactRequest(ctx context.Context, in *ContactRequestInput, opts ...grpc.CallOption) (*berty_entity.Contact, error) {
	out := new(berty_entity.Contact)
	err := grpc.Invoke(ctx, "/berty.node.Service/ContactRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactAcceptRequest(ctx context.Context, in *berty_entity.Contact, opts ...grpc.CallOption) (*berty_entity.Contact, error) {
	out := new(berty_entity.Contact)
	err := grpc.Invoke(ctx, "/berty.node.Service/ContactAcceptRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactRemove(ctx context.Context, in *berty_entity.Contact, opts ...grpc.CallOption) (*berty_entity.Contact, error) {
	out := new(berty_entity.Contact)
	err := grpc.Invoke(ctx, "/berty.node.Service/ContactRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactUpdate(ctx context.Context, in *berty_entity.Contact, opts ...grpc.CallOption) (*berty_entity.Contact, error) {
	out := new(berty_entity.Contact)
	err := grpc.Invoke(ctx, "/berty.node.Service/ContactUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContactList(ctx context.Context, in *Void, opts ...grpc.CallOption) (Service_ContactListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Service_serviceDesc.Streams[2], c.cc, "/berty.node.Service/ContactList", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceContactListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_ContactListClient interface {
	Recv() (*berty_entity.Contact, error)
	grpc.ClientStream
}

type serviceContactListClient struct {
	grpc.ClientStream
}

func (x *serviceContactListClient) Recv() (*berty_entity.Contact, error) {
	m := new(berty_entity.Contact)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Service service

type ServiceServer interface {
	EventStream(*Void, Service_EventStreamServer) error
	EventList(*Void, Service_EventListServer) error
	ContactRequest(context.Context, *ContactRequestInput) (*berty_entity.Contact, error)
	ContactAcceptRequest(context.Context, *berty_entity.Contact) (*berty_entity.Contact, error)
	ContactRemove(context.Context, *berty_entity.Contact) (*berty_entity.Contact, error)
	ContactUpdate(context.Context, *berty_entity.Contact) (*berty_entity.Contact, error)
	ContactList(*Void, Service_ContactListServer) error
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).EventStream(m, &serviceEventStreamServer{stream})
}

type Service_EventStreamServer interface {
	Send(*berty_p2p1.Event) error
	grpc.ServerStream
}

type serviceEventStreamServer struct {
	grpc.ServerStream
}

func (x *serviceEventStreamServer) Send(m *berty_p2p1.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_EventList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).EventList(m, &serviceEventListServer{stream})
}

type Service_EventListServer interface {
	Send(*berty_p2p1.Event) error
	grpc.ServerStream
}

type serviceEventListServer struct {
	grpc.ServerStream
}

func (x *serviceEventListServer) Send(m *berty_p2p1.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_ContactRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactRequest(ctx, req.(*ContactRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactAcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(berty_entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactAcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactAcceptRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactAcceptRequest(ctx, req.(*berty_entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(berty_entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactRemove(ctx, req.(*berty_entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(berty_entity.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContactUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.node.Service/ContactUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContactUpdate(ctx, req.(*berty_entity.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContactList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).ContactList(m, &serviceContactListServer{stream})
}

type Service_ContactListServer interface {
	Send(*berty_entity.Contact) error
	grpc.ServerStream
}

type serviceContactListServer struct {
	grpc.ServerStream
}

func (x *serviceContactListServer) Send(m *berty_entity.Contact) error {
	return x.ServerStream.SendMsg(m)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "berty.node.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContactRequest",
			Handler:    _Service_ContactRequest_Handler,
		},
		{
			MethodName: "ContactAcceptRequest",
			Handler:    _Service_ContactAcceptRequest_Handler,
		},
		{
			MethodName: "ContactRemove",
			Handler:    _Service_ContactRemove_Handler,
		},
		{
			MethodName: "ContactUpdate",
			Handler:    _Service_ContactUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _Service_EventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventList",
			Handler:       _Service_EventList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ContactList",
			Handler:       _Service_ContactList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/node/service.proto",
}

func (m *ContactRequestInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Contact != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Contact.Size()))
		n1, err := m.Contact.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.IntroMessage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.IntroMessage)))
		i += copy(dAtA[i:], m.IntroMessage)
	}
	return i, nil
}

func (m *Void) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Void) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ContactRequestInput) Size() (n int) {
	var l int
	_ = l
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.IntroMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *Void) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContactRequestInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &berty_entity.Contact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntroMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntroMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Void) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Void: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Void: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/node/service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x5d, 0x95, 0x96, 0x4e, 0xad, 0xc8, 0x56, 0xa5, 0xe4, 0x10, 0x4b, 0xf5, 0xd0, 0xd3,
	0xa6, 0xa6, 0x20, 0x5e, 0x3c, 0xf8, 0x0f, 0x14, 0xf4, 0xd2, 0xa2, 0x07, 0x2f, 0x92, 0x6e, 0x87,
	0xba, 0x48, 0xb2, 0x6b, 0x32, 0x2d, 0xf4, 0x4d, 0x7c, 0x15, 0xdf, 0xc0, 0xa3, 0x8f, 0x20, 0xf5,
	0x45, 0x24, 0xff, 0xaa, 0x42, 0x0a, 0xea, 0x25, 0x0c, 0xdf, 0x7e, 0xbf, 0x99, 0x7c, 0xc3, 0xc0,
	0xb6, 0x67, 0x94, 0x13, 0xe8, 0x21, 0x3a, 0x11, 0x86, 0x13, 0x25, 0x51, 0x98, 0x50, 0x93, 0xe6,
	0x30, 0xc0, 0x90, 0xa6, 0x22, 0x7e, 0xb1, 0xea, 0xb1, 0xc7, 0xb8, 0xc6, 0xc1, 0x09, 0x06, 0x94,
	0x1a, 0xac, 0x46, 0x2c, 0x62, 0x40, 0x8a, 0xa6, 0x8e, 0xd4, 0x01, 0x79, 0x32, 0x7b, 0x69, 0x3d,
	0x42, 0xfd, 0x34, 0x15, 0x7a, 0xf8, 0x34, 0xc6, 0x88, 0x2e, 0x03, 0x33, 0x26, 0xee, 0x40, 0x39,
	0xf3, 0x35, 0x58, 0x93, 0xb5, 0xab, 0xee, 0x96, 0x48, 0x67, 0xa4, 0x4d, 0x44, 0xce, 0xe4, 0x2e,
	0xbe, 0x0b, 0x35, 0x15, 0x50, 0xa8, 0xef, 0x7d, 0x8c, 0x22, 0x6f, 0x84, 0x8d, 0xe5, 0x26, 0x6b,
	0x57, 0x7a, 0x6b, 0x89, 0x78, 0x9d, 0x6a, 0xad, 0x12, 0xac, 0xde, 0x6a, 0x35, 0x74, 0x5f, 0x56,
	0xa0, 0xdc, 0x4f, 0x13, 0xf0, 0x2e, 0x54, 0xcf, 0xe3, 0x3f, 0xed, 0x53, 0x88, 0x9e, 0xcf, 0x37,
	0xc4, 0x57, 0x16, 0x11, 0x9b, 0xad, 0x5c, 0x31, 0xae, 0x11, 0x89, 0xb3, 0xc3, 0xf8, 0x3e, 0x54,
	0x92, 0xf2, 0x4a, 0x45, 0xf4, 0x4b, 0xe4, 0x02, 0xd6, 0x7f, 0x06, 0xe5, 0x3b, 0xdf, 0xb9, 0x82,
	0x25, 0x58, 0xc5, 0x99, 0xf9, 0x19, 0x6c, 0x66, 0xe5, 0xb1, 0x94, 0x68, 0xe6, 0xfd, 0x8a, 0xed,
	0x8b, 0xba, 0x1c, 0x41, 0x6d, 0x3e, 0xd3, 0xd7, 0x13, 0xfc, 0x37, 0x7e, 0x63, 0x86, 0x1e, 0xfd,
	0x15, 0x3f, 0x84, 0x6a, 0x56, 0x2e, 0x58, 0x61, 0x31, 0xd7, 0x61, 0x27, 0x07, 0xaf, 0x33, 0x9b,
	0xbd, 0xcd, 0x6c, 0xf6, 0x3e, 0xb3, 0xd9, 0xf3, 0x87, 0xbd, 0x74, 0xb7, 0x37, 0x52, 0xf4, 0x30,
	0x1e, 0x08, 0xa9, 0x7d, 0x27, 0x81, 0xb2, 0xaf, 0xd4, 0x21, 0x3a, 0xf9, 0xc5, 0x0e, 0x4a, 0xc9,
	0xbd, 0x75, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x57, 0x14, 0x3c, 0x2d, 0xc4, 0x02, 0x00, 0x00,
}
