// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	strconv "strconv"
	sync "sync"
	time "time"

	node "berty.tech/core/api/node"
	models "berty.tech/core/api/node/graphql/models"
	p2p "berty.tech/core/api/p2p"
	entity "berty.tech/core/entity"
	deviceinfo "berty.tech/core/pkg/deviceinfo"
	graphql "github.com/99designs/gqlgen/graphql"
	introspection "github.com/99designs/gqlgen/graphql/introspection"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	gqlparser "github.com/vektah/gqlparser"
	ast "github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	BertyEntityContact() BertyEntityContactResolver
	BertyEntityContactPayload() BertyEntityContactPayloadResolver
	BertyEntityConversation() BertyEntityConversationResolver
	BertyEntityConversationMember() BertyEntityConversationMemberResolver
	BertyEntityConversationMemberPayload() BertyEntityConversationMemberPayloadResolver
	BertyEntityConversationPayload() BertyEntityConversationPayloadResolver
	BertyEntityDevice() BertyEntityDeviceResolver
	BertyP2pEvent() BertyP2pEventResolver
	BertyP2pEventPayload() BertyP2pEventPayloadResolver
	GoogleProtobufFieldDescriptorProto() GoogleProtobufFieldDescriptorProtoResolver
	GoogleProtobufFieldOptions() GoogleProtobufFieldOptionsResolver
	GoogleProtobufFileOptions() GoogleProtobufFileOptionsResolver
	GoogleProtobufMethodOptions() GoogleProtobufMethodOptionsResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	BertyEntityContact struct {
		Id                    func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		Sigchain              func(childComplexity int) int
		Status                func(childComplexity int) int
		Devices               func(childComplexity int) int
		DisplayName           func(childComplexity int) int
		DisplayStatus         func(childComplexity int) int
		OverrideDisplayName   func(childComplexity int) int
		OverrideDisplayStatus func(childComplexity int) int
	}

	BertyEntityContactPayload struct {
		Id                    func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		Sigchain              func(childComplexity int) int
		Status                func(childComplexity int) int
		Devices               func(childComplexity int) int
		DisplayName           func(childComplexity int) int
		DisplayStatus         func(childComplexity int) int
		OverrideDisplayName   func(childComplexity int) int
		OverrideDisplayStatus func(childComplexity int) int
	}

	BertyEntityConversation struct {
		Id        func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Title     func(childComplexity int) int
		Topic     func(childComplexity int) int
		Members   func(childComplexity int) int
	}

	BertyEntityConversationMember struct {
		Id             func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		Status         func(childComplexity int) int
		Contact        func(childComplexity int) int
		ConversationId func(childComplexity int) int
		ContactId      func(childComplexity int) int
	}

	BertyEntityConversationMemberPayload struct {
		Id             func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		Status         func(childComplexity int) int
		Contact        func(childComplexity int) int
		ConversationId func(childComplexity int) int
		ContactId      func(childComplexity int) int
	}

	BertyEntityConversationPayload struct {
		Id        func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Title     func(childComplexity int) int
		Topic     func(childComplexity int) int
		Members   func(childComplexity int) int
	}

	BertyEntityDevice struct {
		Id         func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		Name       func(childComplexity int) int
		Status     func(childComplexity int) int
		ApiVersion func(childComplexity int) int
		ContactId  func(childComplexity int) int
	}

	BertyEntityMessage struct {
		Text func(childComplexity int) int
	}

	BertyEntitySenderAlias struct {
		Id              func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		Status          func(childComplexity int) int
		OriginDeviceId  func(childComplexity int) int
		ContactId       func(childComplexity int) int
		ConversationId  func(childComplexity int) int
		AliasIdentifier func(childComplexity int) int
		Used            func(childComplexity int) int
	}

	BertyNodeAppVersionPayload struct {
		Version func(childComplexity int) int
	}

	BertyNodeContactEdge struct {
		Node   func(childComplexity int) int
		Cursor func(childComplexity int) int
	}

	BertyNodeContactListConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BertyNodeConversationEdge struct {
		Node   func(childComplexity int) int
		Cursor func(childComplexity int) int
	}

	BertyNodeConversationListConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BertyNodeEventEdge struct {
		Node   func(childComplexity int) int
		Cursor func(childComplexity int) int
	}

	BertyNodeEventListConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BertyNodeIntegrationTestPayload struct {
		Name       func(childComplexity int) int
		Success    func(childComplexity int) int
		Verbose    func(childComplexity int) int
		StartedAt  func(childComplexity int) int
		FinishedAt func(childComplexity int) int
	}

	BertyNodePageInfo struct {
		StartCursor     func(childComplexity int) int
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		Count           func(childComplexity int) int
	}

	BertyNodePagination struct {
		OrderBy   func(childComplexity int) int
		OrderDesc func(childComplexity int) int
		First     func(childComplexity int) int
		After     func(childComplexity int) int
		Last      func(childComplexity int) int
		Before    func(childComplexity int) int
	}

	BertyNodePingDestination struct {
		Destination func(childComplexity int) int
	}

	BertyNodeProtocolsPayload struct {
		Protocols func(childComplexity int) int
	}

	BertyNodeVoid struct {
		T func(childComplexity int) int
	}

	BertyNodeVoidPayload struct {
		T func(childComplexity int) int
	}

	BertyP2pAckAttrs struct {
		Ids    func(childComplexity int) int
		ErrMsg func(childComplexity int) int
	}

	BertyP2pBandwidthStats struct {
		Id       func(childComplexity int) int
		TotalIn  func(childComplexity int) int
		TotalOut func(childComplexity int) int
		RateIn   func(childComplexity int) int
		RateOut  func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	BertyP2pBandwidthStatsPayload struct {
		Id       func(childComplexity int) int
		TotalIn  func(childComplexity int) int
		TotalOut func(childComplexity int) int
		RateIn   func(childComplexity int) int
		RateOut  func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	BertyP2pContactRequestAcceptedAttrs struct {
		T func(childComplexity int) int
	}

	BertyP2pContactRequestAttrs struct {
		Me        func(childComplexity int) int
		IntroText func(childComplexity int) int
	}

	BertyP2pContactShareAttrs struct {
		Contact func(childComplexity int) int
	}

	BertyP2pContactShareMeAttrs struct {
		Me func(childComplexity int) int
	}

	BertyP2pConversationInviteAttrs struct {
		Conversation func(childComplexity int) int
	}

	BertyP2pConversationNewMessageAttrs struct {
		Message func(childComplexity int) int
	}

	BertyP2pDevtoolsMapsetAttrs struct {
		Key func(childComplexity int) int
		Val func(childComplexity int) int
	}

	BertyP2pEvent struct {
		Id                 func(childComplexity int) int
		SenderId           func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		SentAt             func(childComplexity int) int
		ReceivedAt         func(childComplexity int) int
		AckedAt            func(childComplexity int) int
		Direction          func(childComplexity int) int
		SenderApiVersion   func(childComplexity int) int
		ReceiverApiVersion func(childComplexity int) int
		ReceiverId         func(childComplexity int) int
		Kind               func(childComplexity int) int
		Attributes         func(childComplexity int) int
		ConversationId     func(childComplexity int) int
	}

	BertyP2pEventPayload struct {
		Id                 func(childComplexity int) int
		SenderId           func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		SentAt             func(childComplexity int) int
		ReceivedAt         func(childComplexity int) int
		AckedAt            func(childComplexity int) int
		Direction          func(childComplexity int) int
		SenderApiVersion   func(childComplexity int) int
		ReceiverApiVersion func(childComplexity int) int
		ReceiverId         func(childComplexity int) int
		Kind               func(childComplexity int) int
		Attributes         func(childComplexity int) int
		ConversationId     func(childComplexity int) int
	}

	BertyP2pPeer struct {
		Id         func(childComplexity int) int
		Addrs      func(childComplexity int) int
		Connection func(childComplexity int) int
	}

	BertyP2pPeerPayload struct {
		Id         func(childComplexity int) int
		Addrs      func(childComplexity int) int
		Connection func(childComplexity int) int
	}

	BertyP2pPeers struct {
		List func(childComplexity int) int
	}

	BertyP2pPeersPayload struct {
		List func(childComplexity int) int
	}

	BertyP2pPingAttrs struct {
		T func(childComplexity int) int
	}

	BertyP2pSenderAliasUpdateAttrs struct {
		Aliases func(childComplexity int) int
	}

	BertyP2pSentAttrs struct {
		Ids func(childComplexity int) int
	}

	BertyPkgDeviceinfoDeviceInfo struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	BertyPkgDeviceinfoDeviceInfos struct {
		Infos func(childComplexity int) int
	}

	BertyPkgDeviceinfoDeviceInfosPayload struct {
		Infos func(childComplexity int) int
	}

	GoogleProtobufDescriptorProto struct {
		Name           func(childComplexity int) int
		Field          func(childComplexity int) int
		Extension      func(childComplexity int) int
		NestedType     func(childComplexity int) int
		EnumType       func(childComplexity int) int
		ExtensionRange func(childComplexity int) int
		OneofDecl      func(childComplexity int) int
		Options        func(childComplexity int) int
		ReservedRange  func(childComplexity int) int
		ReservedName   func(childComplexity int) int
	}

	GoogleProtobufDescriptorProtoExtensionRange struct {
		Start   func(childComplexity int) int
		End     func(childComplexity int) int
		Options func(childComplexity int) int
	}

	GoogleProtobufDescriptorProtoReservedRange struct {
		Start func(childComplexity int) int
		End   func(childComplexity int) int
	}

	GoogleProtobufEnumDescriptorProto struct {
		Name          func(childComplexity int) int
		Value         func(childComplexity int) int
		Options       func(childComplexity int) int
		ReservedRange func(childComplexity int) int
		ReservedName  func(childComplexity int) int
	}

	GoogleProtobufEnumDescriptorProtoEnumReservedRange struct {
		Start func(childComplexity int) int
		End   func(childComplexity int) int
	}

	GoogleProtobufEnumOptions struct {
		AllowAlias          func(childComplexity int) int
		Deprecated          func(childComplexity int) int
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufEnumValueDescriptorProto struct {
		Name    func(childComplexity int) int
		Number  func(childComplexity int) int
		Options func(childComplexity int) int
	}

	GoogleProtobufEnumValueOptions struct {
		Deprecated          func(childComplexity int) int
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufExtensionRangeOptions struct {
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufFieldDescriptorProto struct {
		Name         func(childComplexity int) int
		Number       func(childComplexity int) int
		Label        func(childComplexity int) int
		Type         func(childComplexity int) int
		TypeName     func(childComplexity int) int
		Extendee     func(childComplexity int) int
		DefaultValue func(childComplexity int) int
		OneofIndex   func(childComplexity int) int
		JsonName     func(childComplexity int) int
		Options      func(childComplexity int) int
	}

	GoogleProtobufFieldOptions struct {
		Ctype               func(childComplexity int) int
		Packed              func(childComplexity int) int
		Jstype              func(childComplexity int) int
		Lazy                func(childComplexity int) int
		Deprecated          func(childComplexity int) int
		Weak                func(childComplexity int) int
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufFileDescriptorProto struct {
		Name             func(childComplexity int) int
		Package          func(childComplexity int) int
		Dependency       func(childComplexity int) int
		PublicDependency func(childComplexity int) int
		WeakDependency   func(childComplexity int) int
		MessageType      func(childComplexity int) int
		EnumType         func(childComplexity int) int
		Service          func(childComplexity int) int
		Extension        func(childComplexity int) int
		Options          func(childComplexity int) int
		SourceCodeInfo   func(childComplexity int) int
		Syntax           func(childComplexity int) int
	}

	GoogleProtobufFileDescriptorSet struct {
		File func(childComplexity int) int
	}

	GoogleProtobufFileOptions struct {
		JavaPackage               func(childComplexity int) int
		JavaOuterClassname        func(childComplexity int) int
		JavaMultipleFiles         func(childComplexity int) int
		JavaGenerateEqualsAndHash func(childComplexity int) int
		JavaStringCheckUtf8       func(childComplexity int) int
		OptimizeFor               func(childComplexity int) int
		GoPackage                 func(childComplexity int) int
		CcGenericServices         func(childComplexity int) int
		JavaGenericServices       func(childComplexity int) int
		PyGenericServices         func(childComplexity int) int
		PhpGenericServices        func(childComplexity int) int
		Deprecated                func(childComplexity int) int
		CcEnableArenas            func(childComplexity int) int
		ObjcClassPrefix           func(childComplexity int) int
		CsharpNamespace           func(childComplexity int) int
		SwiftPrefix               func(childComplexity int) int
		PhpClassPrefix            func(childComplexity int) int
		PhpNamespace              func(childComplexity int) int
		PhpMetadataNamespace      func(childComplexity int) int
		RubyPackage               func(childComplexity int) int
		UninterpretedOption       func(childComplexity int) int
	}

	GoogleProtobufGeneratedCodeInfo struct {
		Annotation func(childComplexity int) int
	}

	GoogleProtobufGeneratedCodeInfoAnnotation struct {
		Path       func(childComplexity int) int
		SourceFile func(childComplexity int) int
		Begin      func(childComplexity int) int
		End        func(childComplexity int) int
	}

	GoogleProtobufMessageOptions struct {
		MessageSetWireFormat         func(childComplexity int) int
		NoStandardDescriptorAccessor func(childComplexity int) int
		Deprecated                   func(childComplexity int) int
		MapEntry                     func(childComplexity int) int
		UninterpretedOption          func(childComplexity int) int
	}

	GoogleProtobufMethodDescriptorProto struct {
		Name            func(childComplexity int) int
		InputType       func(childComplexity int) int
		OutputType      func(childComplexity int) int
		Options         func(childComplexity int) int
		ClientStreaming func(childComplexity int) int
		ServerStreaming func(childComplexity int) int
	}

	GoogleProtobufMethodOptions struct {
		Deprecated          func(childComplexity int) int
		IdempotencyLevel    func(childComplexity int) int
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufOneofDescriptorProto struct {
		Name    func(childComplexity int) int
		Options func(childComplexity int) int
	}

	GoogleProtobufOneofOptions struct {
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufServiceDescriptorProto struct {
		Name    func(childComplexity int) int
		Method  func(childComplexity int) int
		Options func(childComplexity int) int
	}

	GoogleProtobufServiceOptions struct {
		Deprecated          func(childComplexity int) int
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufSourceCodeInfo struct {
		Location func(childComplexity int) int
	}

	GoogleProtobufSourceCodeInfoLocation struct {
		Path                    func(childComplexity int) int
		Span                    func(childComplexity int) int
		LeadingComments         func(childComplexity int) int
		TrailingComments        func(childComplexity int) int
		LeadingDetachedComments func(childComplexity int) int
	}

	GoogleProtobufUninterpretedOption struct {
		Name             func(childComplexity int) int
		IdentifierValue  func(childComplexity int) int
		PositiveIntValue func(childComplexity int) int
		NegativeIntValue func(childComplexity int) int
		DoubleValue      func(childComplexity int) int
		StringValue      func(childComplexity int) int
		AggregateValue   func(childComplexity int) int
	}

	GoogleProtobufUninterpretedOptionNamePart struct {
		NamePart    func(childComplexity int) int
		IsExtension func(childComplexity int) int
	}

	Mutation struct {
		ContactRequest         func(childComplexity int, contact *entity.Contact, introText string) int
		ContactAcceptRequest   func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) int
		ContactRemove          func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) int
		ContactUpdate          func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) int
		ConversationCreate     func(childComplexity int, contacts []*entity.Contact, title string, topic string) int
		ConversationInvite     func(childComplexity int, conversation *entity.Conversation, members []*entity.ConversationMember) int
		ConversationExclude    func(childComplexity int, conversation *entity.Conversation, members []*entity.ConversationMember) int
		ConversationAddMessage func(childComplexity int, conversation *entity.Conversation, message *entity.Message) int
		GenerateFakeData       func(childComplexity int, T bool) int
		RunIntegrationTests    func(childComplexity int, name string) int
	}

	Query struct {
		Node                  func(childComplexity int, id string) int
		Id                    func(childComplexity int, T bool) int
		EventList             func(childComplexity int, filter *p2p.Event, onlyWithoutAckedAt *int32, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) int
		GetEvent              func(childComplexity int, id string, senderId string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sentAt *time.Time, receivedAt *time.Time, ackedAt *time.Time, direction *int32, senderApiVersion uint32, receiverApiVersion uint32, receiverId string, kind *int32, attributes []byte, conversationId string) int
		ContactList           func(childComplexity int, filter *entity.Contact, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) int
		GetContact            func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) int
		ConversationList      func(childComplexity int, filter *entity.Conversation, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) int
		GetConversation       func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, title string, topic string, members []*entity.ConversationMember) int
		GetConversationMember func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, status *int32, contact *entity.Contact, conversationId string, contactId string) int
		DeviceInfos           func(childComplexity int, T bool) int
		AppVersion            func(childComplexity int, T bool) int
		Peers                 func(childComplexity int, T bool) int
		Protocols             func(childComplexity int, id string, addrs []string, connection *int32) int
		Panic                 func(childComplexity int, T bool) int
	}

	Subscription struct {
		EventStream      func(childComplexity int, filter *p2p.Event) int
		MonitorBandwidth func(childComplexity int, id *string, totalIn *int64, totalOut *int64, rateIn *float64, rateOut *float64, typeArg *int32) int
		MonitorPeers     func(childComplexity int, T bool) int
	}
}

type BertyEntityContactResolver interface {
	ID(ctx context.Context, obj *entity.Contact) (string, error)
}
type BertyEntityContactPayloadResolver interface {
	ID(ctx context.Context, obj *entity.Contact) (string, error)
}
type BertyEntityConversationResolver interface {
	ID(ctx context.Context, obj *entity.Conversation) (string, error)
}
type BertyEntityConversationMemberResolver interface {
	ID(ctx context.Context, obj *entity.ConversationMember) (string, error)
}
type BertyEntityConversationMemberPayloadResolver interface {
	ID(ctx context.Context, obj *entity.ConversationMember) (string, error)
}
type BertyEntityConversationPayloadResolver interface {
	ID(ctx context.Context, obj *entity.Conversation) (string, error)
}
type BertyEntityDeviceResolver interface {
	ID(ctx context.Context, obj *entity.Device) (string, error)
}
type BertyP2pEventResolver interface {
	ID(ctx context.Context, obj *p2p.Event) (string, error)

	Attributes(ctx context.Context, obj *p2p.Event) ([]byte, error)
	ConversationID(ctx context.Context, obj *p2p.Event) (string, error)
}
type BertyP2pEventPayloadResolver interface {
	ID(ctx context.Context, obj *p2p.Event) (string, error)

	Attributes(ctx context.Context, obj *p2p.Event) ([]byte, error)
	ConversationID(ctx context.Context, obj *p2p.Event) (string, error)
}
type GoogleProtobufFieldDescriptorProtoResolver interface {
	Label(ctx context.Context, obj *descriptor.FieldDescriptorProto) (*int32, error)
	Type(ctx context.Context, obj *descriptor.FieldDescriptorProto) (*int32, error)
}
type GoogleProtobufFieldOptionsResolver interface {
	Ctype(ctx context.Context, obj *descriptor.FieldOptions) (*int32, error)

	Jstype(ctx context.Context, obj *descriptor.FieldOptions) (*int32, error)
}
type GoogleProtobufFileOptionsResolver interface {
	OptimizeFor(ctx context.Context, obj *descriptor.FileOptions) (*int32, error)

	PhpMetadataNamespace(ctx context.Context, obj *descriptor.FileOptions) (string, error)
	RubyPackage(ctx context.Context, obj *descriptor.FileOptions) (string, error)
}
type GoogleProtobufMethodOptionsResolver interface {
	IdempotencyLevel(ctx context.Context, obj *descriptor.MethodOptions) (*int32, error)
}
type MutationResolver interface {
	ContactRequest(ctx context.Context, contact *entity.Contact, introText string) (*entity.Contact, error)
	ContactAcceptRequest(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) (*entity.Contact, error)
	ContactRemove(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) (*entity.Contact, error)
	ContactUpdate(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) (*entity.Contact, error)
	ConversationCreate(ctx context.Context, contacts []*entity.Contact, title string, topic string) (*entity.Conversation, error)
	ConversationInvite(ctx context.Context, conversation *entity.Conversation, members []*entity.ConversationMember) (*entity.Conversation, error)
	ConversationExclude(ctx context.Context, conversation *entity.Conversation, members []*entity.ConversationMember) (*entity.Conversation, error)
	ConversationAddMessage(ctx context.Context, conversation *entity.Conversation, message *entity.Message) (*p2p.Event, error)
	GenerateFakeData(ctx context.Context, T bool) (*node.Void, error)
	RunIntegrationTests(ctx context.Context, name string) (*node.IntegrationTestOutput, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id string) (models.Node, error)
	ID(ctx context.Context, T bool) (*p2p.Peer, error)
	EventList(ctx context.Context, filter *p2p.Event, onlyWithoutAckedAt *int32, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) (*node.EventListConnection, error)
	GetEvent(ctx context.Context, id string, senderId string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sentAt *time.Time, receivedAt *time.Time, ackedAt *time.Time, direction *int32, senderApiVersion uint32, receiverApiVersion uint32, receiverId string, kind *int32, attributes []byte, conversationId string) (*p2p.Event, error)
	ContactList(ctx context.Context, filter *entity.Contact, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) (*node.ContactListConnection, error)
	GetContact(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) (*entity.Contact, error)
	ConversationList(ctx context.Context, filter *entity.Conversation, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) (*node.ConversationListConnection, error)
	GetConversation(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, title string, topic string, members []*entity.ConversationMember) (*entity.Conversation, error)
	GetConversationMember(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, status *int32, contact *entity.Contact, conversationId string, contactId string) (*entity.ConversationMember, error)
	DeviceInfos(ctx context.Context, T bool) (*deviceinfo.DeviceInfos, error)
	AppVersion(ctx context.Context, T bool) (*node.AppVersionOutput, error)
	Peers(ctx context.Context, T bool) (*p2p.Peers, error)
	Protocols(ctx context.Context, id string, addrs []string, connection *int32) (*node.ProtocolsOutput, error)
	Panic(ctx context.Context, T bool) (*node.Void, error)
}
type SubscriptionResolver interface {
	EventStream(ctx context.Context, filter *p2p.Event) (<-chan *p2p.Event, error)
	MonitorBandwidth(ctx context.Context, id *string, totalIn *int64, totalOut *int64, rateIn *float64, rateOut *float64, typeArg *int32) (<-chan *p2p.BandwidthStats, error)
	MonitorPeers(ctx context.Context, T bool) (<-chan *p2p.Peer, error)
}

func field_Mutation_ContactRequest_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Contact
	if tmp, ok := rawArgs["contact"]; ok {
		var err error
		var ptr1 entity.Contact
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityContactInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["contact"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["introText"]; ok {
		var err error
		arg1, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["introText"] = arg1
	return args, nil

}

func field_Mutation_ContactAcceptRequest_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["deletedAt"] = arg3
	var arg4 []byte
	if tmp, ok := rawArgs["sigchain"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg4 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg4[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["sigchain"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg5
	var arg6 []*entity.Device
	if tmp, ok := rawArgs["devices"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg6 = make([]*entity.Device, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Device
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
				arg6[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["devices"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["displayName"]; ok {
		var err error
		arg7, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayName"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["displayStatus"]; ok {
		var err error
		arg8, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayStatus"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["overrideDisplayName"]; ok {
		var err error
		arg9, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayName"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["overrideDisplayStatus"]; ok {
		var err error
		arg10, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayStatus"] = arg10
	return args, nil

}

func field_Mutation_ContactRemove_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["deletedAt"] = arg3
	var arg4 []byte
	if tmp, ok := rawArgs["sigchain"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg4 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg4[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["sigchain"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg5
	var arg6 []*entity.Device
	if tmp, ok := rawArgs["devices"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg6 = make([]*entity.Device, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Device
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
				arg6[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["devices"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["displayName"]; ok {
		var err error
		arg7, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayName"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["displayStatus"]; ok {
		var err error
		arg8, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayStatus"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["overrideDisplayName"]; ok {
		var err error
		arg9, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayName"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["overrideDisplayStatus"]; ok {
		var err error
		arg10, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayStatus"] = arg10
	return args, nil

}

func field_Mutation_ContactUpdate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["deletedAt"] = arg3
	var arg4 []byte
	if tmp, ok := rawArgs["sigchain"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg4 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg4[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["sigchain"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg5
	var arg6 []*entity.Device
	if tmp, ok := rawArgs["devices"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg6 = make([]*entity.Device, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Device
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
				arg6[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["devices"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["displayName"]; ok {
		var err error
		arg7, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayName"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["displayStatus"]; ok {
		var err error
		arg8, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayStatus"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["overrideDisplayName"]; ok {
		var err error
		arg9, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayName"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["overrideDisplayStatus"]; ok {
		var err error
		arg10, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayStatus"] = arg10
	return args, nil

}

func field_Mutation_ConversationCreate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 []*entity.Contact
	if tmp, ok := rawArgs["contacts"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg0 = make([]*entity.Contact, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Contact
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityContactInput(rawIf1[idx1])
				arg0[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["contacts"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["title"]; ok {
		var err error
		arg1, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["topic"]; ok {
		var err error
		arg2, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topic"] = arg2
	return args, nil

}

func field_Mutation_ConversationInvite_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["conversation"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["conversation"] = arg0
	var arg1 []*entity.ConversationMember
	if tmp, ok := rawArgs["members"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg1 = make([]*entity.ConversationMember, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.ConversationMember
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
				arg1[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["members"] = arg1
	return args, nil

}

func field_Mutation_ConversationExclude_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["conversation"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["conversation"] = arg0
	var arg1 []*entity.ConversationMember
	if tmp, ok := rawArgs["members"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg1 = make([]*entity.ConversationMember, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.ConversationMember
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
				arg1[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["members"] = arg1
	return args, nil

}

func field_Mutation_ConversationAddMessage_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["conversation"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["conversation"] = arg0
	var arg1 *entity.Message
	if tmp, ok := rawArgs["message"]; ok {
		var err error
		var ptr1 entity.Message
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityMessageInput(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["message"] = arg1
	return args, nil

}

func field_Mutation_GenerateFakeData_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Mutation_RunIntegrationTests_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Query_node_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil

}

func field_Query_ID_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_EventList_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *p2p.Event
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 p2p.Event
		if tmp != nil {
			ptr1, err = UnmarshalBertyP2pEventInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int32
	if tmp, ok := rawArgs["onlyWithoutAckedAt"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["onlyWithoutAckedAt"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["orderBy"]; ok {
		var err error
		arg2, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg2
	var arg3 bool
	if tmp, ok := rawArgs["orderDesc"]; ok {
		var err error
		arg3, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDesc"] = arg3
	var arg4 *int32
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg5
	var arg6 *int32
	if tmp, ok := rawArgs["last"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["before"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg7 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg7
	return args, nil

}

func field_Query_GetEvent_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["senderId"]; ok {
		var err error
		arg1, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["senderId"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg3
	var arg4 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["deletedAt"] = arg4
	var arg5 *time.Time
	if tmp, ok := rawArgs["sentAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["sentAt"] = arg5
	var arg6 *time.Time
	if tmp, ok := rawArgs["receivedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["receivedAt"] = arg6
	var arg7 *time.Time
	if tmp, ok := rawArgs["ackedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg7 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["ackedAt"] = arg7
	var arg8 *int32
	if tmp, ok := rawArgs["direction"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg8 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["direction"] = arg8
	var arg9 uint32
	if tmp, ok := rawArgs["senderApiVersion"]; ok {
		var err error
		arg9, err = models.UnmarshalUint32(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["senderApiVersion"] = arg9
	var arg10 uint32
	if tmp, ok := rawArgs["receiverApiVersion"]; ok {
		var err error
		arg10, err = models.UnmarshalUint32(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["receiverApiVersion"] = arg10
	var arg11 string
	if tmp, ok := rawArgs["receiverId"]; ok {
		var err error
		arg11, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["receiverId"] = arg11
	var arg12 *int32
	if tmp, ok := rawArgs["kind"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg12 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["kind"] = arg12
	var arg13 []byte
	if tmp, ok := rawArgs["attributes"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg13 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg13[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["attributes"] = arg13
	var arg14 string
	if tmp, ok := rawArgs["conversationId"]; ok {
		var err error
		arg14, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conversationId"] = arg14
	return args, nil

}

func field_Query_ContactList_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Contact
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 entity.Contact
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityContactInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["orderBy"]; ok {
		var err error
		arg1, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["orderDesc"]; ok {
		var err error
		arg2, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDesc"] = arg2
	var arg3 *int32
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["last"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["before"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg6
	return args, nil

}

func field_Query_GetContact_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["deletedAt"] = arg3
	var arg4 []byte
	if tmp, ok := rawArgs["sigchain"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg4 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg4[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["sigchain"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg5
	var arg6 []*entity.Device
	if tmp, ok := rawArgs["devices"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg6 = make([]*entity.Device, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Device
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
				arg6[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["devices"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["displayName"]; ok {
		var err error
		arg7, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayName"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["displayStatus"]; ok {
		var err error
		arg8, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayStatus"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["overrideDisplayName"]; ok {
		var err error
		arg9, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayName"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["overrideDisplayStatus"]; ok {
		var err error
		arg10, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayStatus"] = arg10
	return args, nil

}

func field_Query_ConversationList_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["orderBy"]; ok {
		var err error
		arg1, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["orderDesc"]; ok {
		var err error
		arg2, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDesc"] = arg2
	var arg3 *int32
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["last"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["before"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg6
	return args, nil

}

func field_Query_GetConversation_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["deletedAt"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["title"]; ok {
		var err error
		arg4, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["topic"]; ok {
		var err error
		arg5, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topic"] = arg5
	var arg6 []*entity.ConversationMember
	if tmp, ok := rawArgs["members"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg6 = make([]*entity.ConversationMember, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.ConversationMember
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
				arg6[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["members"] = arg6
	return args, nil

}

func field_Query_GetConversationMember_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["deletedAt"] = arg3
	var arg4 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg4
	var arg5 *entity.Contact
	if tmp, ok := rawArgs["contact"]; ok {
		var err error
		var ptr1 entity.Contact
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityContactInput(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["contact"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["conversationId"]; ok {
		var err error
		arg6, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conversationId"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["contactId"]; ok {
		var err error
		arg7, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg7
	return args, nil

}

func field_Query_DeviceInfos_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_AppVersion_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_Peers_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_Protocols_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["addrs"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg1 = make([]string, len(rawIf1))
		for idx1 := range rawIf1 {
			arg1[idx1], err = models.UnmarshalString(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["addrs"] = arg1
	var arg2 *int32
	if tmp, ok := rawArgs["connection"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["connection"] = arg2
	return args, nil

}

func field_Query_Panic_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query___type_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Subscription_EventStream_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *p2p.Event
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 p2p.Event
		if tmp != nil {
			ptr1, err = UnmarshalBertyP2pEventInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil

}

func field_Subscription_MonitorBandwidth_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["totalIn"]; ok {
		var err error
		var ptr1 int64
		if tmp != nil {
			ptr1, err = models.UnmarshalInt64(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["totalIn"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["totalOut"]; ok {
		var err error
		var ptr1 int64
		if tmp != nil {
			ptr1, err = models.UnmarshalInt64(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["totalOut"] = arg2
	var arg3 *float64
	if tmp, ok := rawArgs["rateIn"]; ok {
		var err error
		var ptr1 float64
		if tmp != nil {
			ptr1, err = models.UnmarshalDouble(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["rateIn"] = arg3
	var arg4 *float64
	if tmp, ok := rawArgs["rateOut"]; ok {
		var err error
		var ptr1 float64
		if tmp != nil {
			ptr1, err = models.UnmarshalDouble(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["rateOut"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["type"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg5
	return args, nil

}

func field_Subscription_MonitorPeers_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field___Type_fields_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

func field___Type_enumValues_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	switch typeName + "." + field {

	case "BertyEntityContact.id":
		if e.complexity.BertyEntityContact.Id == nil {
			break
		}

		return e.complexity.BertyEntityContact.Id(childComplexity), true

	case "BertyEntityContact.createdAt":
		if e.complexity.BertyEntityContact.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityContact.CreatedAt(childComplexity), true

	case "BertyEntityContact.updatedAt":
		if e.complexity.BertyEntityContact.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityContact.UpdatedAt(childComplexity), true

	case "BertyEntityContact.deletedAt":
		if e.complexity.BertyEntityContact.DeletedAt == nil {
			break
		}

		return e.complexity.BertyEntityContact.DeletedAt(childComplexity), true

	case "BertyEntityContact.sigchain":
		if e.complexity.BertyEntityContact.Sigchain == nil {
			break
		}

		return e.complexity.BertyEntityContact.Sigchain(childComplexity), true

	case "BertyEntityContact.status":
		if e.complexity.BertyEntityContact.Status == nil {
			break
		}

		return e.complexity.BertyEntityContact.Status(childComplexity), true

	case "BertyEntityContact.devices":
		if e.complexity.BertyEntityContact.Devices == nil {
			break
		}

		return e.complexity.BertyEntityContact.Devices(childComplexity), true

	case "BertyEntityContact.displayName":
		if e.complexity.BertyEntityContact.DisplayName == nil {
			break
		}

		return e.complexity.BertyEntityContact.DisplayName(childComplexity), true

	case "BertyEntityContact.displayStatus":
		if e.complexity.BertyEntityContact.DisplayStatus == nil {
			break
		}

		return e.complexity.BertyEntityContact.DisplayStatus(childComplexity), true

	case "BertyEntityContact.overrideDisplayName":
		if e.complexity.BertyEntityContact.OverrideDisplayName == nil {
			break
		}

		return e.complexity.BertyEntityContact.OverrideDisplayName(childComplexity), true

	case "BertyEntityContact.overrideDisplayStatus":
		if e.complexity.BertyEntityContact.OverrideDisplayStatus == nil {
			break
		}

		return e.complexity.BertyEntityContact.OverrideDisplayStatus(childComplexity), true

	case "BertyEntityContactPayload.id":
		if e.complexity.BertyEntityContactPayload.Id == nil {
			break
		}

		return e.complexity.BertyEntityContactPayload.Id(childComplexity), true

	case "BertyEntityContactPayload.createdAt":
		if e.complexity.BertyEntityContactPayload.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityContactPayload.CreatedAt(childComplexity), true

	case "BertyEntityContactPayload.updatedAt":
		if e.complexity.BertyEntityContactPayload.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityContactPayload.UpdatedAt(childComplexity), true

	case "BertyEntityContactPayload.deletedAt":
		if e.complexity.BertyEntityContactPayload.DeletedAt == nil {
			break
		}

		return e.complexity.BertyEntityContactPayload.DeletedAt(childComplexity), true

	case "BertyEntityContactPayload.sigchain":
		if e.complexity.BertyEntityContactPayload.Sigchain == nil {
			break
		}

		return e.complexity.BertyEntityContactPayload.Sigchain(childComplexity), true

	case "BertyEntityContactPayload.status":
		if e.complexity.BertyEntityContactPayload.Status == nil {
			break
		}

		return e.complexity.BertyEntityContactPayload.Status(childComplexity), true

	case "BertyEntityContactPayload.devices":
		if e.complexity.BertyEntityContactPayload.Devices == nil {
			break
		}

		return e.complexity.BertyEntityContactPayload.Devices(childComplexity), true

	case "BertyEntityContactPayload.displayName":
		if e.complexity.BertyEntityContactPayload.DisplayName == nil {
			break
		}

		return e.complexity.BertyEntityContactPayload.DisplayName(childComplexity), true

	case "BertyEntityContactPayload.displayStatus":
		if e.complexity.BertyEntityContactPayload.DisplayStatus == nil {
			break
		}

		return e.complexity.BertyEntityContactPayload.DisplayStatus(childComplexity), true

	case "BertyEntityContactPayload.overrideDisplayName":
		if e.complexity.BertyEntityContactPayload.OverrideDisplayName == nil {
			break
		}

		return e.complexity.BertyEntityContactPayload.OverrideDisplayName(childComplexity), true

	case "BertyEntityContactPayload.overrideDisplayStatus":
		if e.complexity.BertyEntityContactPayload.OverrideDisplayStatus == nil {
			break
		}

		return e.complexity.BertyEntityContactPayload.OverrideDisplayStatus(childComplexity), true

	case "BertyEntityConversation.id":
		if e.complexity.BertyEntityConversation.Id == nil {
			break
		}

		return e.complexity.BertyEntityConversation.Id(childComplexity), true

	case "BertyEntityConversation.createdAt":
		if e.complexity.BertyEntityConversation.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversation.CreatedAt(childComplexity), true

	case "BertyEntityConversation.updatedAt":
		if e.complexity.BertyEntityConversation.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversation.UpdatedAt(childComplexity), true

	case "BertyEntityConversation.deletedAt":
		if e.complexity.BertyEntityConversation.DeletedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversation.DeletedAt(childComplexity), true

	case "BertyEntityConversation.title":
		if e.complexity.BertyEntityConversation.Title == nil {
			break
		}

		return e.complexity.BertyEntityConversation.Title(childComplexity), true

	case "BertyEntityConversation.topic":
		if e.complexity.BertyEntityConversation.Topic == nil {
			break
		}

		return e.complexity.BertyEntityConversation.Topic(childComplexity), true

	case "BertyEntityConversation.members":
		if e.complexity.BertyEntityConversation.Members == nil {
			break
		}

		return e.complexity.BertyEntityConversation.Members(childComplexity), true

	case "BertyEntityConversationMember.id":
		if e.complexity.BertyEntityConversationMember.Id == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.Id(childComplexity), true

	case "BertyEntityConversationMember.createdAt":
		if e.complexity.BertyEntityConversationMember.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.CreatedAt(childComplexity), true

	case "BertyEntityConversationMember.updatedAt":
		if e.complexity.BertyEntityConversationMember.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.UpdatedAt(childComplexity), true

	case "BertyEntityConversationMember.deletedAt":
		if e.complexity.BertyEntityConversationMember.DeletedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.DeletedAt(childComplexity), true

	case "BertyEntityConversationMember.status":
		if e.complexity.BertyEntityConversationMember.Status == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.Status(childComplexity), true

	case "BertyEntityConversationMember.contact":
		if e.complexity.BertyEntityConversationMember.Contact == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.Contact(childComplexity), true

	case "BertyEntityConversationMember.conversationId":
		if e.complexity.BertyEntityConversationMember.ConversationId == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.ConversationId(childComplexity), true

	case "BertyEntityConversationMember.contactId":
		if e.complexity.BertyEntityConversationMember.ContactId == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.ContactId(childComplexity), true

	case "BertyEntityConversationMemberPayload.id":
		if e.complexity.BertyEntityConversationMemberPayload.Id == nil {
			break
		}

		return e.complexity.BertyEntityConversationMemberPayload.Id(childComplexity), true

	case "BertyEntityConversationMemberPayload.createdAt":
		if e.complexity.BertyEntityConversationMemberPayload.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversationMemberPayload.CreatedAt(childComplexity), true

	case "BertyEntityConversationMemberPayload.updatedAt":
		if e.complexity.BertyEntityConversationMemberPayload.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversationMemberPayload.UpdatedAt(childComplexity), true

	case "BertyEntityConversationMemberPayload.deletedAt":
		if e.complexity.BertyEntityConversationMemberPayload.DeletedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversationMemberPayload.DeletedAt(childComplexity), true

	case "BertyEntityConversationMemberPayload.status":
		if e.complexity.BertyEntityConversationMemberPayload.Status == nil {
			break
		}

		return e.complexity.BertyEntityConversationMemberPayload.Status(childComplexity), true

	case "BertyEntityConversationMemberPayload.contact":
		if e.complexity.BertyEntityConversationMemberPayload.Contact == nil {
			break
		}

		return e.complexity.BertyEntityConversationMemberPayload.Contact(childComplexity), true

	case "BertyEntityConversationMemberPayload.conversationId":
		if e.complexity.BertyEntityConversationMemberPayload.ConversationId == nil {
			break
		}

		return e.complexity.BertyEntityConversationMemberPayload.ConversationId(childComplexity), true

	case "BertyEntityConversationMemberPayload.contactId":
		if e.complexity.BertyEntityConversationMemberPayload.ContactId == nil {
			break
		}

		return e.complexity.BertyEntityConversationMemberPayload.ContactId(childComplexity), true

	case "BertyEntityConversationPayload.id":
		if e.complexity.BertyEntityConversationPayload.Id == nil {
			break
		}

		return e.complexity.BertyEntityConversationPayload.Id(childComplexity), true

	case "BertyEntityConversationPayload.createdAt":
		if e.complexity.BertyEntityConversationPayload.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversationPayload.CreatedAt(childComplexity), true

	case "BertyEntityConversationPayload.updatedAt":
		if e.complexity.BertyEntityConversationPayload.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversationPayload.UpdatedAt(childComplexity), true

	case "BertyEntityConversationPayload.deletedAt":
		if e.complexity.BertyEntityConversationPayload.DeletedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversationPayload.DeletedAt(childComplexity), true

	case "BertyEntityConversationPayload.title":
		if e.complexity.BertyEntityConversationPayload.Title == nil {
			break
		}

		return e.complexity.BertyEntityConversationPayload.Title(childComplexity), true

	case "BertyEntityConversationPayload.topic":
		if e.complexity.BertyEntityConversationPayload.Topic == nil {
			break
		}

		return e.complexity.BertyEntityConversationPayload.Topic(childComplexity), true

	case "BertyEntityConversationPayload.members":
		if e.complexity.BertyEntityConversationPayload.Members == nil {
			break
		}

		return e.complexity.BertyEntityConversationPayload.Members(childComplexity), true

	case "BertyEntityDevice.id":
		if e.complexity.BertyEntityDevice.Id == nil {
			break
		}

		return e.complexity.BertyEntityDevice.Id(childComplexity), true

	case "BertyEntityDevice.createdAt":
		if e.complexity.BertyEntityDevice.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityDevice.CreatedAt(childComplexity), true

	case "BertyEntityDevice.updatedAt":
		if e.complexity.BertyEntityDevice.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityDevice.UpdatedAt(childComplexity), true

	case "BertyEntityDevice.deletedAt":
		if e.complexity.BertyEntityDevice.DeletedAt == nil {
			break
		}

		return e.complexity.BertyEntityDevice.DeletedAt(childComplexity), true

	case "BertyEntityDevice.name":
		if e.complexity.BertyEntityDevice.Name == nil {
			break
		}

		return e.complexity.BertyEntityDevice.Name(childComplexity), true

	case "BertyEntityDevice.status":
		if e.complexity.BertyEntityDevice.Status == nil {
			break
		}

		return e.complexity.BertyEntityDevice.Status(childComplexity), true

	case "BertyEntityDevice.apiVersion":
		if e.complexity.BertyEntityDevice.ApiVersion == nil {
			break
		}

		return e.complexity.BertyEntityDevice.ApiVersion(childComplexity), true

	case "BertyEntityDevice.contactId":
		if e.complexity.BertyEntityDevice.ContactId == nil {
			break
		}

		return e.complexity.BertyEntityDevice.ContactId(childComplexity), true

	case "BertyEntityMessage.text":
		if e.complexity.BertyEntityMessage.Text == nil {
			break
		}

		return e.complexity.BertyEntityMessage.Text(childComplexity), true

	case "BertyEntitySenderAlias.id":
		if e.complexity.BertyEntitySenderAlias.Id == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.Id(childComplexity), true

	case "BertyEntitySenderAlias.createdAt":
		if e.complexity.BertyEntitySenderAlias.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.CreatedAt(childComplexity), true

	case "BertyEntitySenderAlias.updatedAt":
		if e.complexity.BertyEntitySenderAlias.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.UpdatedAt(childComplexity), true

	case "BertyEntitySenderAlias.deletedAt":
		if e.complexity.BertyEntitySenderAlias.DeletedAt == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.DeletedAt(childComplexity), true

	case "BertyEntitySenderAlias.status":
		if e.complexity.BertyEntitySenderAlias.Status == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.Status(childComplexity), true

	case "BertyEntitySenderAlias.originDeviceId":
		if e.complexity.BertyEntitySenderAlias.OriginDeviceId == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.OriginDeviceId(childComplexity), true

	case "BertyEntitySenderAlias.contactId":
		if e.complexity.BertyEntitySenderAlias.ContactId == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.ContactId(childComplexity), true

	case "BertyEntitySenderAlias.conversationId":
		if e.complexity.BertyEntitySenderAlias.ConversationId == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.ConversationId(childComplexity), true

	case "BertyEntitySenderAlias.aliasIdentifier":
		if e.complexity.BertyEntitySenderAlias.AliasIdentifier == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.AliasIdentifier(childComplexity), true

	case "BertyEntitySenderAlias.used":
		if e.complexity.BertyEntitySenderAlias.Used == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.Used(childComplexity), true

	case "BertyNodeAppVersionPayload.version":
		if e.complexity.BertyNodeAppVersionPayload.Version == nil {
			break
		}

		return e.complexity.BertyNodeAppVersionPayload.Version(childComplexity), true

	case "BertyNodeContactEdge.node":
		if e.complexity.BertyNodeContactEdge.Node == nil {
			break
		}

		return e.complexity.BertyNodeContactEdge.Node(childComplexity), true

	case "BertyNodeContactEdge.cursor":
		if e.complexity.BertyNodeContactEdge.Cursor == nil {
			break
		}

		return e.complexity.BertyNodeContactEdge.Cursor(childComplexity), true

	case "BertyNodeContactListConnection.edges":
		if e.complexity.BertyNodeContactListConnection.Edges == nil {
			break
		}

		return e.complexity.BertyNodeContactListConnection.Edges(childComplexity), true

	case "BertyNodeContactListConnection.pageInfo":
		if e.complexity.BertyNodeContactListConnection.PageInfo == nil {
			break
		}

		return e.complexity.BertyNodeContactListConnection.PageInfo(childComplexity), true

	case "BertyNodeConversationEdge.node":
		if e.complexity.BertyNodeConversationEdge.Node == nil {
			break
		}

		return e.complexity.BertyNodeConversationEdge.Node(childComplexity), true

	case "BertyNodeConversationEdge.cursor":
		if e.complexity.BertyNodeConversationEdge.Cursor == nil {
			break
		}

		return e.complexity.BertyNodeConversationEdge.Cursor(childComplexity), true

	case "BertyNodeConversationListConnection.edges":
		if e.complexity.BertyNodeConversationListConnection.Edges == nil {
			break
		}

		return e.complexity.BertyNodeConversationListConnection.Edges(childComplexity), true

	case "BertyNodeConversationListConnection.pageInfo":
		if e.complexity.BertyNodeConversationListConnection.PageInfo == nil {
			break
		}

		return e.complexity.BertyNodeConversationListConnection.PageInfo(childComplexity), true

	case "BertyNodeEventEdge.node":
		if e.complexity.BertyNodeEventEdge.Node == nil {
			break
		}

		return e.complexity.BertyNodeEventEdge.Node(childComplexity), true

	case "BertyNodeEventEdge.cursor":
		if e.complexity.BertyNodeEventEdge.Cursor == nil {
			break
		}

		return e.complexity.BertyNodeEventEdge.Cursor(childComplexity), true

	case "BertyNodeEventListConnection.edges":
		if e.complexity.BertyNodeEventListConnection.Edges == nil {
			break
		}

		return e.complexity.BertyNodeEventListConnection.Edges(childComplexity), true

	case "BertyNodeEventListConnection.pageInfo":
		if e.complexity.BertyNodeEventListConnection.PageInfo == nil {
			break
		}

		return e.complexity.BertyNodeEventListConnection.PageInfo(childComplexity), true

	case "BertyNodeIntegrationTestPayload.name":
		if e.complexity.BertyNodeIntegrationTestPayload.Name == nil {
			break
		}

		return e.complexity.BertyNodeIntegrationTestPayload.Name(childComplexity), true

	case "BertyNodeIntegrationTestPayload.success":
		if e.complexity.BertyNodeIntegrationTestPayload.Success == nil {
			break
		}

		return e.complexity.BertyNodeIntegrationTestPayload.Success(childComplexity), true

	case "BertyNodeIntegrationTestPayload.verbose":
		if e.complexity.BertyNodeIntegrationTestPayload.Verbose == nil {
			break
		}

		return e.complexity.BertyNodeIntegrationTestPayload.Verbose(childComplexity), true

	case "BertyNodeIntegrationTestPayload.startedAt":
		if e.complexity.BertyNodeIntegrationTestPayload.StartedAt == nil {
			break
		}

		return e.complexity.BertyNodeIntegrationTestPayload.StartedAt(childComplexity), true

	case "BertyNodeIntegrationTestPayload.finishedAt":
		if e.complexity.BertyNodeIntegrationTestPayload.FinishedAt == nil {
			break
		}

		return e.complexity.BertyNodeIntegrationTestPayload.FinishedAt(childComplexity), true

	case "BertyNodePageInfo.startCursor":
		if e.complexity.BertyNodePageInfo.StartCursor == nil {
			break
		}

		return e.complexity.BertyNodePageInfo.StartCursor(childComplexity), true

	case "BertyNodePageInfo.endCursor":
		if e.complexity.BertyNodePageInfo.EndCursor == nil {
			break
		}

		return e.complexity.BertyNodePageInfo.EndCursor(childComplexity), true

	case "BertyNodePageInfo.hasNextPage":
		if e.complexity.BertyNodePageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.BertyNodePageInfo.HasNextPage(childComplexity), true

	case "BertyNodePageInfo.hasPreviousPage":
		if e.complexity.BertyNodePageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.BertyNodePageInfo.HasPreviousPage(childComplexity), true

	case "BertyNodePageInfo.count":
		if e.complexity.BertyNodePageInfo.Count == nil {
			break
		}

		return e.complexity.BertyNodePageInfo.Count(childComplexity), true

	case "BertyNodePagination.orderBy":
		if e.complexity.BertyNodePagination.OrderBy == nil {
			break
		}

		return e.complexity.BertyNodePagination.OrderBy(childComplexity), true

	case "BertyNodePagination.orderDesc":
		if e.complexity.BertyNodePagination.OrderDesc == nil {
			break
		}

		return e.complexity.BertyNodePagination.OrderDesc(childComplexity), true

	case "BertyNodePagination.first":
		if e.complexity.BertyNodePagination.First == nil {
			break
		}

		return e.complexity.BertyNodePagination.First(childComplexity), true

	case "BertyNodePagination.after":
		if e.complexity.BertyNodePagination.After == nil {
			break
		}

		return e.complexity.BertyNodePagination.After(childComplexity), true

	case "BertyNodePagination.last":
		if e.complexity.BertyNodePagination.Last == nil {
			break
		}

		return e.complexity.BertyNodePagination.Last(childComplexity), true

	case "BertyNodePagination.before":
		if e.complexity.BertyNodePagination.Before == nil {
			break
		}

		return e.complexity.BertyNodePagination.Before(childComplexity), true

	case "BertyNodePingDestination.destination":
		if e.complexity.BertyNodePingDestination.Destination == nil {
			break
		}

		return e.complexity.BertyNodePingDestination.Destination(childComplexity), true

	case "BertyNodeProtocolsPayload.protocols":
		if e.complexity.BertyNodeProtocolsPayload.Protocols == nil {
			break
		}

		return e.complexity.BertyNodeProtocolsPayload.Protocols(childComplexity), true

	case "BertyNodeVoid.T":
		if e.complexity.BertyNodeVoid.T == nil {
			break
		}

		return e.complexity.BertyNodeVoid.T(childComplexity), true

	case "BertyNodeVoidPayload.T":
		if e.complexity.BertyNodeVoidPayload.T == nil {
			break
		}

		return e.complexity.BertyNodeVoidPayload.T(childComplexity), true

	case "BertyP2pAckAttrs.ids":
		if e.complexity.BertyP2pAckAttrs.Ids == nil {
			break
		}

		return e.complexity.BertyP2pAckAttrs.Ids(childComplexity), true

	case "BertyP2pAckAttrs.ErrMsg":
		if e.complexity.BertyP2pAckAttrs.ErrMsg == nil {
			break
		}

		return e.complexity.BertyP2pAckAttrs.ErrMsg(childComplexity), true

	case "BertyP2pBandwidthStats.id":
		if e.complexity.BertyP2pBandwidthStats.Id == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStats.Id(childComplexity), true

	case "BertyP2pBandwidthStats.totalIn":
		if e.complexity.BertyP2pBandwidthStats.TotalIn == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStats.TotalIn(childComplexity), true

	case "BertyP2pBandwidthStats.totalOut":
		if e.complexity.BertyP2pBandwidthStats.TotalOut == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStats.TotalOut(childComplexity), true

	case "BertyP2pBandwidthStats.rateIn":
		if e.complexity.BertyP2pBandwidthStats.RateIn == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStats.RateIn(childComplexity), true

	case "BertyP2pBandwidthStats.rateOut":
		if e.complexity.BertyP2pBandwidthStats.RateOut == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStats.RateOut(childComplexity), true

	case "BertyP2pBandwidthStats.type":
		if e.complexity.BertyP2pBandwidthStats.Type == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStats.Type(childComplexity), true

	case "BertyP2pBandwidthStatsPayload.id":
		if e.complexity.BertyP2pBandwidthStatsPayload.Id == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStatsPayload.Id(childComplexity), true

	case "BertyP2pBandwidthStatsPayload.totalIn":
		if e.complexity.BertyP2pBandwidthStatsPayload.TotalIn == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStatsPayload.TotalIn(childComplexity), true

	case "BertyP2pBandwidthStatsPayload.totalOut":
		if e.complexity.BertyP2pBandwidthStatsPayload.TotalOut == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStatsPayload.TotalOut(childComplexity), true

	case "BertyP2pBandwidthStatsPayload.rateIn":
		if e.complexity.BertyP2pBandwidthStatsPayload.RateIn == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStatsPayload.RateIn(childComplexity), true

	case "BertyP2pBandwidthStatsPayload.rateOut":
		if e.complexity.BertyP2pBandwidthStatsPayload.RateOut == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStatsPayload.RateOut(childComplexity), true

	case "BertyP2pBandwidthStatsPayload.type":
		if e.complexity.BertyP2pBandwidthStatsPayload.Type == nil {
			break
		}

		return e.complexity.BertyP2pBandwidthStatsPayload.Type(childComplexity), true

	case "BertyP2pContactRequestAcceptedAttrs.T":
		if e.complexity.BertyP2pContactRequestAcceptedAttrs.T == nil {
			break
		}

		return e.complexity.BertyP2pContactRequestAcceptedAttrs.T(childComplexity), true

	case "BertyP2pContactRequestAttrs.me":
		if e.complexity.BertyP2pContactRequestAttrs.Me == nil {
			break
		}

		return e.complexity.BertyP2pContactRequestAttrs.Me(childComplexity), true

	case "BertyP2pContactRequestAttrs.introText":
		if e.complexity.BertyP2pContactRequestAttrs.IntroText == nil {
			break
		}

		return e.complexity.BertyP2pContactRequestAttrs.IntroText(childComplexity), true

	case "BertyP2pContactShareAttrs.contact":
		if e.complexity.BertyP2pContactShareAttrs.Contact == nil {
			break
		}

		return e.complexity.BertyP2pContactShareAttrs.Contact(childComplexity), true

	case "BertyP2pContactShareMeAttrs.me":
		if e.complexity.BertyP2pContactShareMeAttrs.Me == nil {
			break
		}

		return e.complexity.BertyP2pContactShareMeAttrs.Me(childComplexity), true

	case "BertyP2pConversationInviteAttrs.conversation":
		if e.complexity.BertyP2pConversationInviteAttrs.Conversation == nil {
			break
		}

		return e.complexity.BertyP2pConversationInviteAttrs.Conversation(childComplexity), true

	case "BertyP2pConversationNewMessageAttrs.message":
		if e.complexity.BertyP2pConversationNewMessageAttrs.Message == nil {
			break
		}

		return e.complexity.BertyP2pConversationNewMessageAttrs.Message(childComplexity), true

	case "BertyP2pDevtoolsMapsetAttrs.key":
		if e.complexity.BertyP2pDevtoolsMapsetAttrs.Key == nil {
			break
		}

		return e.complexity.BertyP2pDevtoolsMapsetAttrs.Key(childComplexity), true

	case "BertyP2pDevtoolsMapsetAttrs.val":
		if e.complexity.BertyP2pDevtoolsMapsetAttrs.Val == nil {
			break
		}

		return e.complexity.BertyP2pDevtoolsMapsetAttrs.Val(childComplexity), true

	case "BertyP2pEvent.id":
		if e.complexity.BertyP2pEvent.Id == nil {
			break
		}

		return e.complexity.BertyP2pEvent.Id(childComplexity), true

	case "BertyP2pEvent.senderId":
		if e.complexity.BertyP2pEvent.SenderId == nil {
			break
		}

		return e.complexity.BertyP2pEvent.SenderId(childComplexity), true

	case "BertyP2pEvent.createdAt":
		if e.complexity.BertyP2pEvent.CreatedAt == nil {
			break
		}

		return e.complexity.BertyP2pEvent.CreatedAt(childComplexity), true

	case "BertyP2pEvent.updatedAt":
		if e.complexity.BertyP2pEvent.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyP2pEvent.UpdatedAt(childComplexity), true

	case "BertyP2pEvent.deletedAt":
		if e.complexity.BertyP2pEvent.DeletedAt == nil {
			break
		}

		return e.complexity.BertyP2pEvent.DeletedAt(childComplexity), true

	case "BertyP2pEvent.sentAt":
		if e.complexity.BertyP2pEvent.SentAt == nil {
			break
		}

		return e.complexity.BertyP2pEvent.SentAt(childComplexity), true

	case "BertyP2pEvent.receivedAt":
		if e.complexity.BertyP2pEvent.ReceivedAt == nil {
			break
		}

		return e.complexity.BertyP2pEvent.ReceivedAt(childComplexity), true

	case "BertyP2pEvent.ackedAt":
		if e.complexity.BertyP2pEvent.AckedAt == nil {
			break
		}

		return e.complexity.BertyP2pEvent.AckedAt(childComplexity), true

	case "BertyP2pEvent.direction":
		if e.complexity.BertyP2pEvent.Direction == nil {
			break
		}

		return e.complexity.BertyP2pEvent.Direction(childComplexity), true

	case "BertyP2pEvent.senderApiVersion":
		if e.complexity.BertyP2pEvent.SenderApiVersion == nil {
			break
		}

		return e.complexity.BertyP2pEvent.SenderApiVersion(childComplexity), true

	case "BertyP2pEvent.receiverApiVersion":
		if e.complexity.BertyP2pEvent.ReceiverApiVersion == nil {
			break
		}

		return e.complexity.BertyP2pEvent.ReceiverApiVersion(childComplexity), true

	case "BertyP2pEvent.receiverId":
		if e.complexity.BertyP2pEvent.ReceiverId == nil {
			break
		}

		return e.complexity.BertyP2pEvent.ReceiverId(childComplexity), true

	case "BertyP2pEvent.kind":
		if e.complexity.BertyP2pEvent.Kind == nil {
			break
		}

		return e.complexity.BertyP2pEvent.Kind(childComplexity), true

	case "BertyP2pEvent.attributes":
		if e.complexity.BertyP2pEvent.Attributes == nil {
			break
		}

		return e.complexity.BertyP2pEvent.Attributes(childComplexity), true

	case "BertyP2pEvent.conversationId":
		if e.complexity.BertyP2pEvent.ConversationId == nil {
			break
		}

		return e.complexity.BertyP2pEvent.ConversationId(childComplexity), true

	case "BertyP2pEventPayload.id":
		if e.complexity.BertyP2pEventPayload.Id == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.Id(childComplexity), true

	case "BertyP2pEventPayload.senderId":
		if e.complexity.BertyP2pEventPayload.SenderId == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.SenderId(childComplexity), true

	case "BertyP2pEventPayload.createdAt":
		if e.complexity.BertyP2pEventPayload.CreatedAt == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.CreatedAt(childComplexity), true

	case "BertyP2pEventPayload.updatedAt":
		if e.complexity.BertyP2pEventPayload.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.UpdatedAt(childComplexity), true

	case "BertyP2pEventPayload.deletedAt":
		if e.complexity.BertyP2pEventPayload.DeletedAt == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.DeletedAt(childComplexity), true

	case "BertyP2pEventPayload.sentAt":
		if e.complexity.BertyP2pEventPayload.SentAt == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.SentAt(childComplexity), true

	case "BertyP2pEventPayload.receivedAt":
		if e.complexity.BertyP2pEventPayload.ReceivedAt == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.ReceivedAt(childComplexity), true

	case "BertyP2pEventPayload.ackedAt":
		if e.complexity.BertyP2pEventPayload.AckedAt == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.AckedAt(childComplexity), true

	case "BertyP2pEventPayload.direction":
		if e.complexity.BertyP2pEventPayload.Direction == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.Direction(childComplexity), true

	case "BertyP2pEventPayload.senderApiVersion":
		if e.complexity.BertyP2pEventPayload.SenderApiVersion == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.SenderApiVersion(childComplexity), true

	case "BertyP2pEventPayload.receiverApiVersion":
		if e.complexity.BertyP2pEventPayload.ReceiverApiVersion == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.ReceiverApiVersion(childComplexity), true

	case "BertyP2pEventPayload.receiverId":
		if e.complexity.BertyP2pEventPayload.ReceiverId == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.ReceiverId(childComplexity), true

	case "BertyP2pEventPayload.kind":
		if e.complexity.BertyP2pEventPayload.Kind == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.Kind(childComplexity), true

	case "BertyP2pEventPayload.attributes":
		if e.complexity.BertyP2pEventPayload.Attributes == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.Attributes(childComplexity), true

	case "BertyP2pEventPayload.conversationId":
		if e.complexity.BertyP2pEventPayload.ConversationId == nil {
			break
		}

		return e.complexity.BertyP2pEventPayload.ConversationId(childComplexity), true

	case "BertyP2pPeer.id":
		if e.complexity.BertyP2pPeer.Id == nil {
			break
		}

		return e.complexity.BertyP2pPeer.Id(childComplexity), true

	case "BertyP2pPeer.addrs":
		if e.complexity.BertyP2pPeer.Addrs == nil {
			break
		}

		return e.complexity.BertyP2pPeer.Addrs(childComplexity), true

	case "BertyP2pPeer.connection":
		if e.complexity.BertyP2pPeer.Connection == nil {
			break
		}

		return e.complexity.BertyP2pPeer.Connection(childComplexity), true

	case "BertyP2pPeerPayload.id":
		if e.complexity.BertyP2pPeerPayload.Id == nil {
			break
		}

		return e.complexity.BertyP2pPeerPayload.Id(childComplexity), true

	case "BertyP2pPeerPayload.addrs":
		if e.complexity.BertyP2pPeerPayload.Addrs == nil {
			break
		}

		return e.complexity.BertyP2pPeerPayload.Addrs(childComplexity), true

	case "BertyP2pPeerPayload.connection":
		if e.complexity.BertyP2pPeerPayload.Connection == nil {
			break
		}

		return e.complexity.BertyP2pPeerPayload.Connection(childComplexity), true

	case "BertyP2pPeers.list":
		if e.complexity.BertyP2pPeers.List == nil {
			break
		}

		return e.complexity.BertyP2pPeers.List(childComplexity), true

	case "BertyP2pPeersPayload.list":
		if e.complexity.BertyP2pPeersPayload.List == nil {
			break
		}

		return e.complexity.BertyP2pPeersPayload.List(childComplexity), true

	case "BertyP2pPingAttrs.T":
		if e.complexity.BertyP2pPingAttrs.T == nil {
			break
		}

		return e.complexity.BertyP2pPingAttrs.T(childComplexity), true

	case "BertyP2pSenderAliasUpdateAttrs.aliases":
		if e.complexity.BertyP2pSenderAliasUpdateAttrs.Aliases == nil {
			break
		}

		return e.complexity.BertyP2pSenderAliasUpdateAttrs.Aliases(childComplexity), true

	case "BertyP2pSentAttrs.ids":
		if e.complexity.BertyP2pSentAttrs.Ids == nil {
			break
		}

		return e.complexity.BertyP2pSentAttrs.Ids(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfo.key":
		if e.complexity.BertyPkgDeviceinfoDeviceInfo.Key == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfo.Key(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfo.value":
		if e.complexity.BertyPkgDeviceinfoDeviceInfo.Value == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfo.Value(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfos.infos":
		if e.complexity.BertyPkgDeviceinfoDeviceInfos.Infos == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfos.Infos(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfosPayload.infos":
		if e.complexity.BertyPkgDeviceinfoDeviceInfosPayload.Infos == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfosPayload.Infos(childComplexity), true

	case "GoogleProtobufDescriptorProto.name":
		if e.complexity.GoogleProtobufDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufDescriptorProto.field":
		if e.complexity.GoogleProtobufDescriptorProto.Field == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.Field(childComplexity), true

	case "GoogleProtobufDescriptorProto.extension":
		if e.complexity.GoogleProtobufDescriptorProto.Extension == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.Extension(childComplexity), true

	case "GoogleProtobufDescriptorProto.nestedType":
		if e.complexity.GoogleProtobufDescriptorProto.NestedType == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.NestedType(childComplexity), true

	case "GoogleProtobufDescriptorProto.enumType":
		if e.complexity.GoogleProtobufDescriptorProto.EnumType == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.EnumType(childComplexity), true

	case "GoogleProtobufDescriptorProto.extensionRange":
		if e.complexity.GoogleProtobufDescriptorProto.ExtensionRange == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.ExtensionRange(childComplexity), true

	case "GoogleProtobufDescriptorProto.oneofDecl":
		if e.complexity.GoogleProtobufDescriptorProto.OneofDecl == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.OneofDecl(childComplexity), true

	case "GoogleProtobufDescriptorProto.options":
		if e.complexity.GoogleProtobufDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufDescriptorProto.reservedRange":
		if e.complexity.GoogleProtobufDescriptorProto.ReservedRange == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.ReservedRange(childComplexity), true

	case "GoogleProtobufDescriptorProto.reservedName":
		if e.complexity.GoogleProtobufDescriptorProto.ReservedName == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.ReservedName(childComplexity), true

	case "GoogleProtobufDescriptorProtoExtensionRange.start":
		if e.complexity.GoogleProtobufDescriptorProtoExtensionRange.Start == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProtoExtensionRange.Start(childComplexity), true

	case "GoogleProtobufDescriptorProtoExtensionRange.end":
		if e.complexity.GoogleProtobufDescriptorProtoExtensionRange.End == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProtoExtensionRange.End(childComplexity), true

	case "GoogleProtobufDescriptorProtoExtensionRange.options":
		if e.complexity.GoogleProtobufDescriptorProtoExtensionRange.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProtoExtensionRange.Options(childComplexity), true

	case "GoogleProtobufDescriptorProtoReservedRange.start":
		if e.complexity.GoogleProtobufDescriptorProtoReservedRange.Start == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProtoReservedRange.Start(childComplexity), true

	case "GoogleProtobufDescriptorProtoReservedRange.end":
		if e.complexity.GoogleProtobufDescriptorProtoReservedRange.End == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProtoReservedRange.End(childComplexity), true

	case "GoogleProtobufEnumDescriptorProto.name":
		if e.complexity.GoogleProtobufEnumDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufEnumDescriptorProto.value":
		if e.complexity.GoogleProtobufEnumDescriptorProto.Value == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProto.Value(childComplexity), true

	case "GoogleProtobufEnumDescriptorProto.options":
		if e.complexity.GoogleProtobufEnumDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufEnumDescriptorProto.reservedRange":
		if e.complexity.GoogleProtobufEnumDescriptorProto.ReservedRange == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProto.ReservedRange(childComplexity), true

	case "GoogleProtobufEnumDescriptorProto.reservedName":
		if e.complexity.GoogleProtobufEnumDescriptorProto.ReservedName == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProto.ReservedName(childComplexity), true

	case "GoogleProtobufEnumDescriptorProtoEnumReservedRange.start":
		if e.complexity.GoogleProtobufEnumDescriptorProtoEnumReservedRange.Start == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProtoEnumReservedRange.Start(childComplexity), true

	case "GoogleProtobufEnumDescriptorProtoEnumReservedRange.end":
		if e.complexity.GoogleProtobufEnumDescriptorProtoEnumReservedRange.End == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProtoEnumReservedRange.End(childComplexity), true

	case "GoogleProtobufEnumOptions.allowAlias":
		if e.complexity.GoogleProtobufEnumOptions.AllowAlias == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumOptions.AllowAlias(childComplexity), true

	case "GoogleProtobufEnumOptions.deprecated":
		if e.complexity.GoogleProtobufEnumOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumOptions.Deprecated(childComplexity), true

	case "GoogleProtobufEnumOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufEnumOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufEnumValueDescriptorProto.name":
		if e.complexity.GoogleProtobufEnumValueDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumValueDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufEnumValueDescriptorProto.number":
		if e.complexity.GoogleProtobufEnumValueDescriptorProto.Number == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumValueDescriptorProto.Number(childComplexity), true

	case "GoogleProtobufEnumValueDescriptorProto.options":
		if e.complexity.GoogleProtobufEnumValueDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumValueDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufEnumValueOptions.deprecated":
		if e.complexity.GoogleProtobufEnumValueOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumValueOptions.Deprecated(childComplexity), true

	case "GoogleProtobufEnumValueOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufEnumValueOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumValueOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufExtensionRangeOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufExtensionRangeOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufExtensionRangeOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.name":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.number":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Number == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Number(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.label":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Label == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Label(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.type":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Type == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Type(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.typeName":
		if e.complexity.GoogleProtobufFieldDescriptorProto.TypeName == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.TypeName(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.extendee":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Extendee == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Extendee(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.defaultValue":
		if e.complexity.GoogleProtobufFieldDescriptorProto.DefaultValue == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.DefaultValue(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.oneofIndex":
		if e.complexity.GoogleProtobufFieldDescriptorProto.OneofIndex == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.OneofIndex(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.jsonName":
		if e.complexity.GoogleProtobufFieldDescriptorProto.JsonName == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.JsonName(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.options":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufFieldOptions.ctype":
		if e.complexity.GoogleProtobufFieldOptions.Ctype == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Ctype(childComplexity), true

	case "GoogleProtobufFieldOptions.packed":
		if e.complexity.GoogleProtobufFieldOptions.Packed == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Packed(childComplexity), true

	case "GoogleProtobufFieldOptions.jstype":
		if e.complexity.GoogleProtobufFieldOptions.Jstype == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Jstype(childComplexity), true

	case "GoogleProtobufFieldOptions.lazy":
		if e.complexity.GoogleProtobufFieldOptions.Lazy == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Lazy(childComplexity), true

	case "GoogleProtobufFieldOptions.deprecated":
		if e.complexity.GoogleProtobufFieldOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Deprecated(childComplexity), true

	case "GoogleProtobufFieldOptions.weak":
		if e.complexity.GoogleProtobufFieldOptions.Weak == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Weak(childComplexity), true

	case "GoogleProtobufFieldOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufFieldOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.name":
		if e.complexity.GoogleProtobufFileDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.package":
		if e.complexity.GoogleProtobufFileDescriptorProto.Package == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Package(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.dependency":
		if e.complexity.GoogleProtobufFileDescriptorProto.Dependency == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Dependency(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.publicDependency":
		if e.complexity.GoogleProtobufFileDescriptorProto.PublicDependency == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.PublicDependency(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.weakDependency":
		if e.complexity.GoogleProtobufFileDescriptorProto.WeakDependency == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.WeakDependency(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.messageType":
		if e.complexity.GoogleProtobufFileDescriptorProto.MessageType == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.MessageType(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.enumType":
		if e.complexity.GoogleProtobufFileDescriptorProto.EnumType == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.EnumType(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.service":
		if e.complexity.GoogleProtobufFileDescriptorProto.Service == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Service(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.extension":
		if e.complexity.GoogleProtobufFileDescriptorProto.Extension == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Extension(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.options":
		if e.complexity.GoogleProtobufFileDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.sourceCodeInfo":
		if e.complexity.GoogleProtobufFileDescriptorProto.SourceCodeInfo == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.SourceCodeInfo(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.syntax":
		if e.complexity.GoogleProtobufFileDescriptorProto.Syntax == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Syntax(childComplexity), true

	case "GoogleProtobufFileDescriptorSet.file":
		if e.complexity.GoogleProtobufFileDescriptorSet.File == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorSet.File(childComplexity), true

	case "GoogleProtobufFileOptions.javaPackage":
		if e.complexity.GoogleProtobufFileOptions.JavaPackage == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaPackage(childComplexity), true

	case "GoogleProtobufFileOptions.javaOuterClassname":
		if e.complexity.GoogleProtobufFileOptions.JavaOuterClassname == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaOuterClassname(childComplexity), true

	case "GoogleProtobufFileOptions.javaMultipleFiles":
		if e.complexity.GoogleProtobufFileOptions.JavaMultipleFiles == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaMultipleFiles(childComplexity), true

	case "GoogleProtobufFileOptions.javaGenerateEqualsAndHash":
		if e.complexity.GoogleProtobufFileOptions.JavaGenerateEqualsAndHash == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaGenerateEqualsAndHash(childComplexity), true

	case "GoogleProtobufFileOptions.javaStringCheckUtf8":
		if e.complexity.GoogleProtobufFileOptions.JavaStringCheckUtf8 == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaStringCheckUtf8(childComplexity), true

	case "GoogleProtobufFileOptions.optimizeFor":
		if e.complexity.GoogleProtobufFileOptions.OptimizeFor == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.OptimizeFor(childComplexity), true

	case "GoogleProtobufFileOptions.goPackage":
		if e.complexity.GoogleProtobufFileOptions.GoPackage == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.GoPackage(childComplexity), true

	case "GoogleProtobufFileOptions.ccGenericServices":
		if e.complexity.GoogleProtobufFileOptions.CcGenericServices == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.CcGenericServices(childComplexity), true

	case "GoogleProtobufFileOptions.javaGenericServices":
		if e.complexity.GoogleProtobufFileOptions.JavaGenericServices == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaGenericServices(childComplexity), true

	case "GoogleProtobufFileOptions.pyGenericServices":
		if e.complexity.GoogleProtobufFileOptions.PyGenericServices == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.PyGenericServices(childComplexity), true

	case "GoogleProtobufFileOptions.phpGenericServices":
		if e.complexity.GoogleProtobufFileOptions.PhpGenericServices == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.PhpGenericServices(childComplexity), true

	case "GoogleProtobufFileOptions.deprecated":
		if e.complexity.GoogleProtobufFileOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.Deprecated(childComplexity), true

	case "GoogleProtobufFileOptions.ccEnableArenas":
		if e.complexity.GoogleProtobufFileOptions.CcEnableArenas == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.CcEnableArenas(childComplexity), true

	case "GoogleProtobufFileOptions.objcClassPrefix":
		if e.complexity.GoogleProtobufFileOptions.ObjcClassPrefix == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.ObjcClassPrefix(childComplexity), true

	case "GoogleProtobufFileOptions.csharpNamespace":
		if e.complexity.GoogleProtobufFileOptions.CsharpNamespace == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.CsharpNamespace(childComplexity), true

	case "GoogleProtobufFileOptions.swiftPrefix":
		if e.complexity.GoogleProtobufFileOptions.SwiftPrefix == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.SwiftPrefix(childComplexity), true

	case "GoogleProtobufFileOptions.phpClassPrefix":
		if e.complexity.GoogleProtobufFileOptions.PhpClassPrefix == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.PhpClassPrefix(childComplexity), true

	case "GoogleProtobufFileOptions.phpNamespace":
		if e.complexity.GoogleProtobufFileOptions.PhpNamespace == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.PhpNamespace(childComplexity), true

	case "GoogleProtobufFileOptions.phpMetadataNamespace":
		if e.complexity.GoogleProtobufFileOptions.PhpMetadataNamespace == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.PhpMetadataNamespace(childComplexity), true

	case "GoogleProtobufFileOptions.rubyPackage":
		if e.complexity.GoogleProtobufFileOptions.RubyPackage == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.RubyPackage(childComplexity), true

	case "GoogleProtobufFileOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufFileOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufGeneratedCodeInfo.annotation":
		if e.complexity.GoogleProtobufGeneratedCodeInfo.Annotation == nil {
			break
		}

		return e.complexity.GoogleProtobufGeneratedCodeInfo.Annotation(childComplexity), true

	case "GoogleProtobufGeneratedCodeInfoAnnotation.path":
		if e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.Path == nil {
			break
		}

		return e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.Path(childComplexity), true

	case "GoogleProtobufGeneratedCodeInfoAnnotation.sourceFile":
		if e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.SourceFile == nil {
			break
		}

		return e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.SourceFile(childComplexity), true

	case "GoogleProtobufGeneratedCodeInfoAnnotation.begin":
		if e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.Begin == nil {
			break
		}

		return e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.Begin(childComplexity), true

	case "GoogleProtobufGeneratedCodeInfoAnnotation.end":
		if e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.End == nil {
			break
		}

		return e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.End(childComplexity), true

	case "GoogleProtobufMessageOptions.messageSetWireFormat":
		if e.complexity.GoogleProtobufMessageOptions.MessageSetWireFormat == nil {
			break
		}

		return e.complexity.GoogleProtobufMessageOptions.MessageSetWireFormat(childComplexity), true

	case "GoogleProtobufMessageOptions.noStandardDescriptorAccessor":
		if e.complexity.GoogleProtobufMessageOptions.NoStandardDescriptorAccessor == nil {
			break
		}

		return e.complexity.GoogleProtobufMessageOptions.NoStandardDescriptorAccessor(childComplexity), true

	case "GoogleProtobufMessageOptions.deprecated":
		if e.complexity.GoogleProtobufMessageOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufMessageOptions.Deprecated(childComplexity), true

	case "GoogleProtobufMessageOptions.mapEntry":
		if e.complexity.GoogleProtobufMessageOptions.MapEntry == nil {
			break
		}

		return e.complexity.GoogleProtobufMessageOptions.MapEntry(childComplexity), true

	case "GoogleProtobufMessageOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufMessageOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufMessageOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.name":
		if e.complexity.GoogleProtobufMethodDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.inputType":
		if e.complexity.GoogleProtobufMethodDescriptorProto.InputType == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.InputType(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.outputType":
		if e.complexity.GoogleProtobufMethodDescriptorProto.OutputType == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.OutputType(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.options":
		if e.complexity.GoogleProtobufMethodDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.clientStreaming":
		if e.complexity.GoogleProtobufMethodDescriptorProto.ClientStreaming == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.ClientStreaming(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.serverStreaming":
		if e.complexity.GoogleProtobufMethodDescriptorProto.ServerStreaming == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.ServerStreaming(childComplexity), true

	case "GoogleProtobufMethodOptions.deprecated":
		if e.complexity.GoogleProtobufMethodOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodOptions.Deprecated(childComplexity), true

	case "GoogleProtobufMethodOptions.idempotencyLevel":
		if e.complexity.GoogleProtobufMethodOptions.IdempotencyLevel == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodOptions.IdempotencyLevel(childComplexity), true

	case "GoogleProtobufMethodOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufMethodOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufOneofDescriptorProto.name":
		if e.complexity.GoogleProtobufOneofDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufOneofDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufOneofDescriptorProto.options":
		if e.complexity.GoogleProtobufOneofDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufOneofDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufOneofOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufOneofOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufOneofOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufServiceDescriptorProto.name":
		if e.complexity.GoogleProtobufServiceDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufServiceDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufServiceDescriptorProto.method":
		if e.complexity.GoogleProtobufServiceDescriptorProto.Method == nil {
			break
		}

		return e.complexity.GoogleProtobufServiceDescriptorProto.Method(childComplexity), true

	case "GoogleProtobufServiceDescriptorProto.options":
		if e.complexity.GoogleProtobufServiceDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufServiceDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufServiceOptions.deprecated":
		if e.complexity.GoogleProtobufServiceOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufServiceOptions.Deprecated(childComplexity), true

	case "GoogleProtobufServiceOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufServiceOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufServiceOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufSourceCodeInfo.location":
		if e.complexity.GoogleProtobufSourceCodeInfo.Location == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfo.Location(childComplexity), true

	case "GoogleProtobufSourceCodeInfoLocation.path":
		if e.complexity.GoogleProtobufSourceCodeInfoLocation.Path == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfoLocation.Path(childComplexity), true

	case "GoogleProtobufSourceCodeInfoLocation.span":
		if e.complexity.GoogleProtobufSourceCodeInfoLocation.Span == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfoLocation.Span(childComplexity), true

	case "GoogleProtobufSourceCodeInfoLocation.leadingComments":
		if e.complexity.GoogleProtobufSourceCodeInfoLocation.LeadingComments == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfoLocation.LeadingComments(childComplexity), true

	case "GoogleProtobufSourceCodeInfoLocation.trailingComments":
		if e.complexity.GoogleProtobufSourceCodeInfoLocation.TrailingComments == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfoLocation.TrailingComments(childComplexity), true

	case "GoogleProtobufSourceCodeInfoLocation.leadingDetachedComments":
		if e.complexity.GoogleProtobufSourceCodeInfoLocation.LeadingDetachedComments == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfoLocation.LeadingDetachedComments(childComplexity), true

	case "GoogleProtobufUninterpretedOption.name":
		if e.complexity.GoogleProtobufUninterpretedOption.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.Name(childComplexity), true

	case "GoogleProtobufUninterpretedOption.identifierValue":
		if e.complexity.GoogleProtobufUninterpretedOption.IdentifierValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.IdentifierValue(childComplexity), true

	case "GoogleProtobufUninterpretedOption.positiveIntValue":
		if e.complexity.GoogleProtobufUninterpretedOption.PositiveIntValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.PositiveIntValue(childComplexity), true

	case "GoogleProtobufUninterpretedOption.negativeIntValue":
		if e.complexity.GoogleProtobufUninterpretedOption.NegativeIntValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.NegativeIntValue(childComplexity), true

	case "GoogleProtobufUninterpretedOption.doubleValue":
		if e.complexity.GoogleProtobufUninterpretedOption.DoubleValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.DoubleValue(childComplexity), true

	case "GoogleProtobufUninterpretedOption.stringValue":
		if e.complexity.GoogleProtobufUninterpretedOption.StringValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.StringValue(childComplexity), true

	case "GoogleProtobufUninterpretedOption.aggregateValue":
		if e.complexity.GoogleProtobufUninterpretedOption.AggregateValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.AggregateValue(childComplexity), true

	case "GoogleProtobufUninterpretedOptionNamePart.namePart":
		if e.complexity.GoogleProtobufUninterpretedOptionNamePart.NamePart == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOptionNamePart.NamePart(childComplexity), true

	case "GoogleProtobufUninterpretedOptionNamePart.isExtension":
		if e.complexity.GoogleProtobufUninterpretedOptionNamePart.IsExtension == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOptionNamePart.IsExtension(childComplexity), true

	case "Mutation.ContactRequest":
		if e.complexity.Mutation.ContactRequest == nil {
			break
		}

		args, err := field_Mutation_ContactRequest_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactRequest(childComplexity, args["contact"].(*entity.Contact), args["introText"].(string)), true

	case "Mutation.ContactAcceptRequest":
		if e.complexity.Mutation.ContactAcceptRequest == nil {
			break
		}

		args, err := field_Mutation_ContactAcceptRequest_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactAcceptRequest(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string)), true

	case "Mutation.ContactRemove":
		if e.complexity.Mutation.ContactRemove == nil {
			break
		}

		args, err := field_Mutation_ContactRemove_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactRemove(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string)), true

	case "Mutation.ContactUpdate":
		if e.complexity.Mutation.ContactUpdate == nil {
			break
		}

		args, err := field_Mutation_ContactUpdate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactUpdate(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string)), true

	case "Mutation.ConversationCreate":
		if e.complexity.Mutation.ConversationCreate == nil {
			break
		}

		args, err := field_Mutation_ConversationCreate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConversationCreate(childComplexity, args["contacts"].([]*entity.Contact), args["title"].(string), args["topic"].(string)), true

	case "Mutation.ConversationInvite":
		if e.complexity.Mutation.ConversationInvite == nil {
			break
		}

		args, err := field_Mutation_ConversationInvite_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConversationInvite(childComplexity, args["conversation"].(*entity.Conversation), args["members"].([]*entity.ConversationMember)), true

	case "Mutation.ConversationExclude":
		if e.complexity.Mutation.ConversationExclude == nil {
			break
		}

		args, err := field_Mutation_ConversationExclude_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConversationExclude(childComplexity, args["conversation"].(*entity.Conversation), args["members"].([]*entity.ConversationMember)), true

	case "Mutation.ConversationAddMessage":
		if e.complexity.Mutation.ConversationAddMessage == nil {
			break
		}

		args, err := field_Mutation_ConversationAddMessage_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConversationAddMessage(childComplexity, args["conversation"].(*entity.Conversation), args["message"].(*entity.Message)), true

	case "Mutation.GenerateFakeData":
		if e.complexity.Mutation.GenerateFakeData == nil {
			break
		}

		args, err := field_Mutation_GenerateFakeData_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GenerateFakeData(childComplexity, args["T"].(bool)), true

	case "Mutation.RunIntegrationTests":
		if e.complexity.Mutation.RunIntegrationTests == nil {
			break
		}

		args, err := field_Mutation_RunIntegrationTests_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RunIntegrationTests(childComplexity, args["name"].(string)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := field_Query_node_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.ID":
		if e.complexity.Query.Id == nil {
			break
		}

		args, err := field_Query_ID_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Id(childComplexity, args["T"].(bool)), true

	case "Query.EventList":
		if e.complexity.Query.EventList == nil {
			break
		}

		args, err := field_Query_EventList_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EventList(childComplexity, args["filter"].(*p2p.Event), args["onlyWithoutAckedAt"].(*int32), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string)), true

	case "Query.GetEvent":
		if e.complexity.Query.GetEvent == nil {
			break
		}

		args, err := field_Query_GetEvent_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetEvent(childComplexity, args["id"].(string), args["senderId"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sentAt"].(*time.Time), args["receivedAt"].(*time.Time), args["ackedAt"].(*time.Time), args["direction"].(*int32), args["senderApiVersion"].(uint32), args["receiverApiVersion"].(uint32), args["receiverId"].(string), args["kind"].(*int32), args["attributes"].([]byte), args["conversationId"].(string)), true

	case "Query.ContactList":
		if e.complexity.Query.ContactList == nil {
			break
		}

		args, err := field_Query_ContactList_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContactList(childComplexity, args["filter"].(*entity.Contact), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string)), true

	case "Query.GetContact":
		if e.complexity.Query.GetContact == nil {
			break
		}

		args, err := field_Query_GetContact_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetContact(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string)), true

	case "Query.ConversationList":
		if e.complexity.Query.ConversationList == nil {
			break
		}

		args, err := field_Query_ConversationList_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConversationList(childComplexity, args["filter"].(*entity.Conversation), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string)), true

	case "Query.GetConversation":
		if e.complexity.Query.GetConversation == nil {
			break
		}

		args, err := field_Query_GetConversation_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetConversation(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["title"].(string), args["topic"].(string), args["members"].([]*entity.ConversationMember)), true

	case "Query.GetConversationMember":
		if e.complexity.Query.GetConversationMember == nil {
			break
		}

		args, err := field_Query_GetConversationMember_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetConversationMember(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["status"].(*int32), args["contact"].(*entity.Contact), args["conversationId"].(string), args["contactId"].(string)), true

	case "Query.DeviceInfos":
		if e.complexity.Query.DeviceInfos == nil {
			break
		}

		args, err := field_Query_DeviceInfos_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeviceInfos(childComplexity, args["T"].(bool)), true

	case "Query.AppVersion":
		if e.complexity.Query.AppVersion == nil {
			break
		}

		args, err := field_Query_AppVersion_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppVersion(childComplexity, args["T"].(bool)), true

	case "Query.Peers":
		if e.complexity.Query.Peers == nil {
			break
		}

		args, err := field_Query_Peers_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Peers(childComplexity, args["T"].(bool)), true

	case "Query.Protocols":
		if e.complexity.Query.Protocols == nil {
			break
		}

		args, err := field_Query_Protocols_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Protocols(childComplexity, args["id"].(string), args["addrs"].([]string), args["connection"].(*int32)), true

	case "Query.Panic":
		if e.complexity.Query.Panic == nil {
			break
		}

		args, err := field_Query_Panic_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Panic(childComplexity, args["T"].(bool)), true

	case "Subscription.EventStream":
		if e.complexity.Subscription.EventStream == nil {
			break
		}

		args, err := field_Subscription_EventStream_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.EventStream(childComplexity, args["filter"].(*p2p.Event)), true

	case "Subscription.MonitorBandwidth":
		if e.complexity.Subscription.MonitorBandwidth == nil {
			break
		}

		args, err := field_Subscription_MonitorBandwidth_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MonitorBandwidth(childComplexity, args["id"].(*string), args["totalIn"].(*int64), args["totalOut"].(*int64), args["rateIn"].(*float64), args["rateOut"].(*float64), args["type"].(*int32)), true

	case "Subscription.MonitorPeers":
		if e.complexity.Subscription.MonitorPeers == nil {
			break
		}

		args, err := field_Subscription_MonitorPeers_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MonitorPeers(childComplexity, args["T"].(bool)), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	next := ec._Subscription(ctx, op.SelectionSet)
	if ec.Errors != nil {
		return graphql.OneShot(&graphql.Response{Data: []byte("null"), Errors: ec.Errors})
	}

	var buf bytes.Buffer
	return func() *graphql.Response {
		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		if buf == nil {
			return nil
		}

		return &graphql.Response{
			Data:       buf,
			Errors:     ec.Errors,
			Extensions: ec.Extensions,
		}
	}
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var bertyEntityContactImplementors = []string{"BertyEntityContact", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityContact(ctx context.Context, sel ast.SelectionSet, obj *entity.Contact) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityContactImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityContact")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityContact_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityContact_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityContact_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityContact_deletedAt(ctx, field, obj)
		case "sigchain":
			out.Values[i] = ec._BertyEntityContact_sigchain(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityContact_status(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._BertyEntityContact_devices(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._BertyEntityContact_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "displayStatus":
			out.Values[i] = ec._BertyEntityContact_displayStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "overrideDisplayName":
			out.Values[i] = ec._BertyEntityContact_overrideDisplayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "overrideDisplayStatus":
			out.Values[i] = ec._BertyEntityContact_overrideDisplayStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_id(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityContact().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_sigchain(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sigchain, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_status(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Contact_Status)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_devices(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Device)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntityDevice(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_displayName(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_displayStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayStatus, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_overrideDisplayName(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverrideDisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_overrideDisplayStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverrideDisplayStatus, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityContactPayloadImplementors = []string{"BertyEntityContactPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityContactPayload(ctx context.Context, sel ast.SelectionSet, obj *entity.Contact) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityContactPayloadImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityContactPayload")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityContactPayload_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityContactPayload_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityContactPayload_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityContactPayload_deletedAt(ctx, field, obj)
		case "sigchain":
			out.Values[i] = ec._BertyEntityContactPayload_sigchain(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityContactPayload_status(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._BertyEntityContactPayload_devices(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._BertyEntityContactPayload_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "displayStatus":
			out.Values[i] = ec._BertyEntityContactPayload_displayStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "overrideDisplayName":
			out.Values[i] = ec._BertyEntityContactPayload_overrideDisplayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "overrideDisplayStatus":
			out.Values[i] = ec._BertyEntityContactPayload_overrideDisplayStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactPayload_id(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityContactPayload().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactPayload_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactPayload_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactPayload_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactPayload_sigchain(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sigchain, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactPayload_status(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Contact_Status)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactPayload_devices(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Device)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntityDevice(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactPayload_displayName(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactPayload_displayStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayStatus, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactPayload_overrideDisplayName(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverrideDisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactPayload_overrideDisplayStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverrideDisplayStatus, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityConversationImplementors = []string{"BertyEntityConversation", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversation(ctx context.Context, sel ast.SelectionSet, obj *entity.Conversation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversation")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityConversation_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversation_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversation_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityConversation_deletedAt(ctx, field, obj)
		case "title":
			out.Values[i] = ec._BertyEntityConversation_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "topic":
			out.Values[i] = ec._BertyEntityConversation_topic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "members":
			out.Values[i] = ec._BertyEntityConversation_members(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_id(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityConversation().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_title(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_topic(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_members(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Members, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.ConversationMember)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntityConversationMember(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyEntityConversationMemberImplementors = []string{"BertyEntityConversationMember", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationMember(ctx context.Context, sel ast.SelectionSet, obj *entity.ConversationMember) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationMemberImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationMember")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityConversationMember_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversationMember_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversationMember_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityConversationMember_deletedAt(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityConversationMember_status(ctx, field, obj)
		case "contact":
			out.Values[i] = ec._BertyEntityConversationMember_contact(ctx, field, obj)
		case "conversationId":
			out.Values[i] = ec._BertyEntityConversationMember_conversationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "contactId":
			out.Values[i] = ec._BertyEntityConversationMember_contactId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_id(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityConversationMember().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_status(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.ConversationMember_Status)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_contact(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_conversationId(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConversationID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityConversationMemberPayloadImplementors = []string{"BertyEntityConversationMemberPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationMemberPayload(ctx context.Context, sel ast.SelectionSet, obj *entity.ConversationMember) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationMemberPayloadImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationMemberPayload")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityConversationMemberPayload_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_deletedAt(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_status(ctx, field, obj)
		case "contact":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_contact(ctx, field, obj)
		case "conversationId":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_conversationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "contactId":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_contactId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMemberPayload_id(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMemberPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityConversationMemberPayload().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMemberPayload_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMemberPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMemberPayload_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMemberPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMemberPayload_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMemberPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMemberPayload_status(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMemberPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.ConversationMember_Status)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMemberPayload_contact(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMemberPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMemberPayload_conversationId(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMemberPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConversationID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMemberPayload_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMemberPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityConversationPayloadImplementors = []string{"BertyEntityConversationPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationPayload(ctx context.Context, sel ast.SelectionSet, obj *entity.Conversation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationPayloadImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationPayload")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityConversationPayload_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversationPayload_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversationPayload_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityConversationPayload_deletedAt(ctx, field, obj)
		case "title":
			out.Values[i] = ec._BertyEntityConversationPayload_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "topic":
			out.Values[i] = ec._BertyEntityConversationPayload_topic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "members":
			out.Values[i] = ec._BertyEntityConversationPayload_members(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationPayload_id(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityConversationPayload().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationPayload_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationPayload_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationPayload_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationPayload_title(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationPayload_topic(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationPayload_members(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Members, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.ConversationMember)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntityConversationMember(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyEntityDeviceImplementors = []string{"BertyEntityDevice", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityDevice(ctx context.Context, sel ast.SelectionSet, obj *entity.Device) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityDeviceImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityDevice")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityDevice_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityDevice_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityDevice_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityDevice_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._BertyEntityDevice_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "status":
			out.Values[i] = ec._BertyEntityDevice_status(ctx, field, obj)
		case "apiVersion":
			out.Values[i] = ec._BertyEntityDevice_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "contactId":
			out.Values[i] = ec._BertyEntityDevice_contactId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_id(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityDevice().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_name(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_status(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Device_Status)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_apiVersion(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApiVersion, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	rctx.Result = res
	return models.MarshalUint32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityMessageImplementors = []string{"BertyEntityMessage"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityMessage(ctx context.Context, sel ast.SelectionSet, obj *entity.Message) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityMessageImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityMessage")
		case "text":
			out.Values[i] = ec._BertyEntityMessage_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityMessage_text(ctx context.Context, field graphql.CollectedField, obj *entity.Message) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityMessage",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntitySenderAliasImplementors = []string{"BertyEntitySenderAlias"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntitySenderAlias(ctx context.Context, sel ast.SelectionSet, obj *entity.SenderAlias) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntitySenderAliasImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntitySenderAlias")
		case "id":
			out.Values[i] = ec._BertyEntitySenderAlias_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createdAt":
			out.Values[i] = ec._BertyEntitySenderAlias_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntitySenderAlias_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntitySenderAlias_deletedAt(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntitySenderAlias_status(ctx, field, obj)
		case "originDeviceId":
			out.Values[i] = ec._BertyEntitySenderAlias_originDeviceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "contactId":
			out.Values[i] = ec._BertyEntitySenderAlias_contactId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "conversationId":
			out.Values[i] = ec._BertyEntitySenderAlias_conversationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "aliasIdentifier":
			out.Values[i] = ec._BertyEntitySenderAlias_aliasIdentifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "used":
			out.Values[i] = ec._BertyEntitySenderAlias_used(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_id(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_status(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.SenderAlias_Status)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_originDeviceId(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginDeviceID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_conversationId(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConversationID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_aliasIdentifier(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AliasIdentifier, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_used(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Used, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyNodeAppVersionPayloadImplementors = []string{"BertyNodeAppVersionPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeAppVersionPayload(ctx context.Context, sel ast.SelectionSet, obj *node.AppVersionOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeAppVersionPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeAppVersionPayload")
		case "version":
			out.Values[i] = ec._BertyNodeAppVersionPayload_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeAppVersionPayload_version(ctx context.Context, field graphql.CollectedField, obj *node.AppVersionOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeAppVersionPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeContactEdgeImplementors = []string{"BertyNodeContactEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeContactEdge(ctx context.Context, sel ast.SelectionSet, obj *node.ContactEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeContactEdgeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeContactEdge")
		case "node":
			out.Values[i] = ec._BertyNodeContactEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._BertyNodeContactEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeContactEdge_node(ctx context.Context, field graphql.CollectedField, obj *node.ContactEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeContactEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeContactEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *node.ContactEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeContactEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeContactListConnectionImplementors = []string{"BertyNodeContactListConnection"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeContactListConnection(ctx context.Context, sel ast.SelectionSet, obj *node.ContactListConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeContactListConnectionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeContactListConnection")
		case "edges":
			out.Values[i] = ec._BertyNodeContactListConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BertyNodeContactListConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeContactListConnection_edges(ctx context.Context, field graphql.CollectedField, obj *node.ContactListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeContactListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*node.ContactEdge)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyNodeContactEdge(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeContactListConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *node.ContactListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeContactListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*node.PageInfo)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec._BertyNodePageInfo(ctx, field.Selections, res)
}

var bertyNodeConversationEdgeImplementors = []string{"BertyNodeConversationEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeConversationEdge(ctx context.Context, sel ast.SelectionSet, obj *node.ConversationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeConversationEdgeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeConversationEdge")
		case "node":
			out.Values[i] = ec._BertyNodeConversationEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._BertyNodeConversationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeConversationEdge_node(ctx context.Context, field graphql.CollectedField, obj *node.ConversationEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeConversationEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeConversationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *node.ConversationEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeConversationEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeConversationListConnectionImplementors = []string{"BertyNodeConversationListConnection"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeConversationListConnection(ctx context.Context, sel ast.SelectionSet, obj *node.ConversationListConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeConversationListConnectionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeConversationListConnection")
		case "edges":
			out.Values[i] = ec._BertyNodeConversationListConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BertyNodeConversationListConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeConversationListConnection_edges(ctx context.Context, field graphql.CollectedField, obj *node.ConversationListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeConversationListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*node.ConversationEdge)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyNodeConversationEdge(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeConversationListConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *node.ConversationListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeConversationListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*node.PageInfo)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec._BertyNodePageInfo(ctx, field.Selections, res)
}

var bertyNodeEventEdgeImplementors = []string{"BertyNodeEventEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeEventEdge(ctx context.Context, sel ast.SelectionSet, obj *node.EventEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeEventEdgeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeEventEdge")
		case "node":
			out.Values[i] = ec._BertyNodeEventEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._BertyNodeEventEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeEventEdge_node(ctx context.Context, field graphql.CollectedField, obj *node.EventEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeEventEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*p2p.Event)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyP2pEvent(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeEventEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *node.EventEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeEventEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeEventListConnectionImplementors = []string{"BertyNodeEventListConnection"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeEventListConnection(ctx context.Context, sel ast.SelectionSet, obj *node.EventListConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeEventListConnectionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeEventListConnection")
		case "edges":
			out.Values[i] = ec._BertyNodeEventListConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BertyNodeEventListConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeEventListConnection_edges(ctx context.Context, field graphql.CollectedField, obj *node.EventListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeEventListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*node.EventEdge)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyNodeEventEdge(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeEventListConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *node.EventListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeEventListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*node.PageInfo)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec._BertyNodePageInfo(ctx, field.Selections, res)
}

var bertyNodeIntegrationTestPayloadImplementors = []string{"BertyNodeIntegrationTestPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeIntegrationTestPayload(ctx context.Context, sel ast.SelectionSet, obj *node.IntegrationTestOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeIntegrationTestPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeIntegrationTestPayload")
		case "name":
			out.Values[i] = ec._BertyNodeIntegrationTestPayload_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "success":
			out.Values[i] = ec._BertyNodeIntegrationTestPayload_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "verbose":
			out.Values[i] = ec._BertyNodeIntegrationTestPayload_verbose(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "startedAt":
			out.Values[i] = ec._BertyNodeIntegrationTestPayload_startedAt(ctx, field, obj)
		case "finishedAt":
			out.Values[i] = ec._BertyNodeIntegrationTestPayload_finishedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeIntegrationTestPayload_name(ctx context.Context, field graphql.CollectedField, obj *node.IntegrationTestOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeIntegrationTestPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeIntegrationTestPayload_success(ctx context.Context, field graphql.CollectedField, obj *node.IntegrationTestOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeIntegrationTestPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeIntegrationTestPayload_verbose(ctx context.Context, field graphql.CollectedField, obj *node.IntegrationTestOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeIntegrationTestPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Verbose, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeIntegrationTestPayload_startedAt(ctx context.Context, field graphql.CollectedField, obj *node.IntegrationTestOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeIntegrationTestPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeIntegrationTestPayload_finishedAt(ctx context.Context, field graphql.CollectedField, obj *node.IntegrationTestOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeIntegrationTestPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

var bertyNodePageInfoImplementors = []string{"BertyNodePageInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodePageInfo(ctx context.Context, sel ast.SelectionSet, obj *node.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodePageInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodePageInfo")
		case "startCursor":
			out.Values[i] = ec._BertyNodePageInfo_startCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "endCursor":
			out.Values[i] = ec._BertyNodePageInfo_endCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "hasNextPage":
			out.Values[i] = ec._BertyNodePageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "hasPreviousPage":
			out.Values[i] = ec._BertyNodePageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "count":
			out.Values[i] = ec._BertyNodePageInfo_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *node.PageInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *node.PageInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *node.PageInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *node.PageInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePageInfo_count(ctx context.Context, field graphql.CollectedField, obj *node.PageInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	rctx.Result = res
	return models.MarshalUint32(res)
}

var bertyNodePaginationImplementors = []string{"BertyNodePagination"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodePagination(ctx context.Context, sel ast.SelectionSet, obj *node.Pagination) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodePaginationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodePagination")
		case "orderBy":
			out.Values[i] = ec._BertyNodePagination_orderBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "orderDesc":
			out.Values[i] = ec._BertyNodePagination_orderDesc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "first":
			out.Values[i] = ec._BertyNodePagination_first(ctx, field, obj)
		case "after":
			out.Values[i] = ec._BertyNodePagination_after(ctx, field, obj)
		case "last":
			out.Values[i] = ec._BertyNodePagination_last(ctx, field, obj)
		case "before":
			out.Values[i] = ec._BertyNodePagination_before(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_orderBy(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderBy, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_orderDesc(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderDesc, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_first(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.First, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	rctx.Result = res
	return models.MarshalInt32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_after(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.After, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_last(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Last, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	rctx.Result = res
	return models.MarshalInt32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_before(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Before, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodePingDestinationImplementors = []string{"BertyNodePingDestination"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodePingDestination(ctx context.Context, sel ast.SelectionSet, obj *node.PingDestination) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodePingDestinationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodePingDestination")
		case "destination":
			out.Values[i] = ec._BertyNodePingDestination_destination(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePingDestination_destination(ctx context.Context, field graphql.CollectedField, obj *node.PingDestination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePingDestination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Destination, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeProtocolsPayloadImplementors = []string{"BertyNodeProtocolsPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeProtocolsPayload(ctx context.Context, sel ast.SelectionSet, obj *node.ProtocolsOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeProtocolsPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeProtocolsPayload")
		case "protocols":
			out.Values[i] = ec._BertyNodeProtocolsPayload_protocols(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeProtocolsPayload_protocols(ctx context.Context, field graphql.CollectedField, obj *node.ProtocolsOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeProtocolsPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Protocols, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var bertyNodeVoidImplementors = []string{"BertyNodeVoid"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeVoid(ctx context.Context, sel ast.SelectionSet, obj *node.Void) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeVoidImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeVoid")
		case "T":
			out.Values[i] = ec._BertyNodeVoid_T(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeVoid_T(ctx context.Context, field graphql.CollectedField, obj *node.Void) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeVoid",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.T, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyNodeVoidPayloadImplementors = []string{"BertyNodeVoidPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeVoidPayload(ctx context.Context, sel ast.SelectionSet, obj *node.Void) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeVoidPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeVoidPayload")
		case "T":
			out.Values[i] = ec._BertyNodeVoidPayload_T(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeVoidPayload_T(ctx context.Context, field graphql.CollectedField, obj *node.Void) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeVoidPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.T, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyP2pAckAttrsImplementors = []string{"BertyP2pAckAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pAckAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.AckAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pAckAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pAckAttrs")
		case "ids":
			out.Values[i] = ec._BertyP2pAckAttrs_ids(ctx, field, obj)
		case "ErrMsg":
			out.Values[i] = ec._BertyP2pAckAttrs_ErrMsg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pAckAttrs_ids(ctx context.Context, field graphql.CollectedField, obj *p2p.AckAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pAckAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pAckAttrs_ErrMsg(ctx context.Context, field graphql.CollectedField, obj *p2p.AckAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pAckAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrMsg, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyP2pBandwidthStatsImplementors = []string{"BertyP2pBandwidthStats"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pBandwidthStats(ctx context.Context, sel ast.SelectionSet, obj *p2p.BandwidthStats) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pBandwidthStatsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pBandwidthStats")
		case "id":
			out.Values[i] = ec._BertyP2pBandwidthStats_id(ctx, field, obj)
		case "totalIn":
			out.Values[i] = ec._BertyP2pBandwidthStats_totalIn(ctx, field, obj)
		case "totalOut":
			out.Values[i] = ec._BertyP2pBandwidthStats_totalOut(ctx, field, obj)
		case "rateIn":
			out.Values[i] = ec._BertyP2pBandwidthStats_rateIn(ctx, field, obj)
		case "rateOut":
			out.Values[i] = ec._BertyP2pBandwidthStats_rateOut(ctx, field, obj)
		case "type":
			out.Values[i] = ec._BertyP2pBandwidthStats_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStats_id(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStats_totalIn(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalIn, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	return models.MarshalInt64(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStats_totalOut(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalOut, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	return models.MarshalInt64(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStats_rateIn(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateIn, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	return models.MarshalDouble(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStats_rateOut(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateOut, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	return models.MarshalDouble(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStats_type(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.MetricsType)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

var bertyP2pBandwidthStatsPayloadImplementors = []string{"BertyP2pBandwidthStatsPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pBandwidthStatsPayload(ctx context.Context, sel ast.SelectionSet, obj *p2p.BandwidthStats) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pBandwidthStatsPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pBandwidthStatsPayload")
		case "id":
			out.Values[i] = ec._BertyP2pBandwidthStatsPayload_id(ctx, field, obj)
		case "totalIn":
			out.Values[i] = ec._BertyP2pBandwidthStatsPayload_totalIn(ctx, field, obj)
		case "totalOut":
			out.Values[i] = ec._BertyP2pBandwidthStatsPayload_totalOut(ctx, field, obj)
		case "rateIn":
			out.Values[i] = ec._BertyP2pBandwidthStatsPayload_rateIn(ctx, field, obj)
		case "rateOut":
			out.Values[i] = ec._BertyP2pBandwidthStatsPayload_rateOut(ctx, field, obj)
		case "type":
			out.Values[i] = ec._BertyP2pBandwidthStatsPayload_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStatsPayload_id(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStatsPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStatsPayload_totalIn(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStatsPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalIn, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	return models.MarshalInt64(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStatsPayload_totalOut(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStatsPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalOut, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	return models.MarshalInt64(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStatsPayload_rateIn(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStatsPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateIn, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	return models.MarshalDouble(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStatsPayload_rateOut(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStatsPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateOut, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	return models.MarshalDouble(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pBandwidthStatsPayload_type(ctx context.Context, field graphql.CollectedField, obj *p2p.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pBandwidthStatsPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.MetricsType)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

var bertyP2pContactRequestAcceptedAttrsImplementors = []string{"BertyP2pContactRequestAcceptedAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactRequestAcceptedAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ContactRequestAcceptedAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactRequestAcceptedAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactRequestAcceptedAttrs")
		case "T":
			out.Values[i] = ec._BertyP2pContactRequestAcceptedAttrs_T(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pContactRequestAcceptedAttrs_T(ctx context.Context, field graphql.CollectedField, obj *p2p.ContactRequestAcceptedAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pContactRequestAcceptedAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.T, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyP2pContactRequestAttrsImplementors = []string{"BertyP2pContactRequestAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactRequestAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ContactRequestAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactRequestAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactRequestAttrs")
		case "me":
			out.Values[i] = ec._BertyP2pContactRequestAttrs_me(ctx, field, obj)
		case "introText":
			out.Values[i] = ec._BertyP2pContactRequestAttrs_introText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pContactRequestAttrs_me(ctx context.Context, field graphql.CollectedField, obj *p2p.ContactRequestAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pContactRequestAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Me, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pContactRequestAttrs_introText(ctx context.Context, field graphql.CollectedField, obj *p2p.ContactRequestAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pContactRequestAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntroText, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyP2pContactShareAttrsImplementors = []string{"BertyP2pContactShareAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactShareAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ContactShareAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactShareAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactShareAttrs")
		case "contact":
			out.Values[i] = ec._BertyP2pContactShareAttrs_contact(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pContactShareAttrs_contact(ctx context.Context, field graphql.CollectedField, obj *p2p.ContactShareAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pContactShareAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

var bertyP2pContactShareMeAttrsImplementors = []string{"BertyP2pContactShareMeAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactShareMeAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ContactShareMeAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactShareMeAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactShareMeAttrs")
		case "me":
			out.Values[i] = ec._BertyP2pContactShareMeAttrs_me(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pContactShareMeAttrs_me(ctx context.Context, field graphql.CollectedField, obj *p2p.ContactShareMeAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pContactShareMeAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Me, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

var bertyP2pConversationInviteAttrsImplementors = []string{"BertyP2pConversationInviteAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pConversationInviteAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ConversationInviteAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pConversationInviteAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pConversationInviteAttrs")
		case "conversation":
			out.Values[i] = ec._BertyP2pConversationInviteAttrs_conversation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pConversationInviteAttrs_conversation(ctx context.Context, field graphql.CollectedField, obj *p2p.ConversationInviteAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pConversationInviteAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

var bertyP2pConversationNewMessageAttrsImplementors = []string{"BertyP2pConversationNewMessageAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pConversationNewMessageAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ConversationNewMessageAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pConversationNewMessageAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pConversationNewMessageAttrs")
		case "message":
			out.Values[i] = ec._BertyP2pConversationNewMessageAttrs_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pConversationNewMessageAttrs_message(ctx context.Context, field graphql.CollectedField, obj *p2p.ConversationNewMessageAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pConversationNewMessageAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Message)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityMessage(ctx, field.Selections, res)
}

var bertyP2pDevtoolsMapsetAttrsImplementors = []string{"BertyP2pDevtoolsMapsetAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pDevtoolsMapsetAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.DevtoolsMapsetAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pDevtoolsMapsetAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pDevtoolsMapsetAttrs")
		case "key":
			out.Values[i] = ec._BertyP2pDevtoolsMapsetAttrs_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "val":
			out.Values[i] = ec._BertyP2pDevtoolsMapsetAttrs_val(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pDevtoolsMapsetAttrs_key(ctx context.Context, field graphql.CollectedField, obj *p2p.DevtoolsMapsetAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pDevtoolsMapsetAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pDevtoolsMapsetAttrs_val(ctx context.Context, field graphql.CollectedField, obj *p2p.DevtoolsMapsetAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pDevtoolsMapsetAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Val, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyP2pEventImplementors = []string{"BertyP2pEvent", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pEvent(ctx context.Context, sel ast.SelectionSet, obj *p2p.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pEventImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pEvent")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyP2pEvent_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "senderId":
			out.Values[i] = ec._BertyP2pEvent_senderId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createdAt":
			out.Values[i] = ec._BertyP2pEvent_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyP2pEvent_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyP2pEvent_deletedAt(ctx, field, obj)
		case "sentAt":
			out.Values[i] = ec._BertyP2pEvent_sentAt(ctx, field, obj)
		case "receivedAt":
			out.Values[i] = ec._BertyP2pEvent_receivedAt(ctx, field, obj)
		case "ackedAt":
			out.Values[i] = ec._BertyP2pEvent_ackedAt(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._BertyP2pEvent_direction(ctx, field, obj)
		case "senderApiVersion":
			out.Values[i] = ec._BertyP2pEvent_senderApiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "receiverApiVersion":
			out.Values[i] = ec._BertyP2pEvent_receiverApiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "receiverId":
			out.Values[i] = ec._BertyP2pEvent_receiverId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "kind":
			out.Values[i] = ec._BertyP2pEvent_kind(ctx, field, obj)
		case "attributes":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyP2pEvent_attributes(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "conversationId":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyP2pEvent_conversationId(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_id(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyP2pEvent().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_senderId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SenderID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_updatedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_deletedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_sentAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SentAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_receivedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceivedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_ackedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AckedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_direction(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.Event_Direction)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_senderApiVersion(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SenderAPIVersion, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	rctx.Result = res
	return models.MarshalUint32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_receiverApiVersion(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiverAPIVersion, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	rctx.Result = res
	return models.MarshalUint32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_receiverId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiverID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_kind(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.Kind)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_attributes(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyP2pEvent().Attributes(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEvent_conversationId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyP2pEvent().ConversationID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

var bertyP2pEventPayloadImplementors = []string{"BertyP2pEventPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pEventPayload(ctx context.Context, sel ast.SelectionSet, obj *p2p.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pEventPayloadImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pEventPayload")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyP2pEventPayload_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "senderId":
			out.Values[i] = ec._BertyP2pEventPayload_senderId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createdAt":
			out.Values[i] = ec._BertyP2pEventPayload_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyP2pEventPayload_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyP2pEventPayload_deletedAt(ctx, field, obj)
		case "sentAt":
			out.Values[i] = ec._BertyP2pEventPayload_sentAt(ctx, field, obj)
		case "receivedAt":
			out.Values[i] = ec._BertyP2pEventPayload_receivedAt(ctx, field, obj)
		case "ackedAt":
			out.Values[i] = ec._BertyP2pEventPayload_ackedAt(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._BertyP2pEventPayload_direction(ctx, field, obj)
		case "senderApiVersion":
			out.Values[i] = ec._BertyP2pEventPayload_senderApiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "receiverApiVersion":
			out.Values[i] = ec._BertyP2pEventPayload_receiverApiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "receiverId":
			out.Values[i] = ec._BertyP2pEventPayload_receiverId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "kind":
			out.Values[i] = ec._BertyP2pEventPayload_kind(ctx, field, obj)
		case "attributes":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyP2pEventPayload_attributes(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "conversationId":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyP2pEventPayload_conversationId(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_id(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyP2pEventPayload().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_senderId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SenderID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_createdAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_updatedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_deletedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_sentAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SentAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_receivedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceivedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_ackedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AckedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_direction(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.Event_Direction)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_senderApiVersion(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SenderAPIVersion, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	rctx.Result = res
	return models.MarshalUint32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_receiverApiVersion(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiverAPIVersion, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	rctx.Result = res
	return models.MarshalUint32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_receiverId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiverID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_kind(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.Kind)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_attributes(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyP2pEventPayload().Attributes(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pEventPayload_conversationId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyP2pEventPayload().ConversationID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

var bertyP2pPeerImplementors = []string{"BertyP2pPeer"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pPeer(ctx context.Context, sel ast.SelectionSet, obj *p2p.Peer) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pPeerImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pPeer")
		case "id":
			out.Values[i] = ec._BertyP2pPeer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "addrs":
			out.Values[i] = ec._BertyP2pPeer_addrs(ctx, field, obj)
		case "connection":
			out.Values[i] = ec._BertyP2pPeer_connection(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pPeer_id(ctx context.Context, field graphql.CollectedField, obj *p2p.Peer) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pPeer",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pPeer_addrs(ctx context.Context, field graphql.CollectedField, obj *p2p.Peer) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pPeer",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Addrs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pPeer_connection(ctx context.Context, field graphql.CollectedField, obj *p2p.Peer) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pPeer",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Connection, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.ConnectionType)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

var bertyP2pPeerPayloadImplementors = []string{"BertyP2pPeerPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pPeerPayload(ctx context.Context, sel ast.SelectionSet, obj *p2p.Peer) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pPeerPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pPeerPayload")
		case "id":
			out.Values[i] = ec._BertyP2pPeerPayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "addrs":
			out.Values[i] = ec._BertyP2pPeerPayload_addrs(ctx, field, obj)
		case "connection":
			out.Values[i] = ec._BertyP2pPeerPayload_connection(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pPeerPayload_id(ctx context.Context, field graphql.CollectedField, obj *p2p.Peer) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pPeerPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pPeerPayload_addrs(ctx context.Context, field graphql.CollectedField, obj *p2p.Peer) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pPeerPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Addrs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pPeerPayload_connection(ctx context.Context, field graphql.CollectedField, obj *p2p.Peer) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pPeerPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Connection, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.ConnectionType)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

var bertyP2pPeersImplementors = []string{"BertyP2pPeers"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pPeers(ctx context.Context, sel ast.SelectionSet, obj *p2p.Peers) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pPeersImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pPeers")
		case "list":
			out.Values[i] = ec._BertyP2pPeers_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pPeers_list(ctx context.Context, field graphql.CollectedField, obj *p2p.Peers) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pPeers",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*p2p.Peer)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyP2pPeer(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyP2pPeersPayloadImplementors = []string{"BertyP2pPeersPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pPeersPayload(ctx context.Context, sel ast.SelectionSet, obj *p2p.Peers) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pPeersPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pPeersPayload")
		case "list":
			out.Values[i] = ec._BertyP2pPeersPayload_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pPeersPayload_list(ctx context.Context, field graphql.CollectedField, obj *p2p.Peers) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pPeersPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*p2p.Peer)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyP2pPeer(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyP2pPingAttrsImplementors = []string{"BertyP2pPingAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pPingAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.PingAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pPingAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pPingAttrs")
		case "T":
			out.Values[i] = ec._BertyP2pPingAttrs_T(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pPingAttrs_T(ctx context.Context, field graphql.CollectedField, obj *p2p.PingAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pPingAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.T, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyP2pSenderAliasUpdateAttrsImplementors = []string{"BertyP2pSenderAliasUpdateAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pSenderAliasUpdateAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.SenderAliasUpdateAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pSenderAliasUpdateAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pSenderAliasUpdateAttrs")
		case "aliases":
			out.Values[i] = ec._BertyP2pSenderAliasUpdateAttrs_aliases(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pSenderAliasUpdateAttrs_aliases(ctx context.Context, field graphql.CollectedField, obj *p2p.SenderAliasUpdateAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pSenderAliasUpdateAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aliases, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.SenderAlias)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntitySenderAlias(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyP2pSentAttrsImplementors = []string{"BertyP2pSentAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pSentAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.SentAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pSentAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pSentAttrs")
		case "ids":
			out.Values[i] = ec._BertyP2pSentAttrs_ids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyP2pSentAttrs_ids(ctx context.Context, field graphql.CollectedField, obj *p2p.SentAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyP2pSentAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var bertyPkgDeviceinfoDeviceInfoImplementors = []string{"BertyPkgDeviceinfoDeviceInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfo(ctx context.Context, sel ast.SelectionSet, obj *deviceinfo.DeviceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyPkgDeviceinfoDeviceInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyPkgDeviceinfoDeviceInfo")
		case "key":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfo_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfo_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfo_key(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfo_value(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyPkgDeviceinfoDeviceInfosImplementors = []string{"BertyPkgDeviceinfoDeviceInfos"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfos(ctx context.Context, sel ast.SelectionSet, obj *deviceinfo.DeviceInfos) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyPkgDeviceinfoDeviceInfosImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyPkgDeviceinfoDeviceInfos")
		case "infos":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfos_infos(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfos_infos(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfos) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfos",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Infos, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*deviceinfo.DeviceInfo)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyPkgDeviceinfoDeviceInfo(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyPkgDeviceinfoDeviceInfosPayloadImplementors = []string{"BertyPkgDeviceinfoDeviceInfosPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfosPayload(ctx context.Context, sel ast.SelectionSet, obj *deviceinfo.DeviceInfos) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyPkgDeviceinfoDeviceInfosPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyPkgDeviceinfoDeviceInfosPayload")
		case "infos":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfosPayload_infos(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfosPayload_infos(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfos) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfosPayload",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Infos, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*deviceinfo.DeviceInfo)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyPkgDeviceinfoDeviceInfo(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufDescriptorProtoImplementors = []string{"GoogleProtobufDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.DescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "field":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_field(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_extension(ctx, field, obj)
		case "nestedType":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_nestedType(ctx, field, obj)
		case "enumType":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_enumType(ctx, field, obj)
		case "extensionRange":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_extensionRange(ctx, field, obj)
		case "oneofDecl":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_oneofDecl(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_options(ctx, field, obj)
		case "reservedRange":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_reservedRange(ctx, field, obj)
		case "reservedName":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_reservedName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_field(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FieldDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_extension(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FieldDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_nestedType(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NestedType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_enumType(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufEnumDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_extensionRange(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExtensionRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto_ExtensionRange)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufDescriptorProtoExtensionRange(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_oneofDecl(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OneofDecl, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.OneofDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufOneofDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.MessageOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufMessageOptions(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_reservedRange(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto_ReservedRange)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufDescriptorProtoReservedRange(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_reservedName(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var googleProtobufDescriptorProtoExtensionRangeImplementors = []string{"GoogleProtobufDescriptorProtoExtensionRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange(ctx context.Context, sel ast.SelectionSet, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoExtensionRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProtoExtensionRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "end":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_end(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "options":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_start(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProtoExtensionRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProtoExtensionRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProtoExtensionRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.ExtensionRangeOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufExtensionRangeOptions(ctx, field.Selections, res)
}

var googleProtobufDescriptorProtoReservedRangeImplementors = []string{"GoogleProtobufDescriptorProtoReservedRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange(ctx context.Context, sel ast.SelectionSet, obj *descriptor.DescriptorProto_ReservedRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoReservedRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProtoReservedRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoReservedRange_start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "end":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoReservedRange_end(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange_start(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ReservedRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProtoReservedRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ReservedRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProtoReservedRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

var googleProtobufEnumDescriptorProtoImplementors = []string{"GoogleProtobufEnumDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_value(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_options(ctx, field, obj)
		case "reservedRange":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_reservedRange(ctx, field, obj)
		case "reservedName":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_reservedName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_value(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumValueDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufEnumValueDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.EnumOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufEnumOptions(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_reservedRange(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumDescriptorProto_EnumReservedRange)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_reservedName(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var googleProtobufEnumDescriptorProtoEnumReservedRangeImplementors = []string{"GoogleProtobufEnumDescriptorProtoEnumReservedRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumDescriptorProto_EnumReservedRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumDescriptorProtoEnumReservedRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumDescriptorProtoEnumReservedRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange_start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "end":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange_end(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange_start(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto_EnumReservedRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProtoEnumReservedRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto_EnumReservedRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProtoEnumReservedRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

var googleProtobufEnumOptionsImplementors = []string{"GoogleProtobufEnumOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumOptions")
		case "allowAlias":
			out.Values[i] = ec._GoogleProtobufEnumOptions_allowAlias(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufEnumOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufEnumOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumOptions_allowAlias(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowAlias, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufEnumValueDescriptorProtoImplementors = []string{"GoogleProtobufEnumValueDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumValueDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumValueDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "number":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "options":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumValueDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_number(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumValueDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumValueDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.EnumValueOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufEnumValueOptions(ctx, field.Selections, res)
}

var googleProtobufEnumValueOptionsImplementors = []string{"GoogleProtobufEnumValueOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumValueOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumValueOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumValueOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumValueOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufEnumValueOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufEnumValueOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumValueOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumValueOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumValueOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumValueOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufExtensionRangeOptionsImplementors = []string{"GoogleProtobufExtensionRangeOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufExtensionRangeOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.ExtensionRangeOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufExtensionRangeOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufExtensionRangeOptions")
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufExtensionRangeOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufExtensionRangeOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.ExtensionRangeOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufExtensionRangeOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufFieldDescriptorProtoImplementors = []string{"GoogleProtobufFieldDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFieldDescriptorProtoImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFieldDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "number":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "label":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_label(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "type":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_type(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "typeName":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_typeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "extendee":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_extendee(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultValue":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_defaultValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "oneofIndex":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_oneofIndex(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "jsonName":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_jsonName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "options":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_number(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_label(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFieldDescriptorProto().Label(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_type(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFieldDescriptorProto().Type(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_typeName(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_extendee(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extendee, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_defaultValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_oneofIndex(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OneofIndex, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_jsonName(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JsonName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.FieldOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufFieldOptions(ctx, field.Selections, res)
}

var googleProtobufFieldOptionsImplementors = []string{"GoogleProtobufFieldOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFieldOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FieldOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFieldOptionsImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFieldOptions")
		case "ctype":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFieldOptions_ctype(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "packed":
			out.Values[i] = ec._GoogleProtobufFieldOptions_packed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "jstype":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFieldOptions_jstype(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "lazy":
			out.Values[i] = ec._GoogleProtobufFieldOptions_lazy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufFieldOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "weak":
			out.Values[i] = ec._GoogleProtobufFieldOptions_weak(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufFieldOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_ctype(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFieldOptions().Ctype(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_packed(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Packed, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_jstype(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFieldOptions().Jstype(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_lazy(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lazy, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_weak(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weak, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufFileDescriptorProtoImplementors = []string{"GoogleProtobufFileDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "package":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_package(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "dependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_dependency(ctx, field, obj)
		case "publicDependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_publicDependency(ctx, field, obj)
		case "weakDependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_weakDependency(ctx, field, obj)
		case "messageType":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_messageType(ctx, field, obj)
		case "enumType":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_enumType(ctx, field, obj)
		case "service":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_service(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_extension(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_options(ctx, field, obj)
		case "sourceCodeInfo":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_sourceCodeInfo(ctx, field, obj)
		case "syntax":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_syntax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_package(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Package, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_dependency(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_publicDependency(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicDependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalInt32(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_weakDependency(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeakDependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalInt32(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_messageType(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_enumType(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufEnumDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_service(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Service, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.ServiceDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufServiceDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_extension(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FieldDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.FileOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufFileOptions(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_sourceCodeInfo(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceCodeInfo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.SourceCodeInfo)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufSourceCodeInfo(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_syntax(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Syntax, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

var googleProtobufFileDescriptorSetImplementors = []string{"GoogleProtobufFileDescriptorSet"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileDescriptorSet(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FileDescriptorSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileDescriptorSetImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileDescriptorSet")
		case "file":
			out.Values[i] = ec._GoogleProtobufFileDescriptorSet_file(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorSet_file(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorSet) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorSet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.File, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FileDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufFileDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufFileOptionsImplementors = []string{"GoogleProtobufFileOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FileOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileOptionsImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileOptions")
		case "javaPackage":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaPackage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "javaOuterClassname":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaOuterClassname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "javaMultipleFiles":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaMultipleFiles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "javaGenerateEqualsAndHash":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaGenerateEqualsAndHash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "javaStringCheckUtf8":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaStringCheckUtf8(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "optimizeFor":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFileOptions_optimizeFor(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "goPackage":
			out.Values[i] = ec._GoogleProtobufFileOptions_goPackage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "ccGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_ccGenericServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "javaGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaGenericServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "pyGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_pyGenericServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "phpGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpGenericServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufFileOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "ccEnableArenas":
			out.Values[i] = ec._GoogleProtobufFileOptions_ccEnableArenas(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "objcClassPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_objcClassPrefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "csharpNamespace":
			out.Values[i] = ec._GoogleProtobufFileOptions_csharpNamespace(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "swiftPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_swiftPrefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "phpClassPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpClassPrefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "phpNamespace":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpNamespace(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "phpMetadataNamespace":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFileOptions_phpMetadataNamespace(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "rubyPackage":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFileOptions_rubyPackage(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufFileOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaPackage(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaPackage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaOuterClassname(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaOuterClassname, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaMultipleFiles(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaMultipleFiles, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaGenerateEqualsAndHash(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaGenerateEqualsAndHash, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaStringCheckUtf8(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaStringCheckUtf8, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_optimizeFor(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFileOptions().OptimizeFor(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_goPackage(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GoPackage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_ccGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcGenericServices, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaGenericServices, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_pyGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PyGenericServices, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_phpGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhpGenericServices, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_ccEnableArenas(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcEnableArenas, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_objcClassPrefix(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjcClassPrefix, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_csharpNamespace(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CsharpNamespace, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_swiftPrefix(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SwiftPrefix, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_phpClassPrefix(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhpClassPrefix, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_phpNamespace(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhpNamespace, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_phpMetadataNamespace(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFileOptions().PhpMetadataNamespace(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_rubyPackage(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFileOptions().RubyPackage(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufGeneratedCodeInfoImplementors = []string{"GoogleProtobufGeneratedCodeInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfo(ctx context.Context, sel ast.SelectionSet, obj *descriptor.GeneratedCodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufGeneratedCodeInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufGeneratedCodeInfo")
		case "annotation":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfo_annotation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfo_annotation(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufGeneratedCodeInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.GeneratedCodeInfo_Annotation)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufGeneratedCodeInfoAnnotation(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufGeneratedCodeInfoAnnotationImplementors = []string{"GoogleProtobufGeneratedCodeInfoAnnotation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation(ctx context.Context, sel ast.SelectionSet, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufGeneratedCodeInfoAnnotationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufGeneratedCodeInfoAnnotation")
		case "path":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_path(ctx, field, obj)
		case "sourceFile":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_sourceFile(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "begin":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_begin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "end":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_end(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_path(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufGeneratedCodeInfoAnnotation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalInt32(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_sourceFile(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufGeneratedCodeInfoAnnotation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceFile, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_begin(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufGeneratedCodeInfoAnnotation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Begin, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufGeneratedCodeInfoAnnotation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

var googleProtobufMessageOptionsImplementors = []string{"GoogleProtobufMessageOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMessageOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.MessageOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMessageOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMessageOptions")
		case "messageSetWireFormat":
			out.Values[i] = ec._GoogleProtobufMessageOptions_messageSetWireFormat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "noStandardDescriptorAccessor":
			out.Values[i] = ec._GoogleProtobufMessageOptions_noStandardDescriptorAccessor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufMessageOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "mapEntry":
			out.Values[i] = ec._GoogleProtobufMessageOptions_mapEntry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufMessageOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMessageOptions_messageSetWireFormat(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMessageOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageSetWireFormat, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMessageOptions_noStandardDescriptorAccessor(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMessageOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoStandardDescriptorAccessor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMessageOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMessageOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMessageOptions_mapEntry(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMessageOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MapEntry, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMessageOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMessageOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufMethodDescriptorProtoImplementors = []string{"GoogleProtobufMethodDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMethodDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMethodDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "inputType":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_inputType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "outputType":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_outputType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "options":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_options(ctx, field, obj)
		case "clientStreaming":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_clientStreaming(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "serverStreaming":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_serverStreaming(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_inputType(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_outputType(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.MethodOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufMethodOptions(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_clientStreaming(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientStreaming, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_serverStreaming(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerStreaming, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

var googleProtobufMethodOptionsImplementors = []string{"GoogleProtobufMethodOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMethodOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.MethodOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMethodOptionsImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMethodOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufMethodOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "idempotencyLevel":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufMethodOptions_idempotencyLevel(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufMethodOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodOptions_idempotencyLevel(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufMethodOptions().IdempotencyLevel(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufOneofDescriptorProtoImplementors = []string{"GoogleProtobufOneofDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufOneofDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.OneofDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufOneofDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufOneofDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufOneofDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "options":
			out.Values[i] = ec._GoogleProtobufOneofDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufOneofDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.OneofDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufOneofDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufOneofDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.OneofDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufOneofDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.OneofOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufOneofOptions(ctx, field.Selections, res)
}

var googleProtobufOneofOptionsImplementors = []string{"GoogleProtobufOneofOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufOneofOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.OneofOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufOneofOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufOneofOptions")
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufOneofOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufOneofOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.OneofOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufOneofOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufServiceDescriptorProtoImplementors = []string{"GoogleProtobufServiceDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufServiceDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufServiceDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufServiceDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "method":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_method(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufServiceDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_method(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufServiceDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.MethodDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufMethodDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufServiceDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.ServiceOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufServiceOptions(ctx, field.Selections, res)
}

var googleProtobufServiceOptionsImplementors = []string{"GoogleProtobufServiceOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufServiceOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.ServiceOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufServiceOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufServiceOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufServiceOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufServiceOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufServiceOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufServiceOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufServiceOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufServiceOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufSourceCodeInfoImplementors = []string{"GoogleProtobufSourceCodeInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufSourceCodeInfo(ctx context.Context, sel ast.SelectionSet, obj *descriptor.SourceCodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufSourceCodeInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufSourceCodeInfo")
		case "location":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfo_location(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfo_location(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.SourceCodeInfo_Location)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufSourceCodeInfoLocation(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufSourceCodeInfoLocationImplementors = []string{"GoogleProtobufSourceCodeInfoLocation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation(ctx context.Context, sel ast.SelectionSet, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufSourceCodeInfoLocationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufSourceCodeInfoLocation")
		case "path":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_path(ctx, field, obj)
		case "span":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_span(ctx, field, obj)
		case "leadingComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_leadingComments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "trailingComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_trailingComments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "leadingDetachedComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_leadingDetachedComments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_path(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfoLocation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalInt32(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_span(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfoLocation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Span, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalInt32(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_leadingComments(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfoLocation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeadingComments, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_trailingComments(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfoLocation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrailingComments, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_leadingDetachedComments(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfoLocation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeadingDetachedComments, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var googleProtobufUninterpretedOptionImplementors = []string{"GoogleProtobufUninterpretedOption"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufUninterpretedOption(ctx context.Context, sel ast.SelectionSet, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufUninterpretedOptionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufUninterpretedOption")
		case "name":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_name(ctx, field, obj)
		case "identifierValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_identifierValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "positiveIntValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_positiveIntValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "negativeIntValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_negativeIntValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "doubleValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_doubleValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "stringValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_stringValue(ctx, field, obj)
		case "aggregateValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_aggregateValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption_NamePart)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOptionNamePart(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_identifierValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentifierValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_positiveIntValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PositiveIntValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uint64)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalUint64(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_negativeIntValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NegativeIntValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int64)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt64(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_doubleValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoubleValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalDouble(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_stringValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StringValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_aggregateValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AggregateValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

var googleProtobufUninterpretedOptionNamePartImplementors = []string{"GoogleProtobufUninterpretedOptionNamePart"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart(ctx context.Context, sel ast.SelectionSet, obj *descriptor.UninterpretedOption_NamePart) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufUninterpretedOptionNamePartImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufUninterpretedOptionNamePart")
		case "namePart":
			out.Values[i] = ec._GoogleProtobufUninterpretedOptionNamePart_namePart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isExtension":
			out.Values[i] = ec._GoogleProtobufUninterpretedOptionNamePart_isExtension(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart_namePart(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption_NamePart) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOptionNamePart",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePart, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart_isExtension(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption_NamePart) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOptionNamePart",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsExtension, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "ContactRequest":
			out.Values[i] = ec._Mutation_ContactRequest(ctx, field)
		case "ContactAcceptRequest":
			out.Values[i] = ec._Mutation_ContactAcceptRequest(ctx, field)
		case "ContactRemove":
			out.Values[i] = ec._Mutation_ContactRemove(ctx, field)
		case "ContactUpdate":
			out.Values[i] = ec._Mutation_ContactUpdate(ctx, field)
		case "ConversationCreate":
			out.Values[i] = ec._Mutation_ConversationCreate(ctx, field)
		case "ConversationInvite":
			out.Values[i] = ec._Mutation_ConversationInvite(ctx, field)
		case "ConversationExclude":
			out.Values[i] = ec._Mutation_ConversationExclude(ctx, field)
		case "ConversationAddMessage":
			out.Values[i] = ec._Mutation_ConversationAddMessage(ctx, field)
		case "GenerateFakeData":
			out.Values[i] = ec._Mutation_GenerateFakeData(ctx, field)
		case "RunIntegrationTests":
			out.Values[i] = ec._Mutation_RunIntegrationTests(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ContactRequest(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ContactRequest_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactRequest(rctx, args["contact"].(*entity.Contact), args["introText"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContactPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ContactAcceptRequest(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ContactAcceptRequest_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactAcceptRequest(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContactPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ContactRemove(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ContactRemove_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactRemove(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContactPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ContactUpdate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ContactUpdate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactUpdate(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContactPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConversationCreate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConversationCreate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConversationCreate(rctx, args["contacts"].([]*entity.Contact), args["title"].(string), args["topic"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversationPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConversationInvite(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConversationInvite_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConversationInvite(rctx, args["conversation"].(*entity.Conversation), args["members"].([]*entity.ConversationMember))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversationPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConversationExclude(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConversationExclude_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConversationExclude(rctx, args["conversation"].(*entity.Conversation), args["members"].([]*entity.ConversationMember))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversationPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConversationAddMessage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConversationAddMessage_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConversationAddMessage(rctx, args["conversation"].(*entity.Conversation), args["message"].(*entity.Message))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*p2p.Event)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyP2pEventPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_GenerateFakeData(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_GenerateFakeData_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GenerateFakeData(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeVoidPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_RunIntegrationTests(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_RunIntegrationTests_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RunIntegrationTests(rctx, args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.IntegrationTestOutput)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeIntegrationTestPayload(ctx, field.Selections, res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_node(ctx, field)
				wg.Done()
			}(i, field)
		case "ID":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_ID(ctx, field)
				wg.Done()
			}(i, field)
		case "EventList":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_EventList(ctx, field)
				wg.Done()
			}(i, field)
		case "GetEvent":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_GetEvent(ctx, field)
				wg.Done()
			}(i, field)
		case "ContactList":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_ContactList(ctx, field)
				wg.Done()
			}(i, field)
		case "GetContact":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_GetContact(ctx, field)
				wg.Done()
			}(i, field)
		case "ConversationList":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_ConversationList(ctx, field)
				wg.Done()
			}(i, field)
		case "GetConversation":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_GetConversation(ctx, field)
				wg.Done()
			}(i, field)
		case "GetConversationMember":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_GetConversationMember(ctx, field)
				wg.Done()
			}(i, field)
		case "DeviceInfos":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_DeviceInfos(ctx, field)
				wg.Done()
			}(i, field)
		case "AppVersion":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_AppVersion(ctx, field)
				wg.Done()
			}(i, field)
		case "Peers":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_Peers(ctx, field)
				wg.Done()
			}(i, field)
		case "Protocols":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_Protocols(ctx, field)
				wg.Done()
			}(i, field)
		case "Panic":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_Panic(ctx, field)
				wg.Done()
			}(i, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_node_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Node)
	rctx.Result = res

	return ec._Node(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_ID(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_ID_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ID(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*p2p.Peer)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyP2pPeerPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_EventList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_EventList_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EventList(rctx, args["filter"].(*p2p.Event), args["onlyWithoutAckedAt"].(*int32), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.EventListConnection)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeEventListConnection(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_GetEvent(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_GetEvent_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetEvent(rctx, args["id"].(string), args["senderId"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sentAt"].(*time.Time), args["receivedAt"].(*time.Time), args["ackedAt"].(*time.Time), args["direction"].(*int32), args["senderApiVersion"].(uint32), args["receiverApiVersion"].(uint32), args["receiverId"].(string), args["kind"].(*int32), args["attributes"].([]byte), args["conversationId"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*p2p.Event)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyP2pEventPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_ContactList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_ContactList_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ContactList(rctx, args["filter"].(*entity.Contact), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.ContactListConnection)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeContactListConnection(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_GetContact(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_GetContact_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetContact(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContactPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_ConversationList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_ConversationList_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConversationList(rctx, args["filter"].(*entity.Conversation), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.ConversationListConnection)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeConversationListConnection(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_GetConversation(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_GetConversation_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetConversation(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["title"].(string), args["topic"].(string), args["members"].([]*entity.ConversationMember))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversationPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_GetConversationMember(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_GetConversationMember_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetConversationMember(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["status"].(*int32), args["contact"].(*entity.Contact), args["conversationId"].(string), args["contactId"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.ConversationMember)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversationMemberPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_DeviceInfos(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_DeviceInfos_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeviceInfos(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*deviceinfo.DeviceInfos)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyPkgDeviceinfoDeviceInfosPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_AppVersion(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_AppVersion_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppVersion(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.AppVersionOutput)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeAppVersionPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_Peers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_Peers_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Peers(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*p2p.Peers)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyP2pPeersPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_Protocols(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_Protocols_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Protocols(rctx, args["id"].(string), args["addrs"].([]string), args["connection"].(*int32))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.ProtocolsOutput)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeProtocolsPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_Panic(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_Panic_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Panic(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeVoidPayload(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query___type_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Schema(ctx, field.Selections, res)
}

var subscriptionImplementors = []string{"Subscription"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, subscriptionImplementors)
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "EventStream":
		return ec._Subscription_EventStream(ctx, fields[0])
	case "MonitorBandwidth":
		return ec._Subscription_MonitorBandwidth(ctx, fields[0])
	case "MonitorPeers":
		return ec._Subscription_MonitorPeers(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

func (ec *executionContext) _Subscription_EventStream(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_EventStream_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().EventStream(rctx, args["filter"].(*p2p.Event))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}

			return ec._BertyP2pEventPayload(ctx, field.Selections, res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_MonitorBandwidth(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_MonitorBandwidth_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().MonitorBandwidth(rctx, args["id"].(*string), args["totalIn"].(*int64), args["totalOut"].(*int64), args["rateIn"].(*float64), args["rateOut"].(*float64), args["type"].(*int32))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}

			return ec._BertyP2pBandwidthStatsPayload(ctx, field.Selections, res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_MonitorPeers(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_MonitorPeers_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().MonitorPeers(rctx, args["T"].(bool))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}

			return ec._BertyP2pPeerPayload(ctx, field.Selections, res)
		}())
		return &out
	}
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Directive(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_fields_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Field(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_enumValues_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___EnumValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj *models.Node) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case entity.Device:
		return ec._BertyEntityDevice(ctx, sel, &obj)
	case *entity.Device:
		return ec._BertyEntityDevice(ctx, sel, obj)
	case entity.Contact:
		return ec._BertyEntityContact(ctx, sel, &obj)
	case *entity.Contact:
		return ec._BertyEntityContact(ctx, sel, obj)
	case entity.Conversation:
		return ec._BertyEntityConversation(ctx, sel, &obj)
	case *entity.Conversation:
		return ec._BertyEntityConversation(ctx, sel, obj)
	case entity.ConversationMember:
		return ec._BertyEntityConversationMember(ctx, sel, &obj)
	case *entity.ConversationMember:
		return ec._BertyEntityConversationMember(ctx, sel, obj)
	case p2p.Event:
		return ec._BertyP2pEvent(ctx, sel, &obj)
	case *p2p.Event:
		return ec._BertyP2pEvent(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func UnmarshalBertyEntityContactInput(v interface{}) (entity.Contact, error) {
	var it entity.Contact
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.DeletedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "sigchain":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Sigchain = make([]byte, len(rawIf1))
			for idx1 := range rawIf1 {
				it.Sigchain[idx1], err = models.UnmarshalByte(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Status = entity.Contact_Status(castTmp)
			if err != nil {
				return it, err
			}
		case "devices":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Devices = make([]*entity.Device, len(rawIf1))
			for idx1 := range rawIf1 {
				var ptr2 entity.Device
				if rawIf1[idx1] != nil {
					ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
					it.Devices[idx1] = &ptr2
				}
			}
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error
			it.DisplayName, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "displayStatus":
			var err error
			it.DisplayStatus, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "overrideDisplayName":
			var err error
			it.OverrideDisplayName, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "overrideDisplayStatus":
			var err error
			it.OverrideDisplayStatus, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityConversationInput(v interface{}) (entity.Conversation, error) {
	var it entity.Conversation
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.DeletedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "topic":
			var err error
			it.Topic, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "members":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Members = make([]*entity.ConversationMember, len(rawIf1))
			for idx1 := range rawIf1 {
				var ptr2 entity.ConversationMember
				if rawIf1[idx1] != nil {
					ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
					it.Members[idx1] = &ptr2
				}
			}
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityConversationMemberInput(v interface{}) (entity.ConversationMember, error) {
	var it entity.ConversationMember
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.DeletedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "status":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Status = entity.ConversationMember_Status(castTmp)
			if err != nil {
				return it, err
			}
		case "contact":
			var err error
			var ptr1 entity.Contact
			if v != nil {
				ptr1, err = UnmarshalBertyEntityContactInput(v)
				it.Contact = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "conversationId":
			var err error
			it.ConversationID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "contactId":
			var err error
			it.ContactID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityDeviceInput(v interface{}) (entity.Device, error) {
	var it entity.Device
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.DeletedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Status = entity.Device_Status(castTmp)
			if err != nil {
				return it, err
			}
		case "apiVersion":
			var err error
			it.ApiVersion, err = models.UnmarshalUint32(v)
			if err != nil {
				return it, err
			}
		case "contactId":
			var err error
			it.ContactID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityMessageInput(v interface{}) (entity.Message, error) {
	var it entity.Message
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "text":
			var err error
			it.Text, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyNodePaginationInput(v interface{}) (node.Pagination, error) {
	var it node.Pagination
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orderBy":
			var err error
			it.OrderBy, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "orderDesc":
			var err error
			it.OrderDesc, err = models.UnmarshalBool(v)
			if err != nil {
				return it, err
			}
		case "first":
			var err error
			it.First, err = models.UnmarshalInt32(v)
			if err != nil {
				return it, err
			}
		case "after":
			var err error
			it.After, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "last":
			var err error
			it.Last, err = models.UnmarshalInt32(v)
			if err != nil {
				return it, err
			}
		case "before":
			var err error
			it.Before, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyP2pEventInput(v interface{}) (p2p.Event, error) {
	var it p2p.Event
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "senderId":
			var err error
			it.SenderID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.DeletedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "sentAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.SentAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "receivedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.ReceivedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "ackedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.AckedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Direction = p2p.Event_Direction(castTmp)
			if err != nil {
				return it, err
			}
		case "senderApiVersion":
			var err error
			it.SenderAPIVersion, err = models.UnmarshalUint32(v)
			if err != nil {
				return it, err
			}
		case "receiverApiVersion":
			var err error
			it.ReceiverAPIVersion, err = models.UnmarshalUint32(v)
			if err != nil {
				return it, err
			}
		case "receiverId":
			var err error
			it.ReceiverID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "kind":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Kind = p2p.Kind(castTmp)
			if err != nil {
				return it, err
			}
		case "attributes":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Attributes = make([]byte, len(rawIf1))
			for idx1 := range rawIf1 {
				it.Attributes[idx1], err = models.UnmarshalByte(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "conversationId":
			var err error
			it.ConversationID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name])
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "service.gen.graphql", Input: `# GENERATED CODE -- DO NOT EDIT!

scalar Enum
scalar Double
scalar Int64
scalar Uint64
scalar Int32
scalar Byte
scalar Fixed64
scalar Fixed32
scalar Bool
scalar Uint32
scalar SFixed64
scalar SFixed32
scalar SInt32
scalar SInt64
scalar GoogleProtobufTimestamp
scalar GoogleProtobufTimestampInput
scalar GoogleProtobufTimestampPayload

interface Node {
  id: ID!
}

type GoogleProtobufFileDescriptorSet  {
    file: [GoogleProtobufFileDescriptorProto]
}
type GoogleProtobufFileDescriptorProto  {
      name: String!
      package: String!
      dependency: [String!]
      publicDependency: [Int32!]
      weakDependency: [Int32!]
    messageType: [GoogleProtobufDescriptorProto]
    enumType: [GoogleProtobufEnumDescriptorProto]
    service: [GoogleProtobufServiceDescriptorProto]
    extension: [GoogleProtobufFieldDescriptorProto]
    options: GoogleProtobufFileOptions
    sourceCodeInfo: GoogleProtobufSourceCodeInfo
      syntax: String!
}
    
type GoogleProtobufDescriptorProtoExtensionRange  {
      start: Int32!
      end: Int32!
    options: GoogleProtobufExtensionRangeOptions
}
type GoogleProtobufDescriptorProtoReservedRange  {
      start: Int32!
      end: Int32!
}
type GoogleProtobufDescriptorProto  {
      name: String!
    field: [GoogleProtobufFieldDescriptorProto]
    extension: [GoogleProtobufFieldDescriptorProto]
    nestedType: [GoogleProtobufDescriptorProto]
    enumType: [GoogleProtobufEnumDescriptorProto]
    extensionRange: [GoogleProtobufDescriptorProtoExtensionRange]
    oneofDecl: [GoogleProtobufOneofDescriptorProto]
    options: GoogleProtobufMessageOptions
    reservedRange: [GoogleProtobufDescriptorProtoReservedRange]
      reservedName: [String!]
}
type GoogleProtobufExtensionRangeOptions  {
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
      
      
type GoogleProtobufFieldDescriptorProto  {
      name: String!
      number: Int32!
    label: Enum
    type: Enum
      typeName: String!
      extendee: String!
      defaultValue: String!
      oneofIndex: Int32!
      jsonName: String!
    options: GoogleProtobufFieldOptions
}
type GoogleProtobufOneofDescriptorProto  {
      name: String!
    options: GoogleProtobufOneofOptions
}
    
type GoogleProtobufEnumDescriptorProtoEnumReservedRange  {
      start: Int32!
      end: Int32!
}
type GoogleProtobufEnumDescriptorProto  {
      name: String!
    value: [GoogleProtobufEnumValueDescriptorProto]
    options: GoogleProtobufEnumOptions
    reservedRange: [GoogleProtobufEnumDescriptorProtoEnumReservedRange]
      reservedName: [String!]
}
type GoogleProtobufEnumValueDescriptorProto  {
      name: String!
      number: Int32!
    options: GoogleProtobufEnumValueOptions
}
type GoogleProtobufServiceDescriptorProto  {
      name: String!
    method: [GoogleProtobufMethodDescriptorProto]
    options: GoogleProtobufServiceOptions
}
type GoogleProtobufMethodDescriptorProto  {
      name: String!
      inputType: String!
      outputType: String!
    options: GoogleProtobufMethodOptions
      clientStreaming: Bool!
      serverStreaming: Bool!
}
      
type GoogleProtobufFileOptions  {
      javaPackage: String!
      javaOuterClassname: String!
      javaMultipleFiles: Bool!
      javaGenerateEqualsAndHash: Bool!
      javaStringCheckUtf8: Bool!
    optimizeFor: Enum
      goPackage: String!
      ccGenericServices: Bool!
      javaGenericServices: Bool!
      pyGenericServices: Bool!
      phpGenericServices: Bool!
      deprecated: Bool!
      ccEnableArenas: Bool!
      objcClassPrefix: String!
      csharpNamespace: String!
      swiftPrefix: String!
      phpClassPrefix: String!
      phpNamespace: String!
      phpMetadataNamespace: String!
      rubyPackage: String!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufMessageOptions  {
      messageSetWireFormat: Bool!
      noStandardDescriptorAccessor: Bool!
      deprecated: Bool!
      mapEntry: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
      
      
type GoogleProtobufFieldOptions  {
    ctype: Enum
      packed: Bool!
    jstype: Enum
      lazy: Bool!
      deprecated: Bool!
      weak: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufOneofOptions  {
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufEnumOptions  {
      allowAlias: Bool!
      deprecated: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufEnumValueOptions  {
      deprecated: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufServiceOptions  {
      deprecated: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
      
type GoogleProtobufMethodOptions  {
      deprecated: Bool!
    idempotencyLevel: Enum
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
    
type GoogleProtobufUninterpretedOptionNamePart  {
      namePart: String!
      isExtension: Bool!
}
type GoogleProtobufUninterpretedOption  {
    name: [GoogleProtobufUninterpretedOptionNamePart]
      identifierValue: String!
      positiveIntValue: Uint64!
      negativeIntValue: Int64!
      doubleValue: Double!
      stringValue: [Byte!],
      aggregateValue: String!
}
    
type GoogleProtobufSourceCodeInfoLocation  {
      path: [Int32!]
      span: [Int32!]
      leadingComments: String!
      trailingComments: String!
      leadingDetachedComments: [String!]
}
type GoogleProtobufSourceCodeInfo  {
    location: [GoogleProtobufSourceCodeInfoLocation]
}
    
type GoogleProtobufGeneratedCodeInfoAnnotation  {
      path: [Int32!]
      sourceFile: String!
      begin: Int32!
      end: Int32!
}
type GoogleProtobufGeneratedCodeInfo  {
    annotation: [GoogleProtobufGeneratedCodeInfoAnnotation]
}
  
  
  

  
  
  

  
  
  

  
  
  

      
type BertyEntityDevice implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
      name: String!
    status: Enum
      apiVersion: Uint32!
      contactId: String!
}
  
  
  

      
type BertyEntityContact implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDevice]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
}
  
  
  

type BertyEntityConversation implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
      title: String!
      topic: String!
    members: [BertyEntityConversationMember]
}
      
type BertyEntityConversationMember implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
    status: Enum
    contact: BertyEntityContact
      conversationId: String!
      contactId: String!
}
  
  
  

type BertyEntityMessage  {
      text: String!
}
  
  
  

      
type BertyEntitySenderAlias  {
      id: String!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
    status: Enum
      originDeviceId: String!
      contactId: String!
      conversationId: String!
      aliasIdentifier: String!
      used: Bool!
}
  
  
  

  
type BertyP2pSentAttrs  {
      ids: [String!]
}
type BertyP2pAckAttrs  {
      ids: [String!]
      ErrMsg: String!
}
type BertyP2pPingAttrs  {
      T: Bool!
}
type BertyP2pContactRequestAttrs  {
    me: BertyEntityContact
      introText: String!
}
type BertyP2pContactRequestAcceptedAttrs  {
      T: Bool!
}
type BertyP2pContactShareMeAttrs  {
    me: BertyEntityContact
}
type BertyP2pContactShareAttrs  {
    contact: BertyEntityContact
}
type BertyP2pConversationInviteAttrs  {
    conversation: BertyEntityConversation
}
type BertyP2pConversationNewMessageAttrs  {
    message: BertyEntityMessage
}
type BertyP2pDevtoolsMapsetAttrs  {
      key: String!
      val: String!
}
type BertyP2pSenderAliasUpdateAttrs  {
    aliases: [BertyEntitySenderAlias]
}
  
  
  

      
type BertyP2pEvent implements Node {
    id: ID!
      senderId: String!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
    sentAt: GoogleProtobufTimestamp
    receivedAt: GoogleProtobufTimestamp
    ackedAt: GoogleProtobufTimestamp
    direction: Enum
      senderApiVersion: Uint32!
      receiverApiVersion: Uint32!
      receiverId: String!
    kind: Enum
      attributes: [Byte!],
    conversationId: ID!
}
  
  
  

  
type BertyP2pBandwidthStats  {
      id: String
      totalIn: Int64
      totalOut: Int64
      rateIn: Double
      rateOut: Double
    type: Enum
}
  
  
  

  
type BertyP2pPeer  {
      id: String!
      addrs: [String!]
    connection: Enum
}
type BertyP2pPeers  {
    list: [BertyP2pPeer]
}
  
  
  

type BertyPkgDeviceinfoDeviceInfos  {
    infos: [BertyPkgDeviceinfoDeviceInfo]
}
type BertyPkgDeviceinfoDeviceInfo  {
      key: String!
      value: String!
}
  
  
  

  
type BertyNodePingDestination  {
      destination: String!
}
type BertyNodeEventEdge  {
    node: BertyP2pEvent
      cursor: String!
}
type BertyNodeEventListConnection  {
    edges: [BertyNodeEventEdge]
    pageInfo: BertyNodePageInfo!
}
type BertyNodeContactEdge  {
    node: BertyEntityContact
      cursor: String!
}
type BertyNodeContactListConnection  {
    edges: [BertyNodeContactEdge]
    pageInfo: BertyNodePageInfo!
}
type BertyNodeConversationEdge  {
    node: BertyEntityConversation
      cursor: String!
}
type BertyNodeConversationListConnection  {
    edges: [BertyNodeConversationEdge]
    pageInfo: BertyNodePageInfo!
}
type BertyNodePagination  {
      orderBy: String!
      orderDesc: Bool!
      first: Int32
      after: String
      last: Int32
      before: String
}
type BertyNodePageInfo  {
      startCursor: String!
      endCursor: String!
      hasNextPage: Bool!
      hasPreviousPage: Bool!
      count: Uint32!
}
type BertyNodeVoid  {
      T: Bool!
}
type BertyP2pPeerPayload {
      id: String!
      addrs: [String!]
    connection: Enum
}
input BertyP2pEventInput {
    id: ID!
      senderId: String!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
    sentAt: GoogleProtobufTimestampInput
    receivedAt: GoogleProtobufTimestampInput
    ackedAt: GoogleProtobufTimestampInput
    direction: Enum
      senderApiVersion: Uint32!
      receiverApiVersion: Uint32!
      receiverId: String!
    kind: Enum
      attributes: [Byte!],
    conversationId: ID!
}
type BertyP2pEventPayload {
    id: ID!
      senderId: String!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
    sentAt: GoogleProtobufTimestamp
    receivedAt: GoogleProtobufTimestamp
    ackedAt: GoogleProtobufTimestamp
    direction: Enum
      senderApiVersion: Uint32!
      receiverApiVersion: Uint32!
      receiverId: String!
    kind: Enum
      attributes: [Byte!],
    conversationId: ID!
}
input BertyNodePaginationInput {
      orderBy: String!
      orderDesc: Bool!
      first: Int32
      after: String
      last: Int32
      before: String
}
input BertyEntityDeviceInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      name: String!
    status: Enum
      apiVersion: Uint32!
      contactId: String!
}
input BertyEntityContactInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDeviceInput]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
}
type BertyEntityContactPayload {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDevice]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
}
type BertyEntityConversationPayload {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
      title: String!
      topic: String!
    members: [BertyEntityConversationMember]
}
input BertyEntityConversationMemberInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
    status: Enum
    contact: BertyEntityContactInput
      conversationId: String!
      contactId: String!
}
input BertyEntityConversationInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      title: String!
      topic: String!
    members: [BertyEntityConversationMemberInput]
}
input BertyEntityMessageInput {
      text: String!
}
type BertyEntityConversationMemberPayload {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
    status: Enum
    contact: BertyEntityContact
      conversationId: String!
      contactId: String!
}
type BertyNodeVoidPayload {
      T: Bool!
}
type BertyNodeIntegrationTestPayload {
      name: String!
      success: Bool!
      verbose: String!
    startedAt: GoogleProtobufTimestamp
    finishedAt: GoogleProtobufTimestamp
}
type BertyPkgDeviceinfoDeviceInfosPayload {
    infos: [BertyPkgDeviceinfoDeviceInfo]
}
type BertyNodeAppVersionPayload {
      version: String!
}
type BertyP2pPeersPayload {
    list: [BertyP2pPeer]
}
type BertyNodeProtocolsPayload {
      protocols: [String!]
}
type BertyP2pBandwidthStatsPayload {
      id: String
      totalIn: Int64
      totalOut: Int64
      rateIn: Double
      rateOut: Double
    type: Enum
}
  
type Query {
  node(id: ID!): Node
  ID(
      T: Bool!
  ): BertyP2pPeerPayload
  EventList(
    filter: BertyP2pEventInput
    onlyWithoutAckedAt: Enum
      orderBy: String!
      orderDesc: Bool!
      first: Int32
      after: String
      last: Int32
      before: String
  ): BertyNodeEventListConnection
  GetEvent(
    id: ID!
      senderId: String!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
    sentAt: GoogleProtobufTimestampInput
    receivedAt: GoogleProtobufTimestampInput
    ackedAt: GoogleProtobufTimestampInput
    direction: Enum
      senderApiVersion: Uint32!
      receiverApiVersion: Uint32!
      receiverId: String!
    kind: Enum
      attributes: [Byte!],
    conversationId: ID!
  ): BertyP2pEventPayload
  ContactList(
    filter: BertyEntityContactInput
      orderBy: String!
      orderDesc: Bool!
      first: Int32
      after: String
      last: Int32
      before: String
  ): BertyNodeContactListConnection
  GetContact(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDeviceInput]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
  ): BertyEntityContactPayload
  ConversationList(
    filter: BertyEntityConversationInput
      orderBy: String!
      orderDesc: Bool!
      first: Int32
      after: String
      last: Int32
      before: String
  ): BertyNodeConversationListConnection
  GetConversation(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      title: String!
      topic: String!
    members: [BertyEntityConversationMemberInput]
  ): BertyEntityConversationPayload
  GetConversationMember(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
    status: Enum
    contact: BertyEntityContactInput
      conversationId: String!
      contactId: String!
  ): BertyEntityConversationMemberPayload
  DeviceInfos(
      T: Bool!
  ): BertyPkgDeviceinfoDeviceInfosPayload
  AppVersion(
      T: Bool!
  ): BertyNodeAppVersionPayload
  Peers(
      T: Bool!
  ): BertyP2pPeersPayload
  Protocols(
      id: String!
      addrs: [String!]
    connection: Enum
  ): BertyNodeProtocolsPayload
  Panic(
      T: Bool!
  ): BertyNodeVoidPayload
}
  
type Mutation {
  ContactRequest(
    contact: BertyEntityContactInput
      introText: String!
  ): BertyEntityContactPayload
  ContactAcceptRequest(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDeviceInput]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
  ): BertyEntityContactPayload
  ContactRemove(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDeviceInput]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
  ): BertyEntityContactPayload
  ContactUpdate(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDeviceInput]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
  ): BertyEntityContactPayload
  ConversationCreate(
    contacts: [BertyEntityContactInput]
      title: String!
      topic: String!
  ): BertyEntityConversationPayload
  ConversationInvite(
    conversation: BertyEntityConversationInput
    members: [BertyEntityConversationMemberInput]
  ): BertyEntityConversationPayload
  ConversationExclude(
    conversation: BertyEntityConversationInput
    members: [BertyEntityConversationMemberInput]
  ): BertyEntityConversationPayload
  ConversationAddMessage(
    conversation: BertyEntityConversationInput
    message: BertyEntityMessageInput
  ): BertyP2pEventPayload
  GenerateFakeData(
      T: Bool!
  ): BertyNodeVoidPayload
  RunIntegrationTests(
      name: String!
  ): BertyNodeIntegrationTestPayload
}
  
type Subscription {
  EventStream(
    filter: BertyP2pEventInput
  ): BertyP2pEventPayload
  MonitorBandwidth(
      id: String
      totalIn: Int64
      totalOut: Int64
      rateIn: Double
      rateOut: Double
    type: Enum
  ): BertyP2pBandwidthStatsPayload
  MonitorPeers(
      T: Bool!
  ): BertyP2pPeerPayload
}
`},
)
