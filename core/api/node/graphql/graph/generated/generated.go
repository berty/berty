// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	context "context"
	fmt "fmt"
	strconv "strconv"
	time "time"

	node "berty.tech/core/api/node"
	models "berty.tech/core/api/node/graphql/models"
	p2p "berty.tech/core/api/p2p"
	entity "berty.tech/core/entity"
	graphql "github.com/99designs/gqlgen/graphql"
	introspection "github.com/99designs/gqlgen/graphql/introspection"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	gqlparser "github.com/vektah/gqlparser"
	ast "github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
}

type ResolverRoot interface {
	BertyEntityContact() BertyEntityContactResolver
	BertyEntityContactPayload() BertyEntityContactPayloadResolver
	BertyEntityConversation() BertyEntityConversationResolver
	BertyEntityConversationMember() BertyEntityConversationMemberResolver
	BertyEntityConversationMemberPayload() BertyEntityConversationMemberPayloadResolver
	BertyEntityConversationPayload() BertyEntityConversationPayloadResolver
	BertyEntityDevice() BertyEntityDeviceResolver
	BertyP2pEvent() BertyP2pEventResolver
	BertyP2pEventPayload() BertyP2pEventPayloadResolver
	GoogleProtobufFieldDescriptorProto() GoogleProtobufFieldDescriptorProtoResolver
	GoogleProtobufFieldOptions() GoogleProtobufFieldOptionsResolver
	GoogleProtobufFileOptions() GoogleProtobufFileOptionsResolver
	GoogleProtobufMethodOptions() GoogleProtobufMethodOptionsResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}
type BertyEntityContactResolver interface {
	ID(ctx context.Context, obj *entity.Contact) (string, error)
}
type BertyEntityContactPayloadResolver interface {
	ID(ctx context.Context, obj *entity.Contact) (string, error)
}
type BertyEntityConversationResolver interface {
	ID(ctx context.Context, obj *entity.Conversation) (string, error)
}
type BertyEntityConversationMemberResolver interface {
	ID(ctx context.Context, obj *entity.ConversationMember) (string, error)
}
type BertyEntityConversationMemberPayloadResolver interface {
	ID(ctx context.Context, obj *entity.ConversationMember) (string, error)
}
type BertyEntityConversationPayloadResolver interface {
	ID(ctx context.Context, obj *entity.Conversation) (string, error)
}
type BertyEntityDeviceResolver interface {
	ID(ctx context.Context, obj *entity.Device) (string, error)
}
type BertyP2pEventResolver interface {
	ID(ctx context.Context, obj *p2p.Event) (string, error)

	Attributes(ctx context.Context, obj *p2p.Event) ([]byte, error)
	ConversationID(ctx context.Context, obj *p2p.Event) (string, error)
}
type BertyP2pEventPayloadResolver interface {
	ID(ctx context.Context, obj *p2p.Event) (string, error)

	Attributes(ctx context.Context, obj *p2p.Event) ([]byte, error)
	ConversationID(ctx context.Context, obj *p2p.Event) (string, error)
}
type GoogleProtobufFieldDescriptorProtoResolver interface {
	Label(ctx context.Context, obj *descriptor.FieldDescriptorProto) (*int32, error)
	Type(ctx context.Context, obj *descriptor.FieldDescriptorProto) (*int32, error)
}
type GoogleProtobufFieldOptionsResolver interface {
	Ctype(ctx context.Context, obj *descriptor.FieldOptions) (*int32, error)

	Jstype(ctx context.Context, obj *descriptor.FieldOptions) (*int32, error)
}
type GoogleProtobufFileOptionsResolver interface {
	OptimizeFor(ctx context.Context, obj *descriptor.FileOptions) (*int32, error)

	PhpMetadataNamespace(ctx context.Context, obj *descriptor.FileOptions) (string, error)
	RubyPackage(ctx context.Context, obj *descriptor.FileOptions) (string, error)
}
type GoogleProtobufMethodOptionsResolver interface {
	IdempotencyLevel(ctx context.Context, obj *descriptor.MethodOptions) (*int32, error)
}
type MutationResolver interface {
	ContactRequest(ctx context.Context, contact *entity.Contact, introText string) (*entity.Contact, error)
	ContactAcceptRequest(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) (*entity.Contact, error)
	ContactRemove(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) (*entity.Contact, error)
	ContactUpdate(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) (*entity.Contact, error)
	ConversationCreate(ctx context.Context, contacts []*entity.Contact, title string, topic string) (*entity.Conversation, error)
	ConversationInvite(ctx context.Context, conversation *entity.Conversation, members []*entity.ConversationMember) (*entity.Conversation, error)
	ConversationExclude(ctx context.Context, conversation *entity.Conversation, members []*entity.ConversationMember) (*entity.Conversation, error)
	ConversationAddMessage(ctx context.Context, conversation *entity.Conversation, message *entity.Message) (*p2p.Event, error)
	GenerateFakeData(ctx context.Context, T bool) (*node.Void, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id string) (models.Node, error)
	EventList(ctx context.Context, limit uint32, filter *p2p.Event) ([]*p2p.Event, error)
	GetEvent(ctx context.Context, id string, senderId string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sentAt *time.Time, receivedAt *time.Time, ackedAt *time.Time, direction *int32, senderApiVersion uint32, receiverApiVersion uint32, receiverId string, kind *int32, attributes []byte, conversationId string) (*p2p.Event, error)
	ContactList(ctx context.Context, filter *entity.Contact) ([]*entity.Contact, error)
	GetContact(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) (*entity.Contact, error)
	ConversationList(ctx context.Context, filter *entity.Conversation) ([]*entity.Conversation, error)
	GetConversation(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, title string, topic string, members []*entity.ConversationMember) (*entity.Conversation, error)
	GetConversationMember(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deletedAt *time.Time, status *int32, contact *entity.Contact, conversationId string, contactId string) (*entity.ConversationMember, error)
}
type SubscriptionResolver interface {
	EventStream(ctx context.Context, filter *p2p.Event) (<-chan *p2p.Event, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	next := ec._Subscription(ctx, op.SelectionSet)
	if ec.Errors != nil {
		return graphql.OneShot(&graphql.Response{Data: []byte("null"), Errors: ec.Errors})
	}

	var buf bytes.Buffer
	return func() *graphql.Response {
		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		return &graphql.Response{
			Data:   buf,
			Errors: ec.Errors,
		}
	}
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var bertyEntityContactImplementors = []string{"BertyEntityContact", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityContact(ctx context.Context, sel ast.SelectionSet, obj *entity.Contact) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityContactImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityContact")
		case "id":
			out.Values[i] = ec._BertyEntityContact_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntityContact_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityContact_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityContact_deletedAt(ctx, field, obj)
		case "sigchain":
			out.Values[i] = ec._BertyEntityContact_sigchain(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityContact_status(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._BertyEntityContact_devices(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._BertyEntityContact_displayName(ctx, field, obj)
		case "displayStatus":
			out.Values[i] = ec._BertyEntityContact_displayStatus(ctx, field, obj)
		case "overrideDisplayName":
			out.Values[i] = ec._BertyEntityContact_overrideDisplayName(ctx, field, obj)
		case "overrideDisplayStatus":
			out.Values[i] = ec._BertyEntityContact_overrideDisplayStatus(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityContact_id(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyEntityContact().ID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return models.MarshalID(res)
	})
}

func (ec *executionContext) _BertyEntityContact_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityContact_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityContact_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyEntityContact_sigchain(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Sigchain, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return models.MarshalByte(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _BertyEntityContact_status(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Contact_Status)
	return models.MarshalEnum(int32(res))
}

func (ec *executionContext) _BertyEntityContact_devices(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Devices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Device)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._BertyEntityDevice(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _BertyEntityContact_displayName(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DisplayName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityContact_displayStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DisplayStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityContact_overrideDisplayName(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OverrideDisplayName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityContact_overrideDisplayStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OverrideDisplayStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var bertyEntityContactPayloadImplementors = []string{"BertyEntityContactPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityContactPayload(ctx context.Context, sel ast.SelectionSet, obj *entity.Contact) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityContactPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityContactPayload")
		case "id":
			out.Values[i] = ec._BertyEntityContactPayload_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntityContactPayload_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityContactPayload_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityContactPayload_deletedAt(ctx, field, obj)
		case "sigchain":
			out.Values[i] = ec._BertyEntityContactPayload_sigchain(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityContactPayload_status(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._BertyEntityContactPayload_devices(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._BertyEntityContactPayload_displayName(ctx, field, obj)
		case "displayStatus":
			out.Values[i] = ec._BertyEntityContactPayload_displayStatus(ctx, field, obj)
		case "overrideDisplayName":
			out.Values[i] = ec._BertyEntityContactPayload_overrideDisplayName(ctx, field, obj)
		case "overrideDisplayStatus":
			out.Values[i] = ec._BertyEntityContactPayload_overrideDisplayStatus(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityContactPayload_id(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyEntityContactPayload",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyEntityContactPayload().ID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return models.MarshalID(res)
	})
}

func (ec *executionContext) _BertyEntityContactPayload_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContactPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityContactPayload_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContactPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityContactPayload_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContactPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyEntityContactPayload_sigchain(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContactPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Sigchain, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return models.MarshalByte(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _BertyEntityContactPayload_status(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContactPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Contact_Status)
	return models.MarshalEnum(int32(res))
}

func (ec *executionContext) _BertyEntityContactPayload_devices(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContactPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Devices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Device)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._BertyEntityDevice(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _BertyEntityContactPayload_displayName(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContactPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DisplayName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityContactPayload_displayStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContactPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DisplayStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityContactPayload_overrideDisplayName(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContactPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OverrideDisplayName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityContactPayload_overrideDisplayStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContactPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OverrideDisplayStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var bertyEntityConversationImplementors = []string{"BertyEntityConversation", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversation(ctx context.Context, sel ast.SelectionSet, obj *entity.Conversation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversation")
		case "id":
			out.Values[i] = ec._BertyEntityConversation_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversation_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversation_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityConversation_deletedAt(ctx, field, obj)
		case "title":
			out.Values[i] = ec._BertyEntityConversation_title(ctx, field, obj)
		case "topic":
			out.Values[i] = ec._BertyEntityConversation_topic(ctx, field, obj)
		case "members":
			out.Values[i] = ec._BertyEntityConversation_members(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityConversation_id(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyEntityConversation().ID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return models.MarshalID(res)
	})
}

func (ec *executionContext) _BertyEntityConversation_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityConversation_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityConversation_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyEntityConversation_title(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Title, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityConversation_topic(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Topic, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityConversation_members(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Members, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.ConversationMember)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._BertyEntityConversationMember(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var bertyEntityConversationMemberImplementors = []string{"BertyEntityConversationMember", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationMember(ctx context.Context, sel ast.SelectionSet, obj *entity.ConversationMember) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationMemberImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationMember")
		case "id":
			out.Values[i] = ec._BertyEntityConversationMember_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversationMember_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversationMember_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityConversationMember_deletedAt(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityConversationMember_status(ctx, field, obj)
		case "contact":
			out.Values[i] = ec._BertyEntityConversationMember_contact(ctx, field, obj)
		case "conversationId":
			out.Values[i] = ec._BertyEntityConversationMember_conversationId(ctx, field, obj)
		case "contactId":
			out.Values[i] = ec._BertyEntityConversationMember_contactId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityConversationMember_id(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyEntityConversationMember().ID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return models.MarshalID(res)
	})
}

func (ec *executionContext) _BertyEntityConversationMember_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityConversationMember_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityConversationMember_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyEntityConversationMember_status(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.ConversationMember_Status)
	return models.MarshalEnum(int32(res))
}

func (ec *executionContext) _BertyEntityConversationMember_contact(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

func (ec *executionContext) _BertyEntityConversationMember_conversationId(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ConversationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityConversationMember_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ContactID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var bertyEntityConversationMemberPayloadImplementors = []string{"BertyEntityConversationMemberPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationMemberPayload(ctx context.Context, sel ast.SelectionSet, obj *entity.ConversationMember) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationMemberPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationMemberPayload")
		case "id":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_deletedAt(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_status(ctx, field, obj)
		case "contact":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_contact(ctx, field, obj)
		case "conversationId":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_conversationId(ctx, field, obj)
		case "contactId":
			out.Values[i] = ec._BertyEntityConversationMemberPayload_contactId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityConversationMemberPayload_id(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyEntityConversationMemberPayload",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyEntityConversationMemberPayload().ID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return models.MarshalID(res)
	})
}

func (ec *executionContext) _BertyEntityConversationMemberPayload_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMemberPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityConversationMemberPayload_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMemberPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityConversationMemberPayload_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMemberPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyEntityConversationMemberPayload_status(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMemberPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.ConversationMember_Status)
	return models.MarshalEnum(int32(res))
}

func (ec *executionContext) _BertyEntityConversationMemberPayload_contact(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMemberPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

func (ec *executionContext) _BertyEntityConversationMemberPayload_conversationId(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMemberPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ConversationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityConversationMemberPayload_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMemberPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ContactID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var bertyEntityConversationPayloadImplementors = []string{"BertyEntityConversationPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationPayload(ctx context.Context, sel ast.SelectionSet, obj *entity.Conversation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationPayload")
		case "id":
			out.Values[i] = ec._BertyEntityConversationPayload_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversationPayload_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversationPayload_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityConversationPayload_deletedAt(ctx, field, obj)
		case "title":
			out.Values[i] = ec._BertyEntityConversationPayload_title(ctx, field, obj)
		case "topic":
			out.Values[i] = ec._BertyEntityConversationPayload_topic(ctx, field, obj)
		case "members":
			out.Values[i] = ec._BertyEntityConversationPayload_members(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityConversationPayload_id(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyEntityConversationPayload",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyEntityConversationPayload().ID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return models.MarshalID(res)
	})
}

func (ec *executionContext) _BertyEntityConversationPayload_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityConversationPayload_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityConversationPayload_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyEntityConversationPayload_title(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Title, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityConversationPayload_topic(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Topic, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityConversationPayload_members(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Members, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.ConversationMember)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._BertyEntityConversationMember(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var bertyEntityDeviceImplementors = []string{"BertyEntityDevice", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityDevice(ctx context.Context, sel ast.SelectionSet, obj *entity.Device) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityDeviceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityDevice")
		case "id":
			out.Values[i] = ec._BertyEntityDevice_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntityDevice_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityDevice_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityDevice_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._BertyEntityDevice_name(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityDevice_status(ctx, field, obj)
		case "apiVersion":
			out.Values[i] = ec._BertyEntityDevice_apiVersion(ctx, field, obj)
		case "contactId":
			out.Values[i] = ec._BertyEntityDevice_contactId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityDevice_id(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyEntityDevice().ID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return models.MarshalID(res)
	})
}

func (ec *executionContext) _BertyEntityDevice_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityDevice_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntityDevice_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyEntityDevice_name(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntityDevice_status(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Device_Status)
	return models.MarshalEnum(int32(res))
}

func (ec *executionContext) _BertyEntityDevice_apiVersion(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ApiVersion, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	return models.MarshalUint32(res)
}

func (ec *executionContext) _BertyEntityDevice_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ContactID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var bertyEntityMessageImplementors = []string{"BertyEntityMessage"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityMessage(ctx context.Context, sel ast.SelectionSet, obj *entity.Message) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityMessageImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityMessage")
		case "text":
			out.Values[i] = ec._BertyEntityMessage_text(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityMessage_text(ctx context.Context, field graphql.CollectedField, obj *entity.Message) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityMessage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Text, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var bertyEntitySenderAliasImplementors = []string{"BertyEntitySenderAlias"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntitySenderAlias(ctx context.Context, sel ast.SelectionSet, obj *entity.SenderAlias) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntitySenderAliasImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntitySenderAlias")
		case "id":
			out.Values[i] = ec._BertyEntitySenderAlias_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntitySenderAlias_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntitySenderAlias_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntitySenderAlias_deletedAt(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntitySenderAlias_status(ctx, field, obj)
		case "originDeviceId":
			out.Values[i] = ec._BertyEntitySenderAlias_originDeviceId(ctx, field, obj)
		case "contactId":
			out.Values[i] = ec._BertyEntitySenderAlias_contactId(ctx, field, obj)
		case "conversationId":
			out.Values[i] = ec._BertyEntitySenderAlias_conversationId(ctx, field, obj)
		case "aliasIdentifier":
			out.Values[i] = ec._BertyEntitySenderAlias_aliasIdentifier(ctx, field, obj)
		case "used":
			out.Values[i] = ec._BertyEntitySenderAlias_used(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntitySenderAlias_id(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntitySenderAlias"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntitySenderAlias_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntitySenderAlias"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntitySenderAlias_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntitySenderAlias"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyEntitySenderAlias_deletedAt(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntitySenderAlias"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyEntitySenderAlias_status(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntitySenderAlias"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.SenderAlias_Status)
	return models.MarshalEnum(int32(res))
}

func (ec *executionContext) _BertyEntitySenderAlias_originDeviceId(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntitySenderAlias"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OriginDeviceID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntitySenderAlias_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntitySenderAlias"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ContactID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntitySenderAlias_conversationId(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntitySenderAlias"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ConversationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntitySenderAlias_aliasIdentifier(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntitySenderAlias"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AliasIdentifier, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyEntitySenderAlias_used(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntitySenderAlias"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Used, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return models.MarshalBool(res)
}

var bertyNodePingDestinationImplementors = []string{"BertyNodePingDestination"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodePingDestination(ctx context.Context, sel ast.SelectionSet, obj *node.PingDestination) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodePingDestinationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodePingDestination")
		case "destination":
			out.Values[i] = ec._BertyNodePingDestination_destination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyNodePingDestination_destination(ctx context.Context, field graphql.CollectedField, obj *node.PingDestination) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodePingDestination"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Destination, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var bertyNodeVoidImplementors = []string{"BertyNodeVoid"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeVoid(ctx context.Context, sel ast.SelectionSet, obj *node.Void) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeVoidImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeVoid")
		case "T":
			out.Values[i] = ec._BertyNodeVoid_T(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyNodeVoid_T(ctx context.Context, field graphql.CollectedField, obj *node.Void) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeVoid"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.T, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return models.MarshalBool(res)
}

var bertyNodeVoidPayloadImplementors = []string{"BertyNodeVoidPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeVoidPayload(ctx context.Context, sel ast.SelectionSet, obj *node.Void) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeVoidPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeVoidPayload")
		case "T":
			out.Values[i] = ec._BertyNodeVoidPayload_T(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyNodeVoidPayload_T(ctx context.Context, field graphql.CollectedField, obj *node.Void) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeVoidPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.T, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return models.MarshalBool(res)
}

var bertyP2pAckAttrsImplementors = []string{"BertyP2pAckAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pAckAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.AckAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pAckAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pAckAttrs")
		case "ids":
			out.Values[i] = ec._BertyP2pAckAttrs_ids(ctx, field, obj)
		case "ErrMsg":
			out.Values[i] = ec._BertyP2pAckAttrs_ErrMsg(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pAckAttrs_ids(ctx context.Context, field graphql.CollectedField, obj *p2p.AckAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pAckAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IDs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _BertyP2pAckAttrs_ErrMsg(ctx context.Context, field graphql.CollectedField, obj *p2p.AckAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pAckAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ErrMsg, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var bertyP2pContactRequestAcceptedAttrsImplementors = []string{"BertyP2pContactRequestAcceptedAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactRequestAcceptedAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ContactRequestAcceptedAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactRequestAcceptedAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactRequestAcceptedAttrs")
		case "T":
			out.Values[i] = ec._BertyP2pContactRequestAcceptedAttrs_T(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pContactRequestAcceptedAttrs_T(ctx context.Context, field graphql.CollectedField, obj *p2p.ContactRequestAcceptedAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pContactRequestAcceptedAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.T, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return models.MarshalBool(res)
}

var bertyP2pContactRequestAttrsImplementors = []string{"BertyP2pContactRequestAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactRequestAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ContactRequestAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactRequestAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactRequestAttrs")
		case "me":
			out.Values[i] = ec._BertyP2pContactRequestAttrs_me(ctx, field, obj)
		case "introText":
			out.Values[i] = ec._BertyP2pContactRequestAttrs_introText(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pContactRequestAttrs_me(ctx context.Context, field graphql.CollectedField, obj *p2p.ContactRequestAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pContactRequestAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Me, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

func (ec *executionContext) _BertyP2pContactRequestAttrs_introText(ctx context.Context, field graphql.CollectedField, obj *p2p.ContactRequestAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pContactRequestAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IntroText, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var bertyP2pContactShareAttrsImplementors = []string{"BertyP2pContactShareAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactShareAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ContactShareAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactShareAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactShareAttrs")
		case "contact":
			out.Values[i] = ec._BertyP2pContactShareAttrs_contact(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pContactShareAttrs_contact(ctx context.Context, field graphql.CollectedField, obj *p2p.ContactShareAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pContactShareAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

var bertyP2pContactShareMeAttrsImplementors = []string{"BertyP2pContactShareMeAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactShareMeAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ContactShareMeAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactShareMeAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactShareMeAttrs")
		case "me":
			out.Values[i] = ec._BertyP2pContactShareMeAttrs_me(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pContactShareMeAttrs_me(ctx context.Context, field graphql.CollectedField, obj *p2p.ContactShareMeAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pContactShareMeAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Me, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

var bertyP2pConversationInviteAttrsImplementors = []string{"BertyP2pConversationInviteAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pConversationInviteAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ConversationInviteAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pConversationInviteAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pConversationInviteAttrs")
		case "conversation":
			out.Values[i] = ec._BertyP2pConversationInviteAttrs_conversation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pConversationInviteAttrs_conversation(ctx context.Context, field graphql.CollectedField, obj *p2p.ConversationInviteAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pConversationInviteAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Conversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

var bertyP2pConversationNewMessageAttrsImplementors = []string{"BertyP2pConversationNewMessageAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pConversationNewMessageAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.ConversationNewMessageAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pConversationNewMessageAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pConversationNewMessageAttrs")
		case "message":
			out.Values[i] = ec._BertyP2pConversationNewMessageAttrs_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pConversationNewMessageAttrs_message(ctx context.Context, field graphql.CollectedField, obj *p2p.ConversationNewMessageAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pConversationNewMessageAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Message, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Message)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityMessage(ctx, field.Selections, res)
}

var bertyP2pDevtoolsMapsetAttrsImplementors = []string{"BertyP2pDevtoolsMapsetAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pDevtoolsMapsetAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.DevtoolsMapsetAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pDevtoolsMapsetAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pDevtoolsMapsetAttrs")
		case "key":
			out.Values[i] = ec._BertyP2pDevtoolsMapsetAttrs_key(ctx, field, obj)
		case "val":
			out.Values[i] = ec._BertyP2pDevtoolsMapsetAttrs_val(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pDevtoolsMapsetAttrs_key(ctx context.Context, field graphql.CollectedField, obj *p2p.DevtoolsMapsetAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pDevtoolsMapsetAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Key, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyP2pDevtoolsMapsetAttrs_val(ctx context.Context, field graphql.CollectedField, obj *p2p.DevtoolsMapsetAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pDevtoolsMapsetAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Val, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var bertyP2pEventImplementors = []string{"BertyP2pEvent", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pEvent(ctx context.Context, sel ast.SelectionSet, obj *p2p.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pEventImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pEvent")
		case "id":
			out.Values[i] = ec._BertyP2pEvent_id(ctx, field, obj)
		case "senderId":
			out.Values[i] = ec._BertyP2pEvent_senderId(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyP2pEvent_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyP2pEvent_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyP2pEvent_deletedAt(ctx, field, obj)
		case "sentAt":
			out.Values[i] = ec._BertyP2pEvent_sentAt(ctx, field, obj)
		case "receivedAt":
			out.Values[i] = ec._BertyP2pEvent_receivedAt(ctx, field, obj)
		case "ackedAt":
			out.Values[i] = ec._BertyP2pEvent_ackedAt(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._BertyP2pEvent_direction(ctx, field, obj)
		case "senderApiVersion":
			out.Values[i] = ec._BertyP2pEvent_senderApiVersion(ctx, field, obj)
		case "receiverApiVersion":
			out.Values[i] = ec._BertyP2pEvent_receiverApiVersion(ctx, field, obj)
		case "receiverId":
			out.Values[i] = ec._BertyP2pEvent_receiverId(ctx, field, obj)
		case "kind":
			out.Values[i] = ec._BertyP2pEvent_kind(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._BertyP2pEvent_attributes(ctx, field, obj)
		case "conversationId":
			out.Values[i] = ec._BertyP2pEvent_conversationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pEvent_id(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyP2pEvent().ID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return models.MarshalID(res)
	})
}

func (ec *executionContext) _BertyP2pEvent_senderId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SenderID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyP2pEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyP2pEvent_updatedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyP2pEvent_deletedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyP2pEvent_sentAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SentAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyP2pEvent_receivedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReceivedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyP2pEvent_ackedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AckedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyP2pEvent_direction(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Direction, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.Event_Direction)
	return models.MarshalEnum(int32(res))
}

func (ec *executionContext) _BertyP2pEvent_senderApiVersion(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SenderAPIVersion, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	return models.MarshalUint32(res)
}

func (ec *executionContext) _BertyP2pEvent_receiverApiVersion(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReceiverAPIVersion, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	return models.MarshalUint32(res)
}

func (ec *executionContext) _BertyP2pEvent_receiverId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReceiverID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyP2pEvent_kind(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Kind, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.Kind)
	return models.MarshalEnum(int32(res))
}

func (ec *executionContext) _BertyP2pEvent_attributes(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyP2pEvent().Attributes(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]byte)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return models.MarshalByte(res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _BertyP2pEvent_conversationId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyP2pEvent",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyP2pEvent().ConversationID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return models.MarshalID(res)
	})
}

var bertyP2pEventPayloadImplementors = []string{"BertyP2pEventPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pEventPayload(ctx context.Context, sel ast.SelectionSet, obj *p2p.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pEventPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pEventPayload")
		case "id":
			out.Values[i] = ec._BertyP2pEventPayload_id(ctx, field, obj)
		case "senderId":
			out.Values[i] = ec._BertyP2pEventPayload_senderId(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyP2pEventPayload_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyP2pEventPayload_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyP2pEventPayload_deletedAt(ctx, field, obj)
		case "sentAt":
			out.Values[i] = ec._BertyP2pEventPayload_sentAt(ctx, field, obj)
		case "receivedAt":
			out.Values[i] = ec._BertyP2pEventPayload_receivedAt(ctx, field, obj)
		case "ackedAt":
			out.Values[i] = ec._BertyP2pEventPayload_ackedAt(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._BertyP2pEventPayload_direction(ctx, field, obj)
		case "senderApiVersion":
			out.Values[i] = ec._BertyP2pEventPayload_senderApiVersion(ctx, field, obj)
		case "receiverApiVersion":
			out.Values[i] = ec._BertyP2pEventPayload_receiverApiVersion(ctx, field, obj)
		case "receiverId":
			out.Values[i] = ec._BertyP2pEventPayload_receiverId(ctx, field, obj)
		case "kind":
			out.Values[i] = ec._BertyP2pEventPayload_kind(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._BertyP2pEventPayload_attributes(ctx, field, obj)
		case "conversationId":
			out.Values[i] = ec._BertyP2pEventPayload_conversationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pEventPayload_id(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyP2pEventPayload().ID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return models.MarshalID(res)
	})
}

func (ec *executionContext) _BertyP2pEventPayload_senderId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SenderID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyP2pEventPayload_createdAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyP2pEventPayload_updatedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return models.MarshalTime(res)
}

func (ec *executionContext) _BertyP2pEventPayload_deletedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyP2pEventPayload_sentAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SentAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyP2pEventPayload_receivedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReceivedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyP2pEventPayload_ackedAt(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AckedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

func (ec *executionContext) _BertyP2pEventPayload_direction(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Direction, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.Event_Direction)
	return models.MarshalEnum(int32(res))
}

func (ec *executionContext) _BertyP2pEventPayload_senderApiVersion(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SenderAPIVersion, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	return models.MarshalUint32(res)
}

func (ec *executionContext) _BertyP2pEventPayload_receiverApiVersion(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReceiverAPIVersion, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	return models.MarshalUint32(res)
}

func (ec *executionContext) _BertyP2pEventPayload_receiverId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReceiverID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _BertyP2pEventPayload_kind(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEventPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Kind, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(p2p.Kind)
	return models.MarshalEnum(int32(res))
}

func (ec *executionContext) _BertyP2pEventPayload_attributes(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyP2pEventPayload().Attributes(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]byte)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return models.MarshalByte(res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _BertyP2pEventPayload_conversationId(ctx context.Context, field graphql.CollectedField, obj *p2p.Event) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "BertyP2pEventPayload",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.BertyP2pEventPayload().ConversationID(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return models.MarshalID(res)
	})
}

var bertyP2pPingAttrsImplementors = []string{"BertyP2pPingAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pPingAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.PingAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pPingAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pPingAttrs")
		case "T":
			out.Values[i] = ec._BertyP2pPingAttrs_T(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pPingAttrs_T(ctx context.Context, field graphql.CollectedField, obj *p2p.PingAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pPingAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.T, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return models.MarshalBool(res)
}

var bertyP2pSenderAliasUpdateAttrsImplementors = []string{"BertyP2pSenderAliasUpdateAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pSenderAliasUpdateAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.SenderAliasUpdateAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pSenderAliasUpdateAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pSenderAliasUpdateAttrs")
		case "aliases":
			out.Values[i] = ec._BertyP2pSenderAliasUpdateAttrs_aliases(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pSenderAliasUpdateAttrs_aliases(ctx context.Context, field graphql.CollectedField, obj *p2p.SenderAliasUpdateAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pSenderAliasUpdateAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Aliases, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.SenderAlias)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._BertyEntitySenderAlias(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var bertyP2pSentAttrsImplementors = []string{"BertyP2pSentAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pSentAttrs(ctx context.Context, sel ast.SelectionSet, obj *p2p.SentAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pSentAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pSentAttrs")
		case "ids":
			out.Values[i] = ec._BertyP2pSentAttrs_ids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pSentAttrs_ids(ctx context.Context, field graphql.CollectedField, obj *p2p.SentAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pSentAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IDs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

var googleProtobufDescriptorProtoImplementors = []string{"GoogleProtobufDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.DescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_name(ctx, field, obj)
		case "field":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_field(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_extension(ctx, field, obj)
		case "nestedType":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_nestedType(ctx, field, obj)
		case "enumType":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_enumType(ctx, field, obj)
		case "extensionRange":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_extensionRange(ctx, field, obj)
		case "oneofDecl":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_oneofDecl(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_options(ctx, field, obj)
		case "reservedRange":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_reservedRange(ctx, field, obj)
		case "reservedName":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_reservedName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_field(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Field, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FieldDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_extension(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Extension, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FieldDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_nestedType(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.NestedType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_enumType(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EnumType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufEnumDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_extensionRange(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ExtensionRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto_ExtensionRange)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufDescriptorProtoExtensionRange(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_oneofDecl(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OneofDecl, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.OneofDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufOneofDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.MessageOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufMessageOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_reservedRange(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReservedRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto_ReservedRange)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufDescriptorProtoReservedRange(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_reservedName(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReservedName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

var googleProtobufDescriptorProtoExtensionRangeImplementors = []string{"GoogleProtobufDescriptorProtoExtensionRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange(ctx context.Context, sel ast.SelectionSet, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoExtensionRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProtoExtensionRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_start(ctx, field, obj)
		case "end":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_end(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_start(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProtoExtensionRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Start, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProtoExtensionRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.End, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProtoExtensionRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.ExtensionRangeOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufExtensionRangeOptions(ctx, field.Selections, res)
}

var googleProtobufDescriptorProtoReservedRangeImplementors = []string{"GoogleProtobufDescriptorProtoReservedRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange(ctx context.Context, sel ast.SelectionSet, obj *descriptor.DescriptorProto_ReservedRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoReservedRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProtoReservedRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoReservedRange_start(ctx, field, obj)
		case "end":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoReservedRange_end(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange_start(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ReservedRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProtoReservedRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Start, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ReservedRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProtoReservedRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.End, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

var googleProtobufEnumDescriptorProtoImplementors = []string{"GoogleProtobufEnumDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_name(ctx, field, obj)
		case "value":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_value(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_options(ctx, field, obj)
		case "reservedRange":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_reservedRange(ctx, field, obj)
		case "reservedName":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_reservedName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_value(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Value, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumValueDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufEnumValueDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.EnumOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufEnumOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_reservedRange(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReservedRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumDescriptorProto_EnumReservedRange)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_reservedName(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReservedName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

var googleProtobufEnumDescriptorProtoEnumReservedRangeImplementors = []string{"GoogleProtobufEnumDescriptorProtoEnumReservedRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumDescriptorProto_EnumReservedRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumDescriptorProtoEnumReservedRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumDescriptorProtoEnumReservedRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange_start(ctx, field, obj)
		case "end":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange_end(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange_start(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto_EnumReservedRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProtoEnumReservedRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Start, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto_EnumReservedRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProtoEnumReservedRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.End, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

var googleProtobufEnumOptionsImplementors = []string{"GoogleProtobufEnumOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumOptions")
		case "allowAlias":
			out.Values[i] = ec._GoogleProtobufEnumOptions_allowAlias(ctx, field, obj)
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufEnumOptions_deprecated(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufEnumOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufEnumOptions_allowAlias(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AllowAlias, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufEnumOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufEnumOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufEnumValueDescriptorProtoImplementors = []string{"GoogleProtobufEnumValueDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumValueDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumValueDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_name(ctx, field, obj)
		case "number":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_number(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumValueDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_number(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumValueDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Number, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumValueDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.EnumValueOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufEnumValueOptions(ctx, field.Selections, res)
}

var googleProtobufEnumValueOptionsImplementors = []string{"GoogleProtobufEnumValueOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumValueOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumValueOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumValueOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumValueOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufEnumValueOptions_deprecated(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufEnumValueOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufEnumValueOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumValueOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufEnumValueOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumValueOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufExtensionRangeOptionsImplementors = []string{"GoogleProtobufExtensionRangeOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufExtensionRangeOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.ExtensionRangeOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufExtensionRangeOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufExtensionRangeOptions")
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufExtensionRangeOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufExtensionRangeOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.ExtensionRangeOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufExtensionRangeOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufFieldDescriptorProtoImplementors = []string{"GoogleProtobufFieldDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFieldDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFieldDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_name(ctx, field, obj)
		case "number":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_number(ctx, field, obj)
		case "label":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_label(ctx, field, obj)
		case "type":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_type(ctx, field, obj)
		case "typeName":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_typeName(ctx, field, obj)
		case "extendee":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_extendee(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_defaultValue(ctx, field, obj)
		case "oneofIndex":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_oneofIndex(ctx, field, obj)
		case "jsonName":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_jsonName(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_number(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Number, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_label(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GoogleProtobufFieldDescriptorProto().Label(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*int32)
		if res == nil {
			return graphql.Null
		}
		return models.MarshalEnum(*res)
	})
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_type(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GoogleProtobufFieldDescriptorProto().Type(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*int32)
		if res == nil {
			return graphql.Null
		}
		return models.MarshalEnum(*res)
	})
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_typeName(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TypeName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_extendee(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Extendee, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_defaultValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_oneofIndex(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OneofIndex, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_jsonName(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JsonName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.FieldOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufFieldOptions(ctx, field.Selections, res)
}

var googleProtobufFieldOptionsImplementors = []string{"GoogleProtobufFieldOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFieldOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FieldOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFieldOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFieldOptions")
		case "ctype":
			out.Values[i] = ec._GoogleProtobufFieldOptions_ctype(ctx, field, obj)
		case "packed":
			out.Values[i] = ec._GoogleProtobufFieldOptions_packed(ctx, field, obj)
		case "jstype":
			out.Values[i] = ec._GoogleProtobufFieldOptions_jstype(ctx, field, obj)
		case "lazy":
			out.Values[i] = ec._GoogleProtobufFieldOptions_lazy(ctx, field, obj)
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufFieldOptions_deprecated(ctx, field, obj)
		case "weak":
			out.Values[i] = ec._GoogleProtobufFieldOptions_weak(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufFieldOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufFieldOptions_ctype(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GoogleProtobufFieldOptions().Ctype(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*int32)
		if res == nil {
			return graphql.Null
		}
		return models.MarshalEnum(*res)
	})
}

func (ec *executionContext) _GoogleProtobufFieldOptions_packed(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Packed, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFieldOptions_jstype(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GoogleProtobufFieldOptions().Jstype(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*int32)
		if res == nil {
			return graphql.Null
		}
		return models.MarshalEnum(*res)
	})
}

func (ec *executionContext) _GoogleProtobufFieldOptions_lazy(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Lazy, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFieldOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFieldOptions_weak(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Weak, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFieldOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufFileDescriptorProtoImplementors = []string{"GoogleProtobufFileDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_name(ctx, field, obj)
		case "package":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_package(ctx, field, obj)
		case "dependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_dependency(ctx, field, obj)
		case "publicDependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_publicDependency(ctx, field, obj)
		case "weakDependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_weakDependency(ctx, field, obj)
		case "messageType":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_messageType(ctx, field, obj)
		case "enumType":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_enumType(ctx, field, obj)
		case "service":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_service(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_extension(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_options(ctx, field, obj)
		case "sourceCodeInfo":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_sourceCodeInfo(ctx, field, obj)
		case "syntax":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_syntax(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_package(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Package, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_dependency(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Dependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_publicDependency(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PublicDependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return models.MarshalInt32(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_weakDependency(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.WeakDependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return models.MarshalInt32(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_messageType(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MessageType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_enumType(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EnumType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufEnumDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_service(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Service, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.ServiceDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufServiceDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_extension(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Extension, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FieldDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.FileOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufFileOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_sourceCodeInfo(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SourceCodeInfo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.SourceCodeInfo)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufSourceCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_syntax(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Syntax, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var googleProtobufFileDescriptorSetImplementors = []string{"GoogleProtobufFileDescriptorSet"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileDescriptorSet(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FileDescriptorSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileDescriptorSetImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileDescriptorSet")
		case "file":
			out.Values[i] = ec._GoogleProtobufFileDescriptorSet_file(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufFileDescriptorSet_file(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorSet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorSet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.File, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FileDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufFileDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufFileOptionsImplementors = []string{"GoogleProtobufFileOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FileOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileOptions")
		case "javaPackage":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaPackage(ctx, field, obj)
		case "javaOuterClassname":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaOuterClassname(ctx, field, obj)
		case "javaMultipleFiles":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaMultipleFiles(ctx, field, obj)
		case "javaGenerateEqualsAndHash":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaGenerateEqualsAndHash(ctx, field, obj)
		case "javaStringCheckUtf8":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaStringCheckUtf8(ctx, field, obj)
		case "optimizeFor":
			out.Values[i] = ec._GoogleProtobufFileOptions_optimizeFor(ctx, field, obj)
		case "goPackage":
			out.Values[i] = ec._GoogleProtobufFileOptions_goPackage(ctx, field, obj)
		case "ccGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_ccGenericServices(ctx, field, obj)
		case "javaGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaGenericServices(ctx, field, obj)
		case "pyGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_pyGenericServices(ctx, field, obj)
		case "phpGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpGenericServices(ctx, field, obj)
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufFileOptions_deprecated(ctx, field, obj)
		case "ccEnableArenas":
			out.Values[i] = ec._GoogleProtobufFileOptions_ccEnableArenas(ctx, field, obj)
		case "objcClassPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_objcClassPrefix(ctx, field, obj)
		case "csharpNamespace":
			out.Values[i] = ec._GoogleProtobufFileOptions_csharpNamespace(ctx, field, obj)
		case "swiftPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_swiftPrefix(ctx, field, obj)
		case "phpClassPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpClassPrefix(ctx, field, obj)
		case "phpNamespace":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpNamespace(ctx, field, obj)
		case "phpMetadataNamespace":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpMetadataNamespace(ctx, field, obj)
		case "rubyPackage":
			out.Values[i] = ec._GoogleProtobufFileOptions_rubyPackage(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufFileOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaPackage(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaPackage, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaOuterClassname(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaOuterClassname, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaMultipleFiles(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaMultipleFiles, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaGenerateEqualsAndHash(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaGenerateEqualsAndHash, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaStringCheckUtf8(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaStringCheckUtf8, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_optimizeFor(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GoogleProtobufFileOptions().OptimizeFor(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*int32)
		if res == nil {
			return graphql.Null
		}
		return models.MarshalEnum(*res)
	})
}

func (ec *executionContext) _GoogleProtobufFileOptions_goPackage(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.GoPackage, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_ccGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CcGenericServices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaGenericServices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_pyGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PyGenericServices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_phpGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PhpGenericServices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_ccEnableArenas(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CcEnableArenas, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_objcClassPrefix(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ObjcClassPrefix, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_csharpNamespace(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CsharpNamespace, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_swiftPrefix(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SwiftPrefix, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_phpClassPrefix(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PhpClassPrefix, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_phpNamespace(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PhpNamespace, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_phpMetadataNamespace(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GoogleProtobufFileOptions().PhpMetadataNamespace(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _GoogleProtobufFileOptions_rubyPackage(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GoogleProtobufFileOptions().RubyPackage(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		return graphql.MarshalString(res)
	})
}

func (ec *executionContext) _GoogleProtobufFileOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufGeneratedCodeInfoImplementors = []string{"GoogleProtobufGeneratedCodeInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfo(ctx context.Context, sel ast.SelectionSet, obj *descriptor.GeneratedCodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufGeneratedCodeInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufGeneratedCodeInfo")
		case "annotation":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfo_annotation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufGeneratedCodeInfo_annotation(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufGeneratedCodeInfo"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Annotation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.GeneratedCodeInfo_Annotation)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufGeneratedCodeInfoAnnotation(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufGeneratedCodeInfoAnnotationImplementors = []string{"GoogleProtobufGeneratedCodeInfoAnnotation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation(ctx context.Context, sel ast.SelectionSet, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufGeneratedCodeInfoAnnotationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufGeneratedCodeInfoAnnotation")
		case "path":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_path(ctx, field, obj)
		case "sourceFile":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_sourceFile(ctx, field, obj)
		case "begin":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_begin(ctx, field, obj)
		case "end":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_end(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_path(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufGeneratedCodeInfoAnnotation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Path, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return models.MarshalInt32(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_sourceFile(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufGeneratedCodeInfoAnnotation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SourceFile, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_begin(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufGeneratedCodeInfoAnnotation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Begin, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufGeneratedCodeInfoAnnotation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.End, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

var googleProtobufMessageOptionsImplementors = []string{"GoogleProtobufMessageOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMessageOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.MessageOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMessageOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMessageOptions")
		case "messageSetWireFormat":
			out.Values[i] = ec._GoogleProtobufMessageOptions_messageSetWireFormat(ctx, field, obj)
		case "noStandardDescriptorAccessor":
			out.Values[i] = ec._GoogleProtobufMessageOptions_noStandardDescriptorAccessor(ctx, field, obj)
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufMessageOptions_deprecated(ctx, field, obj)
		case "mapEntry":
			out.Values[i] = ec._GoogleProtobufMessageOptions_mapEntry(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufMessageOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufMessageOptions_messageSetWireFormat(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMessageOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MessageSetWireFormat, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufMessageOptions_noStandardDescriptorAccessor(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMessageOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.NoStandardDescriptorAccessor, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufMessageOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMessageOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufMessageOptions_mapEntry(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMessageOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MapEntry, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufMessageOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMessageOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufMethodDescriptorProtoImplementors = []string{"GoogleProtobufMethodDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMethodDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMethodDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_name(ctx, field, obj)
		case "inputType":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_inputType(ctx, field, obj)
		case "outputType":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_outputType(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_options(ctx, field, obj)
		case "clientStreaming":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_clientStreaming(ctx, field, obj)
		case "serverStreaming":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_serverStreaming(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_inputType(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.InputType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_outputType(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OutputType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.MethodOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufMethodOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_clientStreaming(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ClientStreaming, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_serverStreaming(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ServerStreaming, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

var googleProtobufMethodOptionsImplementors = []string{"GoogleProtobufMethodOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMethodOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.MethodOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMethodOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMethodOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufMethodOptions_deprecated(ctx, field, obj)
		case "idempotencyLevel":
			out.Values[i] = ec._GoogleProtobufMethodOptions_idempotencyLevel(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufMethodOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufMethodOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufMethodOptions_idempotencyLevel(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodOptions) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "GoogleProtobufMethodOptions",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.GoogleProtobufMethodOptions().IdempotencyLevel(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*int32)
		if res == nil {
			return graphql.Null
		}
		return models.MarshalEnum(*res)
	})
}

func (ec *executionContext) _GoogleProtobufMethodOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufOneofDescriptorProtoImplementors = []string{"GoogleProtobufOneofDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufOneofDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.OneofDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufOneofDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufOneofDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufOneofDescriptorProto_name(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufOneofDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufOneofDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.OneofDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufOneofDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufOneofDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.OneofDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufOneofDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.OneofOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufOneofOptions(ctx, field.Selections, res)
}

var googleProtobufOneofOptionsImplementors = []string{"GoogleProtobufOneofOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufOneofOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.OneofOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufOneofOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufOneofOptions")
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufOneofOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufOneofOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.OneofOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufOneofOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufServiceDescriptorProtoImplementors = []string{"GoogleProtobufServiceDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufServiceDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufServiceDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufServiceDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_name(ctx, field, obj)
		case "method":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_method(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufServiceDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_method(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufServiceDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Method, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.MethodDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufMethodDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufServiceDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.ServiceOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufServiceOptions(ctx, field.Selections, res)
}

var googleProtobufServiceOptionsImplementors = []string{"GoogleProtobufServiceOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufServiceOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.ServiceOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufServiceOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufServiceOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufServiceOptions_deprecated(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufServiceOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufServiceOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufServiceOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

func (ec *executionContext) _GoogleProtobufServiceOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufServiceOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufSourceCodeInfoImplementors = []string{"GoogleProtobufSourceCodeInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufSourceCodeInfo(ctx context.Context, sel ast.SelectionSet, obj *descriptor.SourceCodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufSourceCodeInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufSourceCodeInfo")
		case "location":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfo_location(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfo_location(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfo"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Location, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.SourceCodeInfo_Location)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufSourceCodeInfoLocation(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufSourceCodeInfoLocationImplementors = []string{"GoogleProtobufSourceCodeInfoLocation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation(ctx context.Context, sel ast.SelectionSet, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufSourceCodeInfoLocationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufSourceCodeInfoLocation")
		case "path":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_path(ctx, field, obj)
		case "span":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_span(ctx, field, obj)
		case "leadingComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_leadingComments(ctx, field, obj)
		case "trailingComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_trailingComments(ctx, field, obj)
		case "leadingDetachedComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_leadingDetachedComments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_path(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfoLocation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Path, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return models.MarshalInt32(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_span(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfoLocation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Span, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return models.MarshalInt32(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_leadingComments(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfoLocation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeadingComments, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_trailingComments(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfoLocation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TrailingComments, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_leadingDetachedComments(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfoLocation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeadingDetachedComments, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

var googleProtobufUninterpretedOptionImplementors = []string{"GoogleProtobufUninterpretedOption"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufUninterpretedOption(ctx context.Context, sel ast.SelectionSet, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufUninterpretedOptionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufUninterpretedOption")
		case "name":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_name(ctx, field, obj)
		case "identifierValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_identifierValue(ctx, field, obj)
		case "positiveIntValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_positiveIntValue(ctx, field, obj)
		case "negativeIntValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_negativeIntValue(ctx, field, obj)
		case "doubleValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_doubleValue(ctx, field, obj)
		case "stringValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_stringValue(ctx, field, obj)
		case "aggregateValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_aggregateValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption_NamePart)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOptionNamePart(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_identifierValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IdentifierValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_positiveIntValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PositiveIntValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint64)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalUint64(*res)
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_negativeIntValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.NegativeIntValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalInt64(*res)
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_doubleValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DoubleValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalDouble(*res)
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_stringValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.StringValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return models.MarshalByte(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_aggregateValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AggregateValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var googleProtobufUninterpretedOptionNamePartImplementors = []string{"GoogleProtobufUninterpretedOptionNamePart"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart(ctx context.Context, sel ast.SelectionSet, obj *descriptor.UninterpretedOption_NamePart) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufUninterpretedOptionNamePartImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufUninterpretedOptionNamePart")
		case "namePart":
			out.Values[i] = ec._GoogleProtobufUninterpretedOptionNamePart_namePart(ctx, field, obj)
		case "isExtension":
			out.Values[i] = ec._GoogleProtobufUninterpretedOptionNamePart_isExtension(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart_namePart(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption_NamePart) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOptionNamePart"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.NamePart, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart_isExtension(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption_NamePart) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOptionNamePart"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsExtension, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "ContactRequest":
			out.Values[i] = ec._Mutation_ContactRequest(ctx, field)
		case "ContactAcceptRequest":
			out.Values[i] = ec._Mutation_ContactAcceptRequest(ctx, field)
		case "ContactRemove":
			out.Values[i] = ec._Mutation_ContactRemove(ctx, field)
		case "ContactUpdate":
			out.Values[i] = ec._Mutation_ContactUpdate(ctx, field)
		case "ConversationCreate":
			out.Values[i] = ec._Mutation_ConversationCreate(ctx, field)
		case "ConversationInvite":
			out.Values[i] = ec._Mutation_ConversationInvite(ctx, field)
		case "ConversationExclude":
			out.Values[i] = ec._Mutation_ConversationExclude(ctx, field)
		case "ConversationAddMessage":
			out.Values[i] = ec._Mutation_ConversationAddMessage(ctx, field)
		case "GenerateFakeData":
			out.Values[i] = ec._Mutation_GenerateFakeData(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Mutation_ContactRequest(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *entity.Contact
	if tmp, ok := rawArgs["contact"]; ok {
		var err error
		var ptr1 entity.Contact
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityContactInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["contact"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["introText"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["introText"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ContactRequest(ctx, args["contact"].(*entity.Contact), args["introText"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContactPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ContactAcceptRequest(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["deletedAt"] = arg3
	var arg4 []byte
	if tmp, ok := rawArgs["sigchain"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg4 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg4[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["sigchain"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["status"] = arg5
	var arg6 []*entity.Device
	if tmp, ok := rawArgs["devices"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg6 = make([]*entity.Device, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Device
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
				arg6[idx1] = &ptr2
			}
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["devices"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["displayName"]; ok {
		var err error
		arg7, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["displayName"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["displayStatus"]; ok {
		var err error
		arg8, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["displayStatus"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["overrideDisplayName"]; ok {
		var err error
		arg9, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["overrideDisplayName"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["overrideDisplayStatus"]; ok {
		var err error
		arg10, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["overrideDisplayStatus"] = arg10
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ContactAcceptRequest(ctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContactPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ContactRemove(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["deletedAt"] = arg3
	var arg4 []byte
	if tmp, ok := rawArgs["sigchain"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg4 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg4[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["sigchain"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["status"] = arg5
	var arg6 []*entity.Device
	if tmp, ok := rawArgs["devices"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg6 = make([]*entity.Device, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Device
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
				arg6[idx1] = &ptr2
			}
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["devices"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["displayName"]; ok {
		var err error
		arg7, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["displayName"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["displayStatus"]; ok {
		var err error
		arg8, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["displayStatus"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["overrideDisplayName"]; ok {
		var err error
		arg9, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["overrideDisplayName"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["overrideDisplayStatus"]; ok {
		var err error
		arg10, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["overrideDisplayStatus"] = arg10
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ContactRemove(ctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContactPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ContactUpdate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["deletedAt"] = arg3
	var arg4 []byte
	if tmp, ok := rawArgs["sigchain"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg4 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg4[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["sigchain"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["status"] = arg5
	var arg6 []*entity.Device
	if tmp, ok := rawArgs["devices"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg6 = make([]*entity.Device, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Device
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
				arg6[idx1] = &ptr2
			}
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["devices"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["displayName"]; ok {
		var err error
		arg7, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["displayName"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["displayStatus"]; ok {
		var err error
		arg8, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["displayStatus"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["overrideDisplayName"]; ok {
		var err error
		arg9, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["overrideDisplayName"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["overrideDisplayStatus"]; ok {
		var err error
		arg10, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["overrideDisplayStatus"] = arg10
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ContactUpdate(ctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContactPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ConversationCreate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 []*entity.Contact
	if tmp, ok := rawArgs["contacts"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg0 = make([]*entity.Contact, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Contact
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityContactInput(rawIf1[idx1])
				arg0[idx1] = &ptr2
			}
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["contacts"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["title"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["title"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["topic"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["topic"] = arg2
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ConversationCreate(ctx, args["contacts"].([]*entity.Contact), args["title"].(string), args["topic"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityConversationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ConversationInvite(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["conversation"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["conversation"] = arg0
	var arg1 []*entity.ConversationMember
	if tmp, ok := rawArgs["members"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg1 = make([]*entity.ConversationMember, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.ConversationMember
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
				arg1[idx1] = &ptr2
			}
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["members"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ConversationInvite(ctx, args["conversation"].(*entity.Conversation), args["members"].([]*entity.ConversationMember))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityConversationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ConversationExclude(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["conversation"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["conversation"] = arg0
	var arg1 []*entity.ConversationMember
	if tmp, ok := rawArgs["members"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg1 = make([]*entity.ConversationMember, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.ConversationMember
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
				arg1[idx1] = &ptr2
			}
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["members"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ConversationExclude(ctx, args["conversation"].(*entity.Conversation), args["members"].([]*entity.ConversationMember))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityConversationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ConversationAddMessage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["conversation"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["conversation"] = arg0
	var arg1 *entity.Message
	if tmp, ok := rawArgs["message"]; ok {
		var err error
		var ptr1 entity.Message
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityMessageInput(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["message"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ConversationAddMessage(ctx, args["conversation"].(*entity.Conversation), args["message"].(*entity.Message))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*p2p.Event)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyP2pEventPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_GenerateFakeData(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["T"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().GenerateFakeData(ctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyNodeVoidPayload(ctx, field.Selections, res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "Node":
			out.Values[i] = ec._Query_Node(ctx, field)
		case "EventList":
			out.Values[i] = ec._Query_EventList(ctx, field)
		case "GetEvent":
			out.Values[i] = ec._Query_GetEvent(ctx, field)
		case "ContactList":
			out.Values[i] = ec._Query_ContactList(ctx, field)
		case "GetContact":
			out.Values[i] = ec._Query_GetContact(ctx, field)
		case "ConversationList":
			out.Values[i] = ec._Query_ConversationList(ctx, field)
		case "GetConversation":
			out.Values[i] = ec._Query_GetConversation(ctx, field)
		case "GetConversationMember":
			out.Values[i] = ec._Query_GetConversationMember(ctx, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Query_Node(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().Node(ctx, args["id"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(models.Node)
		return ec._Node(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_EventList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 uint32
	if tmp, ok := rawArgs["limit"]; ok {
		var err error
		arg0, err = models.UnmarshalUint32(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["limit"] = arg0
	var arg1 *p2p.Event
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 p2p.Event
		if tmp != nil {
			ptr1, err = UnmarshalBertyP2pEventInput(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["filter"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().EventList(ctx, args["limit"].(uint32), args["filter"].(*p2p.Event))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*p2p.Event)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				if res[idx1] == nil {
					return graphql.Null
				}
				return ec._BertyP2pEventPayload(ctx, field.Selections, res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_GetEvent(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["senderId"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["senderId"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["createdAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["updatedAt"] = arg3
	var arg4 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["deletedAt"] = arg4
	var arg5 *time.Time
	if tmp, ok := rawArgs["sentAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["sentAt"] = arg5
	var arg6 *time.Time
	if tmp, ok := rawArgs["receivedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["receivedAt"] = arg6
	var arg7 *time.Time
	if tmp, ok := rawArgs["ackedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg7 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["ackedAt"] = arg7
	var arg8 *int32
	if tmp, ok := rawArgs["direction"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg8 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["direction"] = arg8
	var arg9 uint32
	if tmp, ok := rawArgs["senderApiVersion"]; ok {
		var err error
		arg9, err = models.UnmarshalUint32(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["senderApiVersion"] = arg9
	var arg10 uint32
	if tmp, ok := rawArgs["receiverApiVersion"]; ok {
		var err error
		arg10, err = models.UnmarshalUint32(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["receiverApiVersion"] = arg10
	var arg11 string
	if tmp, ok := rawArgs["receiverId"]; ok {
		var err error
		arg11, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["receiverId"] = arg11
	var arg12 *int32
	if tmp, ok := rawArgs["kind"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg12 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["kind"] = arg12
	var arg13 []byte
	if tmp, ok := rawArgs["attributes"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg13 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg13[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["attributes"] = arg13
	var arg14 string
	if tmp, ok := rawArgs["conversationId"]; ok {
		var err error
		arg14, err = models.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["conversationId"] = arg14
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetEvent(ctx, args["id"].(string), args["senderId"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sentAt"].(*time.Time), args["receivedAt"].(*time.Time), args["ackedAt"].(*time.Time), args["direction"].(*int32), args["senderApiVersion"].(uint32), args["receiverApiVersion"].(uint32), args["receiverId"].(string), args["kind"].(*int32), args["attributes"].([]byte), args["conversationId"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*p2p.Event)
		if res == nil {
			return graphql.Null
		}
		return ec._BertyP2pEventPayload(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_ContactList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *entity.Contact
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 entity.Contact
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityContactInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["filter"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().ContactList(ctx, args["filter"].(*entity.Contact))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*entity.Contact)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				if res[idx1] == nil {
					return graphql.Null
				}
				return ec._BertyEntityContactPayload(ctx, field.Selections, res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_GetContact(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["deletedAt"] = arg3
	var arg4 []byte
	if tmp, ok := rawArgs["sigchain"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg4 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg4[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["sigchain"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["status"] = arg5
	var arg6 []*entity.Device
	if tmp, ok := rawArgs["devices"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg6 = make([]*entity.Device, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Device
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
				arg6[idx1] = &ptr2
			}
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["devices"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["displayName"]; ok {
		var err error
		arg7, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["displayName"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["displayStatus"]; ok {
		var err error
		arg8, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["displayStatus"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["overrideDisplayName"]; ok {
		var err error
		arg9, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["overrideDisplayName"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["overrideDisplayStatus"]; ok {
		var err error
		arg10, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["overrideDisplayStatus"] = arg10
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetContact(ctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*entity.Contact)
		if res == nil {
			return graphql.Null
		}
		return ec._BertyEntityContactPayload(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_ConversationList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["filter"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().ConversationList(ctx, args["filter"].(*entity.Conversation))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*entity.Conversation)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				if res[idx1] == nil {
					return graphql.Null
				}
				return ec._BertyEntityConversationPayload(ctx, field.Selections, res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_GetConversation(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["deletedAt"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["title"]; ok {
		var err error
		arg4, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["title"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["topic"]; ok {
		var err error
		arg5, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["topic"] = arg5
	var arg6 []*entity.ConversationMember
	if tmp, ok := rawArgs["members"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg6 = make([]*entity.ConversationMember, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.ConversationMember
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
				arg6[idx1] = &ptr2
			}
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["members"] = arg6
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetConversation(ctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["title"].(string), args["topic"].(string), args["members"].([]*entity.ConversationMember))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*entity.Conversation)
		if res == nil {
			return graphql.Null
		}
		return ec._BertyEntityConversationPayload(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_GetConversationMember(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["deletedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["deletedAt"] = arg3
	var arg4 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["status"] = arg4
	var arg5 *entity.Contact
	if tmp, ok := rawArgs["contact"]; ok {
		var err error
		var ptr1 entity.Contact
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityContactInput(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["contact"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["conversationId"]; ok {
		var err error
		arg6, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["conversationId"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["contactId"]; ok {
		var err error
		arg7, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["contactId"] = arg7
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetConversationMember(ctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deletedAt"].(*time.Time), args["status"].(*int32), args["contact"].(*entity.Contact), args["conversationId"].(string), args["contactId"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*entity.ConversationMember)
		if res == nil {
			return graphql.Null
		}
		return ec._BertyEntityConversationMemberPayload(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.introspectType(args["name"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.introspectSchema(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	if res == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, field.Selections, res)
}

var subscriptionImplementors = []string{"Subscription"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, subscriptionImplementors)
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "EventStream":
		return ec._Subscription_EventStream(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

func (ec *executionContext) _Subscription_EventStream(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *p2p.Event
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 p2p.Event
		if tmp != nil {
			ptr1, err = UnmarshalBertyP2pEventInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return nil
		}
	}
	args["filter"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{Field: field})
	results, err := ec.resolvers.Subscription().EventStream(ctx, args["filter"].(*p2p.Event))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}
			return ec._BertyP2pEventPayload(ctx, field.Selections, res)
		}())
		return &out
	}
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Locations, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Types(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Directives(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Directive(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Kind(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Field(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___EnumValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj *models.Node) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case entity.Device:
		return ec._BertyEntityDevice(ctx, sel, &obj)
	case *entity.Device:
		return ec._BertyEntityDevice(ctx, sel, obj)
	case entity.Contact:
		return ec._BertyEntityContact(ctx, sel, &obj)
	case *entity.Contact:
		return ec._BertyEntityContact(ctx, sel, obj)
	case entity.Conversation:
		return ec._BertyEntityConversation(ctx, sel, &obj)
	case *entity.Conversation:
		return ec._BertyEntityConversation(ctx, sel, obj)
	case entity.ConversationMember:
		return ec._BertyEntityConversationMember(ctx, sel, &obj)
	case *entity.ConversationMember:
		return ec._BertyEntityConversationMember(ctx, sel, obj)
	case p2p.Event:
		return ec._BertyP2pEvent(ctx, sel, &obj)
	case *p2p.Event:
		return ec._BertyP2pEvent(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func UnmarshalBertyEntityContactInput(v interface{}) (entity.Contact, error) {
	var it entity.Contact
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.DeletedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "sigchain":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Sigchain = make([]byte, len(rawIf1))
			for idx1 := range rawIf1 {
				it.Sigchain[idx1], err = models.UnmarshalByte(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Status = entity.Contact_Status(castTmp)
			if err != nil {
				return it, err
			}
		case "devices":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Devices = make([]*entity.Device, len(rawIf1))
			for idx1 := range rawIf1 {
				var ptr2 entity.Device
				if rawIf1[idx1] != nil {
					ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
					it.Devices[idx1] = &ptr2
				}
			}
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error
			it.DisplayName, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "displayStatus":
			var err error
			it.DisplayStatus, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "overrideDisplayName":
			var err error
			it.OverrideDisplayName, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "overrideDisplayStatus":
			var err error
			it.OverrideDisplayStatus, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityConversationInput(v interface{}) (entity.Conversation, error) {
	var it entity.Conversation
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.DeletedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "topic":
			var err error
			it.Topic, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "members":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Members = make([]*entity.ConversationMember, len(rawIf1))
			for idx1 := range rawIf1 {
				var ptr2 entity.ConversationMember
				if rawIf1[idx1] != nil {
					ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
					it.Members[idx1] = &ptr2
				}
			}
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityConversationMemberInput(v interface{}) (entity.ConversationMember, error) {
	var it entity.ConversationMember
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.DeletedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "status":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Status = entity.ConversationMember_Status(castTmp)
			if err != nil {
				return it, err
			}
		case "contact":
			var err error
			var ptr1 entity.Contact
			if v != nil {
				ptr1, err = UnmarshalBertyEntityContactInput(v)
				it.Contact = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "conversationId":
			var err error
			it.ConversationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "contactId":
			var err error
			it.ContactID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityDeviceInput(v interface{}) (entity.Device, error) {
	var it entity.Device
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.DeletedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Status = entity.Device_Status(castTmp)
			if err != nil {
				return it, err
			}
		case "apiVersion":
			var err error
			it.ApiVersion, err = models.UnmarshalUint32(v)
			if err != nil {
				return it, err
			}
		case "contactId":
			var err error
			it.ContactID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityMessageInput(v interface{}) (entity.Message, error) {
	var it entity.Message
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "text":
			var err error
			it.Text, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyP2pEventInput(v interface{}) (p2p.Event, error) {
	var it p2p.Event
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "senderId":
			var err error
			it.SenderID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.DeletedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "sentAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.SentAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "receivedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.ReceivedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "ackedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.AckedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Direction = p2p.Event_Direction(castTmp)
			if err != nil {
				return it, err
			}
		case "senderApiVersion":
			var err error
			it.SenderAPIVersion, err = models.UnmarshalUint32(v)
			if err != nil {
				return it, err
			}
		case "receiverApiVersion":
			var err error
			it.ReceiverAPIVersion, err = models.UnmarshalUint32(v)
			if err != nil {
				return it, err
			}
		case "receiverId":
			var err error
			it.ReceiverID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "kind":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Kind = p2p.Kind(castTmp)
			if err != nil {
				return it, err
			}
		case "attributes":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Attributes = make([]byte, len(rawIf1))
			for idx1 := range rawIf1 {
				it.Attributes[idx1], err = models.UnmarshalByte(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "conversationId":
			var err error
			it.ConversationID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, next graphql.Resolver) interface{} {
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name])
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "service.gen.graphql", Input: `# GENERATED CODE -- DO NOT EDIT!

scalar Enum
scalar Double
scalar Int64
scalar Uint64
scalar Int32
scalar Byte
scalar Fixed64
scalar Fixed32
scalar Bool
scalar Uint32
scalar SFixed64
scalar SFixed32
scalar SInt32
scalar SInt64
scalar GoogleProtobufTimestamp
scalar GoogleProtobufTimestampInput
scalar GoogleProtobufTimestampPayload

interface Node {
  id: ID!
}

type GoogleProtobufFileDescriptorSet  {
    file: [GoogleProtobufFileDescriptorProto]
}
type GoogleProtobufFileDescriptorProto  {
      name: String!
      package: String!
      dependency: [String!]
      publicDependency: [Int32!]
      weakDependency: [Int32!]
    messageType: [GoogleProtobufDescriptorProto]
    enumType: [GoogleProtobufEnumDescriptorProto]
    service: [GoogleProtobufServiceDescriptorProto]
    extension: [GoogleProtobufFieldDescriptorProto]
    options: GoogleProtobufFileOptions
    sourceCodeInfo: GoogleProtobufSourceCodeInfo
      syntax: String!
}
    
type GoogleProtobufDescriptorProtoExtensionRange  {
      start: Int32!
      end: Int32!
    options: GoogleProtobufExtensionRangeOptions
}
type GoogleProtobufDescriptorProtoReservedRange  {
      start: Int32!
      end: Int32!
}
type GoogleProtobufDescriptorProto  {
      name: String!
    field: [GoogleProtobufFieldDescriptorProto]
    extension: [GoogleProtobufFieldDescriptorProto]
    nestedType: [GoogleProtobufDescriptorProto]
    enumType: [GoogleProtobufEnumDescriptorProto]
    extensionRange: [GoogleProtobufDescriptorProtoExtensionRange]
    oneofDecl: [GoogleProtobufOneofDescriptorProto]
    options: GoogleProtobufMessageOptions
    reservedRange: [GoogleProtobufDescriptorProtoReservedRange]
      reservedName: [String!]
}
type GoogleProtobufExtensionRangeOptions  {
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
      
      
type GoogleProtobufFieldDescriptorProto  {
      name: String!
      number: Int32!
    label: Enum
    type: Enum
      typeName: String!
      extendee: String!
      defaultValue: String!
      oneofIndex: Int32!
      jsonName: String!
    options: GoogleProtobufFieldOptions
}
type GoogleProtobufOneofDescriptorProto  {
      name: String!
    options: GoogleProtobufOneofOptions
}
    
type GoogleProtobufEnumDescriptorProtoEnumReservedRange  {
      start: Int32!
      end: Int32!
}
type GoogleProtobufEnumDescriptorProto  {
      name: String!
    value: [GoogleProtobufEnumValueDescriptorProto]
    options: GoogleProtobufEnumOptions
    reservedRange: [GoogleProtobufEnumDescriptorProtoEnumReservedRange]
      reservedName: [String!]
}
type GoogleProtobufEnumValueDescriptorProto  {
      name: String!
      number: Int32!
    options: GoogleProtobufEnumValueOptions
}
type GoogleProtobufServiceDescriptorProto  {
      name: String!
    method: [GoogleProtobufMethodDescriptorProto]
    options: GoogleProtobufServiceOptions
}
type GoogleProtobufMethodDescriptorProto  {
      name: String!
      inputType: String!
      outputType: String!
    options: GoogleProtobufMethodOptions
      clientStreaming: Bool!
      serverStreaming: Bool!
}
      
type GoogleProtobufFileOptions  {
      javaPackage: String!
      javaOuterClassname: String!
      javaMultipleFiles: Bool!
      javaGenerateEqualsAndHash: Bool!
      javaStringCheckUtf8: Bool!
    optimizeFor: Enum
      goPackage: String!
      ccGenericServices: Bool!
      javaGenericServices: Bool!
      pyGenericServices: Bool!
      phpGenericServices: Bool!
      deprecated: Bool!
      ccEnableArenas: Bool!
      objcClassPrefix: String!
      csharpNamespace: String!
      swiftPrefix: String!
      phpClassPrefix: String!
      phpNamespace: String!
      phpMetadataNamespace: String!
      rubyPackage: String!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufMessageOptions  {
      messageSetWireFormat: Bool!
      noStandardDescriptorAccessor: Bool!
      deprecated: Bool!
      mapEntry: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
      
      
type GoogleProtobufFieldOptions  {
    ctype: Enum
      packed: Bool!
    jstype: Enum
      lazy: Bool!
      deprecated: Bool!
      weak: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufOneofOptions  {
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufEnumOptions  {
      allowAlias: Bool!
      deprecated: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufEnumValueOptions  {
      deprecated: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufServiceOptions  {
      deprecated: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
      
type GoogleProtobufMethodOptions  {
      deprecated: Bool!
    idempotencyLevel: Enum
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
    
type GoogleProtobufUninterpretedOptionNamePart  {
      namePart: String!
      isExtension: Bool!
}
type GoogleProtobufUninterpretedOption  {
    name: [GoogleProtobufUninterpretedOptionNamePart]
      identifierValue: String!
      positiveIntValue: Uint64!
      negativeIntValue: Int64!
      doubleValue: Double!
      stringValue: [Byte!],
      aggregateValue: String!
}
    
type GoogleProtobufSourceCodeInfoLocation  {
      path: [Int32!]
      span: [Int32!]
      leadingComments: String!
      trailingComments: String!
      leadingDetachedComments: [String!]
}
type GoogleProtobufSourceCodeInfo  {
    location: [GoogleProtobufSourceCodeInfoLocation]
}
    
type GoogleProtobufGeneratedCodeInfoAnnotation  {
      path: [Int32!]
      sourceFile: String!
      begin: Int32!
      end: Int32!
}
type GoogleProtobufGeneratedCodeInfo  {
    annotation: [GoogleProtobufGeneratedCodeInfoAnnotation]
}
  
  
  

  
  
  

  
  
  

  
  
  

      
type BertyEntityDevice implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
      name: String!
    status: Enum
      apiVersion: Uint32!
      contactId: String!
}
  
  
  

      
type BertyEntityContact implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDevice]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
}
  
  
  

type BertyEntityConversation implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
      title: String!
      topic: String!
    members: [BertyEntityConversationMember]
}
      
type BertyEntityConversationMember implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
    status: Enum
    contact: BertyEntityContact
      conversationId: String!
      contactId: String!
}
  
  
  

type BertyEntityMessage  {
      text: String!
}
  
  
  

      
type BertyEntitySenderAlias  {
      id: String!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
    status: Enum
      originDeviceId: String!
      contactId: String!
      conversationId: String!
      aliasIdentifier: String!
      used: Bool!
}
  
  
  

  
type BertyP2pSentAttrs  {
      ids: [String!]
}
type BertyP2pAckAttrs  {
      ids: [String!]
      ErrMsg: String!
}
type BertyP2pPingAttrs  {
      T: Bool!
}
type BertyP2pContactRequestAttrs  {
    me: BertyEntityContact
      introText: String!
}
type BertyP2pContactRequestAcceptedAttrs  {
      T: Bool!
}
type BertyP2pContactShareMeAttrs  {
    me: BertyEntityContact
}
type BertyP2pContactShareAttrs  {
    contact: BertyEntityContact
}
type BertyP2pConversationInviteAttrs  {
    conversation: BertyEntityConversation
}
type BertyP2pConversationNewMessageAttrs  {
    message: BertyEntityMessage
}
type BertyP2pDevtoolsMapsetAttrs  {
      key: String!
      val: String!
}
type BertyP2pSenderAliasUpdateAttrs  {
    aliases: [BertyEntitySenderAlias]
}
  
  
  

      
type BertyP2pEvent implements Node {
    id: ID!
      senderId: String!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
    sentAt: GoogleProtobufTimestamp
    receivedAt: GoogleProtobufTimestamp
    ackedAt: GoogleProtobufTimestamp
    direction: Enum
      senderApiVersion: Uint32!
      receiverApiVersion: Uint32!
      receiverId: String!
    kind: Enum
      attributes: [Byte!],
    conversationId: ID!
}
  
  
  

type BertyNodePingDestination  {
      destination: String!
}
type BertyNodeVoid  {
      T: Bool!
}
input BertyP2pEventInput {
    id: ID!
      senderId: String!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
    sentAt: GoogleProtobufTimestampInput
    receivedAt: GoogleProtobufTimestampInput
    ackedAt: GoogleProtobufTimestampInput
    direction: Enum
      senderApiVersion: Uint32!
      receiverApiVersion: Uint32!
      receiverId: String!
    kind: Enum
      attributes: [Byte!],
    conversationId: ID!
}
type BertyP2pEventPayload {
    id: ID!
      senderId: String!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
    sentAt: GoogleProtobufTimestamp
    receivedAt: GoogleProtobufTimestamp
    ackedAt: GoogleProtobufTimestamp
    direction: Enum
      senderApiVersion: Uint32!
      receiverApiVersion: Uint32!
      receiverId: String!
    kind: Enum
      attributes: [Byte!],
    conversationId: ID!
}
input BertyEntityDeviceInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      name: String!
    status: Enum
      apiVersion: Uint32!
      contactId: String!
}
input BertyEntityContactInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDeviceInput]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
}
type BertyEntityContactPayload {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDevice]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
}
type BertyEntityConversationPayload {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
      title: String!
      topic: String!
    members: [BertyEntityConversationMember]
}
input BertyEntityConversationMemberInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
    status: Enum
    contact: BertyEntityContactInput
      conversationId: String!
      contactId: String!
}
input BertyEntityConversationInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      title: String!
      topic: String!
    members: [BertyEntityConversationMemberInput]
}
input BertyEntityMessageInput {
      text: String!
}
type BertyEntityConversationMemberPayload {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deletedAt: GoogleProtobufTimestamp
    status: Enum
    contact: BertyEntityContact
      conversationId: String!
      contactId: String!
}
type BertyNodeVoidPayload {
      T: Bool!
}
  
type Query {
  Node(id: ID!): Node
  EventList(
      limit: Uint32!
    filter: BertyP2pEventInput
  ): [BertyP2pEventPayload]
  GetEvent(
    id: ID!
      senderId: String!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
    sentAt: GoogleProtobufTimestampInput
    receivedAt: GoogleProtobufTimestampInput
    ackedAt: GoogleProtobufTimestampInput
    direction: Enum
      senderApiVersion: Uint32!
      receiverApiVersion: Uint32!
      receiverId: String!
    kind: Enum
      attributes: [Byte!],
    conversationId: ID!
  ): BertyP2pEventPayload
  ContactList(
    filter: BertyEntityContactInput
  ): [BertyEntityContactPayload]
  GetContact(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDeviceInput]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
  ): BertyEntityContactPayload
  ConversationList(
    filter: BertyEntityConversationInput
  ): [BertyEntityConversationPayload]
  GetConversation(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      title: String!
      topic: String!
    members: [BertyEntityConversationMemberInput]
  ): BertyEntityConversationPayload
  GetConversationMember(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
    status: Enum
    contact: BertyEntityContactInput
      conversationId: String!
      contactId: String!
  ): BertyEntityConversationMemberPayload
}
  
type Mutation {
  ContactRequest(
    contact: BertyEntityContactInput
      introText: String!
  ): BertyEntityContactPayload
  ContactAcceptRequest(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDeviceInput]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
  ): BertyEntityContactPayload
  ContactRemove(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDeviceInput]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
  ): BertyEntityContactPayload
  ContactUpdate(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deletedAt: GoogleProtobufTimestampInput
      sigchain: [Byte!],
    status: Enum
    devices: [BertyEntityDeviceInput]
      displayName: String!
      displayStatus: String!
      overrideDisplayName: String!
      overrideDisplayStatus: String!
  ): BertyEntityContactPayload
  ConversationCreate(
    contacts: [BertyEntityContactInput]
      title: String!
      topic: String!
  ): BertyEntityConversationPayload
  ConversationInvite(
    conversation: BertyEntityConversationInput
    members: [BertyEntityConversationMemberInput]
  ): BertyEntityConversationPayload
  ConversationExclude(
    conversation: BertyEntityConversationInput
    members: [BertyEntityConversationMemberInput]
  ): BertyEntityConversationPayload
  ConversationAddMessage(
    conversation: BertyEntityConversationInput
    message: BertyEntityMessageInput
  ): BertyP2pEventPayload
  GenerateFakeData(
      T: Bool!
  ): BertyNodeVoidPayload
}
  
type Subscription {
  EventStream(
    filter: BertyP2pEventInput
  ): BertyP2pEventPayload
}
`},
)
