// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	context "context"
	fmt "fmt"
	strconv "strconv"

	model "berty.tech/core/api/node/graphql/model"
	scalar "berty.tech/core/api/node/graphql/scalar"
	graphql "github.com/99designs/gqlgen/graphql"
	introspection "github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser"
	ast "github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}
type MutationResolver interface {
	ContactRequest(ctx context.Context, input model.ContactRequestInput) (*model.ContactRequestPayload, error)
	ContactRemove(ctx context.Context, input model.ContactRemoveInput) (*model.ContactRemovePayload, error)
	ContactUpdate(ctx context.Context, input model.ContactUpdateInput) (*model.ContactUpdatePayload, error)
	ConversationCreate(ctx context.Context, input model.ConversationCreateInput) (*model.ConversationCreatePayload, error)
	ConversationInvite(ctx context.Context, input model.ConversationInviteInput) (*model.ConversationInvitePayload, error)
	ConversationExclude(ctx context.Context, input model.ConversationExcludeInput) (*model.ConversationExcludePayload, error)
	ConversationAddMessage(ctx context.Context, input model.ConversationAddMessageInput) (*model.ConversationAddMessagePayload, error)
	GenerateFakeData(ctx context.Context, input model.GenerateFakeDataInput) (*model.GenerateFakeDataPayload, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id string) (model.Node, error)
	EventList(ctx context.Context, limit *int) ([]*model.BertyP2pEvent, error)
	ContactList(ctx context.Context) ([]*model.BertyEntityContact, error)
	ConversationList(ctx context.Context) ([]*model.BertyEntityConversation, error)
}
type SubscriptionResolver interface {
	EventStream(ctx context.Context) (<-chan *model.BertyP2pEvent, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	next := ec._Subscription(ctx, op.SelectionSet)
	if ec.Errors != nil {
		return graphql.OneShot(&graphql.Response{Data: []byte("null"), Errors: ec.Errors})
	}

	var buf bytes.Buffer
	return func() *graphql.Response {
		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		return &graphql.Response{
			Data:   buf,
			Errors: ec.Errors,
		}
	}
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var bertyEntityContactImplementors = []string{"BertyEntityContact", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityContact(ctx context.Context, sel ast.SelectionSet, obj *model.BertyEntityContact) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityContactImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityContact")
		case "id":
			out.Values[i] = ec._BertyEntityContact_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntityContact_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityContact_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityContact_deletedAt(ctx, field, obj)
		case "sigchain":
			out.Values[i] = ec._BertyEntityContact_sigchain(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityContact_status(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._BertyEntityContact_devices(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._BertyEntityContact_displayName(ctx, field, obj)
		case "displayStatus":
			out.Values[i] = ec._BertyEntityContact_displayStatus(ctx, field, obj)
		case "overrideDisplayName":
			out.Values[i] = ec._BertyEntityContact_overrideDisplayName(ctx, field, obj)
		case "overrideDisplayStatus":
			out.Values[i] = ec._BertyEntityContact_overrideDisplayStatus(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityContact_id(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityContact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalID(res)
}

func (ec *executionContext) _BertyEntityContact_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityContact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityContact_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityContact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityContact_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityContact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityContact_sigchain(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityContact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Sigchain, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _BertyEntityContact_status(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityContact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityContactStatus)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityContact_devices(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityContact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Devices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BertyEntityDevice)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._BertyEntityDevice(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _BertyEntityContact_displayName(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityContact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DisplayName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _BertyEntityContact_displayStatus(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityContact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DisplayStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _BertyEntityContact_overrideDisplayName(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityContact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OverrideDisplayName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _BertyEntityContact_overrideDisplayStatus(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityContact) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityContact"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OverrideDisplayStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var bertyEntityConversationImplementors = []string{"BertyEntityConversation", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversation(ctx context.Context, sel ast.SelectionSet, obj *model.BertyEntityConversation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversation")
		case "id":
			out.Values[i] = ec._BertyEntityConversation_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversation_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversation_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityConversation_deletedAt(ctx, field, obj)
		case "title":
			out.Values[i] = ec._BertyEntityConversation_title(ctx, field, obj)
		case "topic":
			out.Values[i] = ec._BertyEntityConversation_topic(ctx, field, obj)
		case "members":
			out.Values[i] = ec._BertyEntityConversation_members(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityConversation_id(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalID(res)
}

func (ec *executionContext) _BertyEntityConversation_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityConversation_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityConversation_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityConversation_title(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Title, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _BertyEntityConversation_topic(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Topic, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _BertyEntityConversation_members(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Members, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BertyEntityConversationMember)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._BertyEntityConversationMember(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var bertyEntityConversationMemberImplementors = []string{"BertyEntityConversationMember", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationMember(ctx context.Context, sel ast.SelectionSet, obj *model.BertyEntityConversationMember) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationMemberImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationMember")
		case "id":
			out.Values[i] = ec._BertyEntityConversationMember_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversationMember_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversationMember_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityConversationMember_deletedAt(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityConversationMember_status(ctx, field, obj)
		case "contact":
			out.Values[i] = ec._BertyEntityConversationMember_contact(ctx, field, obj)
		case "conversationId":
			out.Values[i] = ec._BertyEntityConversationMember_conversationId(ctx, field, obj)
		case "contactId":
			out.Values[i] = ec._BertyEntityConversationMember_contactId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityConversationMember_id(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalID(res)
}

func (ec *executionContext) _BertyEntityConversationMember_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityConversationMember_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityConversationMember_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityConversationMember_status(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityConversationMemberStatus)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityConversationMember_contact(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityContact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

func (ec *executionContext) _BertyEntityConversationMember_conversationId(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ConversationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _BertyEntityConversationMember_contactId(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityConversationMember) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityConversationMember"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ContactID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var bertyEntityDeviceImplementors = []string{"BertyEntityDevice", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityDevice(ctx context.Context, sel ast.SelectionSet, obj *model.BertyEntityDevice) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityDeviceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityDevice")
		case "id":
			out.Values[i] = ec._BertyEntityDevice_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyEntityDevice_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityDevice_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyEntityDevice_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._BertyEntityDevice_name(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityDevice_status(ctx, field, obj)
		case "apiVersion":
			out.Values[i] = ec._BertyEntityDevice_apiVersion(ctx, field, obj)
		case "contactId":
			out.Values[i] = ec._BertyEntityDevice_contactId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityDevice_id(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityDevice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalID(res)
}

func (ec *executionContext) _BertyEntityDevice_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityDevice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityDevice_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityDevice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityDevice_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityDevice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityDevice_name(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityDevice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _BertyEntityDevice_status(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityDevice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityDeviceStatus)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyEntityDevice_apiVersion(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityDevice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.APIVersion, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _BertyEntityDevice_contactId(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityDevice) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityDevice"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ContactID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var bertyEntityMessageImplementors = []string{"BertyEntityMessage"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityMessage(ctx context.Context, sel ast.SelectionSet, obj *model.BertyEntityMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityMessageImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityMessage")
		case "text":
			out.Values[i] = ec._BertyEntityMessage_text(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyEntityMessage_text(ctx context.Context, field graphql.CollectedField, obj *model.BertyEntityMessage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyEntityMessage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Text, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var bertyNodeContactRequestInputImplementors = []string{"BertyNodeContactRequestInput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeContactRequestInput(ctx context.Context, sel ast.SelectionSet, obj *model.BertyNodeContactRequestInput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeContactRequestInputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeContactRequestInput")
		case "contact":
			out.Values[i] = ec._BertyNodeContactRequestInput_contact(ctx, field, obj)
		case "introText":
			out.Values[i] = ec._BertyNodeContactRequestInput_introText(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyNodeContactRequestInput_contact(ctx context.Context, field graphql.CollectedField, obj *model.BertyNodeContactRequestInput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeContactRequestInput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityContact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

func (ec *executionContext) _BertyNodeContactRequestInput_introText(ctx context.Context, field graphql.CollectedField, obj *model.BertyNodeContactRequestInput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeContactRequestInput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IntroText, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var bertyNodeConversationAddMessageInputImplementors = []string{"BertyNodeConversationAddMessageInput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeConversationAddMessageInput(ctx context.Context, sel ast.SelectionSet, obj *model.BertyNodeConversationAddMessageInput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeConversationAddMessageInputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeConversationAddMessageInput")
		case "conversation":
			out.Values[i] = ec._BertyNodeConversationAddMessageInput_conversation(ctx, field, obj)
		case "message":
			out.Values[i] = ec._BertyNodeConversationAddMessageInput_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyNodeConversationAddMessageInput_conversation(ctx context.Context, field graphql.CollectedField, obj *model.BertyNodeConversationAddMessageInput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeConversationAddMessageInput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Conversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityConversation)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

func (ec *executionContext) _BertyNodeConversationAddMessageInput_message(ctx context.Context, field graphql.CollectedField, obj *model.BertyNodeConversationAddMessageInput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeConversationAddMessageInput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Message, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityMessage)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityMessage(ctx, field.Selections, res)
}

var bertyNodeConversationManageMembersInputImplementors = []string{"BertyNodeConversationManageMembersInput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeConversationManageMembersInput(ctx context.Context, sel ast.SelectionSet, obj *model.BertyNodeConversationManageMembersInput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeConversationManageMembersInputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeConversationManageMembersInput")
		case "conversation":
			out.Values[i] = ec._BertyNodeConversationManageMembersInput_conversation(ctx, field, obj)
		case "members":
			out.Values[i] = ec._BertyNodeConversationManageMembersInput_members(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyNodeConversationManageMembersInput_conversation(ctx context.Context, field graphql.CollectedField, obj *model.BertyNodeConversationManageMembersInput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeConversationManageMembersInput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Conversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityConversation)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

func (ec *executionContext) _BertyNodeConversationManageMembersInput_members(ctx context.Context, field graphql.CollectedField, obj *model.BertyNodeConversationManageMembersInput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeConversationManageMembersInput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Members, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BertyEntityConversationMember)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._BertyEntityConversationMember(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var bertyNodeEventListInputImplementors = []string{"BertyNodeEventListInput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeEventListInput(ctx context.Context, sel ast.SelectionSet, obj *model.BertyNodeEventListInput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeEventListInputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeEventListInput")
		case "limit":
			out.Values[i] = ec._BertyNodeEventListInput_limit(ctx, field, obj)
		case "filter":
			out.Values[i] = ec._BertyNodeEventListInput_filter(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyNodeEventListInput_limit(ctx context.Context, field graphql.CollectedField, obj *model.BertyNodeEventListInput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeEventListInput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Limit, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _BertyNodeEventListInput_filter(ctx context.Context, field graphql.CollectedField, obj *model.BertyNodeEventListInput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeEventListInput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Filter, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyP2pEvent)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyP2pEvent(ctx, field.Selections, res)
}

var bertyNodeEventStreamInputImplementors = []string{"BertyNodeEventStreamInput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeEventStreamInput(ctx context.Context, sel ast.SelectionSet, obj *model.BertyNodeEventStreamInput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeEventStreamInputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeEventStreamInput")
		case "filter":
			out.Values[i] = ec._BertyNodeEventStreamInput_filter(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyNodeEventStreamInput_filter(ctx context.Context, field graphql.CollectedField, obj *model.BertyNodeEventStreamInput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeEventStreamInput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Filter, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyP2pEvent)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyP2pEvent(ctx, field.Selections, res)
}

var bertyNodeVoidImplementors = []string{"BertyNodeVoid"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeVoid(ctx context.Context, sel ast.SelectionSet, obj *model.BertyNodeVoid) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeVoidImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeVoid")
		case "T":
			out.Values[i] = ec._BertyNodeVoid_T(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyNodeVoid_T(ctx context.Context, field graphql.CollectedField, obj *model.BertyNodeVoid) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyNodeVoid"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.T, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

var bertyP2pAckAttrsImplementors = []string{"BertyP2pAckAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pAckAttrs(ctx context.Context, sel ast.SelectionSet, obj *model.BertyP2pAckAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pAckAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pAckAttrs")
		case "ids":
			out.Values[i] = ec._BertyP2pAckAttrs_ids(ctx, field, obj)
		case "ErrMsg":
			out.Values[i] = ec._BertyP2pAckAttrs_ErrMsg(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pAckAttrs_ids(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pAckAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pAckAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Ids, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalString(*res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _BertyP2pAckAttrs_ErrMsg(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pAckAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pAckAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ErrMsg, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var bertyP2pContactRequestAcceptedAttrsImplementors = []string{"BertyP2pContactRequestAcceptedAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactRequestAcceptedAttrs(ctx context.Context, sel ast.SelectionSet, obj *model.BertyP2pContactRequestAcceptedAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactRequestAcceptedAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactRequestAcceptedAttrs")
		case "T":
			out.Values[i] = ec._BertyP2pContactRequestAcceptedAttrs_T(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pContactRequestAcceptedAttrs_T(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pContactRequestAcceptedAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pContactRequestAcceptedAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.T, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

var bertyP2pContactRequestAttrsImplementors = []string{"BertyP2pContactRequestAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactRequestAttrs(ctx context.Context, sel ast.SelectionSet, obj *model.BertyP2pContactRequestAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactRequestAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactRequestAttrs")
		case "me":
			out.Values[i] = ec._BertyP2pContactRequestAttrs_me(ctx, field, obj)
		case "introText":
			out.Values[i] = ec._BertyP2pContactRequestAttrs_introText(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pContactRequestAttrs_me(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pContactRequestAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pContactRequestAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Me, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityContact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

func (ec *executionContext) _BertyP2pContactRequestAttrs_introText(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pContactRequestAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pContactRequestAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IntroText, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var bertyP2pContactShareAttrsImplementors = []string{"BertyP2pContactShareAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactShareAttrs(ctx context.Context, sel ast.SelectionSet, obj *model.BertyP2pContactShareAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactShareAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactShareAttrs")
		case "contact":
			out.Values[i] = ec._BertyP2pContactShareAttrs_contact(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pContactShareAttrs_contact(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pContactShareAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pContactShareAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityContact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

var bertyP2pContactShareMeAttrsImplementors = []string{"BertyP2pContactShareMeAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pContactShareMeAttrs(ctx context.Context, sel ast.SelectionSet, obj *model.BertyP2pContactShareMeAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pContactShareMeAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pContactShareMeAttrs")
		case "me":
			out.Values[i] = ec._BertyP2pContactShareMeAttrs_me(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pContactShareMeAttrs_me(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pContactShareMeAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pContactShareMeAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Me, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityContact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

var bertyP2pConversationInviteAttrsImplementors = []string{"BertyP2pConversationInviteAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pConversationInviteAttrs(ctx context.Context, sel ast.SelectionSet, obj *model.BertyP2pConversationInviteAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pConversationInviteAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pConversationInviteAttrs")
		case "conversation":
			out.Values[i] = ec._BertyP2pConversationInviteAttrs_conversation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pConversationInviteAttrs_conversation(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pConversationInviteAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pConversationInviteAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Conversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityConversation)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

var bertyP2pConversationNewMessageAttrsImplementors = []string{"BertyP2pConversationNewMessageAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pConversationNewMessageAttrs(ctx context.Context, sel ast.SelectionSet, obj *model.BertyP2pConversationNewMessageAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pConversationNewMessageAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pConversationNewMessageAttrs")
		case "message":
			out.Values[i] = ec._BertyP2pConversationNewMessageAttrs_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pConversationNewMessageAttrs_message(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pConversationNewMessageAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pConversationNewMessageAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Message, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityMessage)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityMessage(ctx, field.Selections, res)
}

var bertyP2pEventImplementors = []string{"BertyP2pEvent", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pEvent(ctx context.Context, sel ast.SelectionSet, obj *model.BertyP2pEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pEventImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pEvent")
		case "id":
			out.Values[i] = ec._BertyP2pEvent_id(ctx, field, obj)
		case "senderId":
			out.Values[i] = ec._BertyP2pEvent_senderId(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BertyP2pEvent_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyP2pEvent_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._BertyP2pEvent_deletedAt(ctx, field, obj)
		case "sentAt":
			out.Values[i] = ec._BertyP2pEvent_sentAt(ctx, field, obj)
		case "receivedAt":
			out.Values[i] = ec._BertyP2pEvent_receivedAt(ctx, field, obj)
		case "ackedAt":
			out.Values[i] = ec._BertyP2pEvent_ackedAt(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._BertyP2pEvent_direction(ctx, field, obj)
		case "senderApiVersion":
			out.Values[i] = ec._BertyP2pEvent_senderApiVersion(ctx, field, obj)
		case "receiverApiVersion":
			out.Values[i] = ec._BertyP2pEvent_receiverApiVersion(ctx, field, obj)
		case "receiverId":
			out.Values[i] = ec._BertyP2pEvent_receiverId(ctx, field, obj)
		case "kind":
			out.Values[i] = ec._BertyP2pEvent_kind(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._BertyP2pEvent_attributes(ctx, field, obj)
		case "conversationId":
			out.Values[i] = ec._BertyP2pEvent_conversationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pEvent_id(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalID(res)
}

func (ec *executionContext) _BertyP2pEvent_senderId(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SenderID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _BertyP2pEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyP2pEvent_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyP2pEvent_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyP2pEvent_sentAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SentAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyP2pEvent_receivedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReceivedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyP2pEvent_ackedAt(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AckedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.DateTime)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyP2pEvent_direction(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Direction, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyP2pEventDirection)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyP2pEvent_senderApiVersion(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SenderAPIVersion, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _BertyP2pEvent_receiverApiVersion(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReceiverAPIVersion, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _BertyP2pEvent_receiverId(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReceiverID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _BertyP2pEvent_kind(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Kind, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyP2pKind)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _BertyP2pEvent_attributes(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Attributes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _BertyP2pEvent_conversationId(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ConversationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var bertyP2pPingAttrsImplementors = []string{"BertyP2pPingAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pPingAttrs(ctx context.Context, sel ast.SelectionSet, obj *model.BertyP2pPingAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pPingAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pPingAttrs")
		case "T":
			out.Values[i] = ec._BertyP2pPingAttrs_T(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pPingAttrs_T(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pPingAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pPingAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.T, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

var bertyP2pSentAttrsImplementors = []string{"BertyP2pSentAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyP2pSentAttrs(ctx context.Context, sel ast.SelectionSet, obj *model.BertyP2pSentAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyP2pSentAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyP2pSentAttrs")
		case "ids":
			out.Values[i] = ec._BertyP2pSentAttrs_ids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _BertyP2pSentAttrs_ids(ctx context.Context, field graphql.CollectedField, obj *model.BertyP2pSentAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "BertyP2pSentAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Ids, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalString(*res[idx1])
		}())
	}
	return arr1
}

var contactRemovePayloadImplementors = []string{"ContactRemovePayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ContactRemovePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ContactRemovePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, contactRemovePayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactRemovePayload")
		case "bertyEntityContact":
			out.Values[i] = ec._ContactRemovePayload_bertyEntityContact(ctx, field, obj)
		case "clientMutationId":
			out.Values[i] = ec._ContactRemovePayload_clientMutationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ContactRemovePayload_bertyEntityContact(ctx context.Context, field graphql.CollectedField, obj *model.ContactRemovePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ContactRemovePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BertyEntityContact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityContact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactRemovePayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *model.ContactRemovePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ContactRemovePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ClientMutationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var contactRequestPayloadImplementors = []string{"ContactRequestPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ContactRequestPayload(ctx context.Context, sel ast.SelectionSet, obj *model.ContactRequestPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, contactRequestPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactRequestPayload")
		case "bertyEntityContact":
			out.Values[i] = ec._ContactRequestPayload_bertyEntityContact(ctx, field, obj)
		case "clientMutationId":
			out.Values[i] = ec._ContactRequestPayload_clientMutationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ContactRequestPayload_bertyEntityContact(ctx context.Context, field graphql.CollectedField, obj *model.ContactRequestPayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ContactRequestPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BertyEntityContact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityContact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactRequestPayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *model.ContactRequestPayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ContactRequestPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ClientMutationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var contactUpdatePayloadImplementors = []string{"ContactUpdatePayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ContactUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ContactUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, contactUpdatePayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactUpdatePayload")
		case "bertyEntityContact":
			out.Values[i] = ec._ContactUpdatePayload_bertyEntityContact(ctx, field, obj)
		case "clientMutationId":
			out.Values[i] = ec._ContactUpdatePayload_clientMutationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ContactUpdatePayload_bertyEntityContact(ctx context.Context, field graphql.CollectedField, obj *model.ContactUpdatePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ContactUpdatePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BertyEntityContact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityContact)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityContact(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactUpdatePayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *model.ContactUpdatePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ContactUpdatePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ClientMutationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var conversationAddMessagePayloadImplementors = []string{"ConversationAddMessagePayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ConversationAddMessagePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ConversationAddMessagePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, conversationAddMessagePayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConversationAddMessagePayload")
		case "bertyP2pEvent":
			out.Values[i] = ec._ConversationAddMessagePayload_bertyP2pEvent(ctx, field, obj)
		case "clientMutationId":
			out.Values[i] = ec._ConversationAddMessagePayload_clientMutationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ConversationAddMessagePayload_bertyP2pEvent(ctx context.Context, field graphql.CollectedField, obj *model.ConversationAddMessagePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConversationAddMessagePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BertyP2pEvent, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyP2pEvent)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyP2pEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _ConversationAddMessagePayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *model.ConversationAddMessagePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConversationAddMessagePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ClientMutationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var conversationCreatePayloadImplementors = []string{"ConversationCreatePayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ConversationCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ConversationCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, conversationCreatePayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConversationCreatePayload")
		case "bertyEntityConversation":
			out.Values[i] = ec._ConversationCreatePayload_bertyEntityConversation(ctx, field, obj)
		case "clientMutationId":
			out.Values[i] = ec._ConversationCreatePayload_clientMutationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ConversationCreatePayload_bertyEntityConversation(ctx context.Context, field graphql.CollectedField, obj *model.ConversationCreatePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConversationCreatePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BertyEntityConversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityConversation)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

func (ec *executionContext) _ConversationCreatePayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *model.ConversationCreatePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConversationCreatePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ClientMutationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var conversationExcludePayloadImplementors = []string{"ConversationExcludePayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ConversationExcludePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ConversationExcludePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, conversationExcludePayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConversationExcludePayload")
		case "bertyEntityConversation":
			out.Values[i] = ec._ConversationExcludePayload_bertyEntityConversation(ctx, field, obj)
		case "clientMutationId":
			out.Values[i] = ec._ConversationExcludePayload_clientMutationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ConversationExcludePayload_bertyEntityConversation(ctx context.Context, field graphql.CollectedField, obj *model.ConversationExcludePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConversationExcludePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BertyEntityConversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityConversation)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

func (ec *executionContext) _ConversationExcludePayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *model.ConversationExcludePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConversationExcludePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ClientMutationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var conversationInvitePayloadImplementors = []string{"ConversationInvitePayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ConversationInvitePayload(ctx context.Context, sel ast.SelectionSet, obj *model.ConversationInvitePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, conversationInvitePayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConversationInvitePayload")
		case "bertyEntityConversation":
			out.Values[i] = ec._ConversationInvitePayload_bertyEntityConversation(ctx, field, obj)
		case "clientMutationId":
			out.Values[i] = ec._ConversationInvitePayload_clientMutationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ConversationInvitePayload_bertyEntityConversation(ctx context.Context, field graphql.CollectedField, obj *model.ConversationInvitePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConversationInvitePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BertyEntityConversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyEntityConversation)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

func (ec *executionContext) _ConversationInvitePayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *model.ConversationInvitePayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConversationInvitePayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ClientMutationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var generateFakeDataPayloadImplementors = []string{"GenerateFakeDataPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GenerateFakeDataPayload(ctx context.Context, sel ast.SelectionSet, obj *model.GenerateFakeDataPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, generateFakeDataPayloadImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GenerateFakeDataPayload")
		case "bertyNodeVoid":
			out.Values[i] = ec._GenerateFakeDataPayload_bertyNodeVoid(ctx, field, obj)
		case "clientMutationId":
			out.Values[i] = ec._GenerateFakeDataPayload_clientMutationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GenerateFakeDataPayload_bertyNodeVoid(ctx context.Context, field graphql.CollectedField, obj *model.GenerateFakeDataPayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GenerateFakeDataPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BertyNodeVoid, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BertyNodeVoid)
	if res == nil {
		return graphql.Null
	}
	return ec._BertyNodeVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _GenerateFakeDataPayload_clientMutationId(ctx context.Context, field graphql.CollectedField, obj *model.GenerateFakeDataPayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GenerateFakeDataPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ClientMutationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var googleProtobufDescriptorProtoImplementors = []string{"GoogleProtobufDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_name(ctx, field, obj)
		case "field":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_field(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_extension(ctx, field, obj)
		case "nestedType":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_nestedType(ctx, field, obj)
		case "enumType":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_enumType(ctx, field, obj)
		case "extensionRange":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_extensionRange(ctx, field, obj)
		case "oneofDecl":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_oneofDecl(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_options(ctx, field, obj)
		case "reservedRange":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_reservedRange(ctx, field, obj)
		case "reservedName":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_reservedName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_field(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Field, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufFieldDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_extension(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Extension, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufFieldDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_nestedType(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.NestedType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_enumType(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EnumType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufEnumDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufEnumDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_extensionRange(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ExtensionRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufDescriptorProtoExtensionRange)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufDescriptorProtoExtensionRange(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_oneofDecl(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OneofDecl, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufOneofDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufOneofDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufMessageOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufMessageOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_reservedRange(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReservedRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufDescriptorProtoReservedRange)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufDescriptorProtoReservedRange(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufDescriptorProto_reservedName(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReservedName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalString(*res[idx1])
		}())
	}
	return arr1
}

var googleProtobufDescriptorProtoExtensionRangeImplementors = []string{"GoogleProtobufDescriptorProtoExtensionRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufDescriptorProtoExtensionRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoExtensionRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProtoExtensionRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_start(ctx, field, obj)
		case "end":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_end(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_start(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProtoExtensionRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProtoExtensionRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Start, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_end(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProtoExtensionRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProtoExtensionRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.End, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_options(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProtoExtensionRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProtoExtensionRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufExtensionRangeOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufExtensionRangeOptions(ctx, field.Selections, res)
}

var googleProtobufDescriptorProtoReservedRangeImplementors = []string{"GoogleProtobufDescriptorProtoReservedRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufDescriptorProtoReservedRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoReservedRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProtoReservedRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoReservedRange_start(ctx, field, obj)
		case "end":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoReservedRange_end(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange_start(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProtoReservedRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProtoReservedRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Start, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange_end(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufDescriptorProtoReservedRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufDescriptorProtoReservedRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.End, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var googleProtobufEnumDescriptorProtoImplementors = []string{"GoogleProtobufEnumDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufEnumDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_name(ctx, field, obj)
		case "value":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_value(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_options(ctx, field, obj)
		case "reservedRange":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_reservedRange(ctx, field, obj)
		case "reservedName":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_reservedName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_value(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Value, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufEnumValueDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufEnumValueDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufEnumOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufEnumOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_reservedRange(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReservedRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufEnumDescriptorProtoEnumReservedRange)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_reservedName(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReservedName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalString(*res[idx1])
		}())
	}
	return arr1
}

var googleProtobufEnumDescriptorProtoEnumReservedRangeImplementors = []string{"GoogleProtobufEnumDescriptorProtoEnumReservedRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufEnumDescriptorProtoEnumReservedRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumDescriptorProtoEnumReservedRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumDescriptorProtoEnumReservedRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange_start(ctx, field, obj)
		case "end":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange_end(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange_start(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumDescriptorProtoEnumReservedRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProtoEnumReservedRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Start, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange_end(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumDescriptorProtoEnumReservedRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumDescriptorProtoEnumReservedRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.End, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var googleProtobufEnumOptionsImplementors = []string{"GoogleProtobufEnumOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumOptions(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufEnumOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumOptions")
		case "allowAlias":
			out.Values[i] = ec._GoogleProtobufEnumOptions_allowAlias(ctx, field, obj)
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufEnumOptions_deprecated(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufEnumOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufEnumOptions_allowAlias(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AllowAlias, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufEnumOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufEnumOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufUninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufEnumValueDescriptorProtoImplementors = []string{"GoogleProtobufEnumValueDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufEnumValueDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumValueDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumValueDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_name(ctx, field, obj)
		case "number":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_number(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumValueDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumValueDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_number(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumValueDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumValueDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Number, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumValueDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumValueDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufEnumValueOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufEnumValueOptions(ctx, field.Selections, res)
}

var googleProtobufEnumValueOptionsImplementors = []string{"GoogleProtobufEnumValueOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumValueOptions(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufEnumValueOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumValueOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumValueOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufEnumValueOptions_deprecated(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufEnumValueOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufEnumValueOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumValueOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumValueOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufEnumValueOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufEnumValueOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufEnumValueOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufUninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufExtensionRangeOptionsImplementors = []string{"GoogleProtobufExtensionRangeOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufExtensionRangeOptions(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufExtensionRangeOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufExtensionRangeOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufExtensionRangeOptions")
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufExtensionRangeOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufExtensionRangeOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufExtensionRangeOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufExtensionRangeOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufUninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufFieldDescriptorProtoImplementors = []string{"GoogleProtobufFieldDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufFieldDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFieldDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFieldDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_name(ctx, field, obj)
		case "number":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_number(ctx, field, obj)
		case "label":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_label(ctx, field, obj)
		case "type":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_type(ctx, field, obj)
		case "typeName":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_typeName(ctx, field, obj)
		case "extendee":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_extendee(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_defaultValue(ctx, field, obj)
		case "oneofIndex":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_oneofIndex(ctx, field, obj)
		case "jsonName":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_jsonName(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_number(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Number, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_label(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Label, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufFieldDescriptorProtoLabel)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_type(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufFieldDescriptorProtoType)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_typeName(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TypeName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_extendee(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Extendee, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_defaultValue(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_oneofIndex(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OneofIndex, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_jsonName(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JSONName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufFieldOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufFieldOptions(ctx, field.Selections, res)
}

var googleProtobufFieldOptionsImplementors = []string{"GoogleProtobufFieldOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFieldOptions(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufFieldOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFieldOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFieldOptions")
		case "ctype":
			out.Values[i] = ec._GoogleProtobufFieldOptions_ctype(ctx, field, obj)
		case "packed":
			out.Values[i] = ec._GoogleProtobufFieldOptions_packed(ctx, field, obj)
		case "jstype":
			out.Values[i] = ec._GoogleProtobufFieldOptions_jstype(ctx, field, obj)
		case "lazy":
			out.Values[i] = ec._GoogleProtobufFieldOptions_lazy(ctx, field, obj)
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufFieldOptions_deprecated(ctx, field, obj)
		case "weak":
			out.Values[i] = ec._GoogleProtobufFieldOptions_weak(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufFieldOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufFieldOptions_ctype(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Ctype, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufFieldOptionsCtype)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _GoogleProtobufFieldOptions_packed(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Packed, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFieldOptions_jstype(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Jstype, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufFieldOptionsJstype)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _GoogleProtobufFieldOptions_lazy(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Lazy, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFieldOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFieldOptions_weak(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Weak, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFieldOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFieldOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFieldOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufUninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufFileDescriptorProtoImplementors = []string{"GoogleProtobufFileDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_name(ctx, field, obj)
		case "package":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_package(ctx, field, obj)
		case "dependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_dependency(ctx, field, obj)
		case "publicDependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_publicDependency(ctx, field, obj)
		case "weakDependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_weakDependency(ctx, field, obj)
		case "messageType":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_messageType(ctx, field, obj)
		case "enumType":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_enumType(ctx, field, obj)
		case "service":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_service(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_extension(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_options(ctx, field, obj)
		case "sourceCodeInfo":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_sourceCodeInfo(ctx, field, obj)
		case "syntax":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_syntax(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_package(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Package, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_dependency(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Dependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalString(*res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_publicDependency(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PublicDependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalInt(*res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_weakDependency(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.WeakDependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalInt(*res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_messageType(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MessageType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_enumType(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EnumType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufEnumDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufEnumDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_service(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Service, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufServiceDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufServiceDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_extension(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Extension, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufFieldDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufFileOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufFileOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_sourceCodeInfo(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SourceCodeInfo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufSourceCodeInfo)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufSourceCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _GoogleProtobufFileDescriptorProto_syntax(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Syntax, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var googleProtobufFileDescriptorSetImplementors = []string{"GoogleProtobufFileDescriptorSet"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileDescriptorSet(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufFileDescriptorSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileDescriptorSetImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileDescriptorSet")
		case "file":
			out.Values[i] = ec._GoogleProtobufFileDescriptorSet_file(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufFileDescriptorSet_file(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileDescriptorSet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileDescriptorSet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.File, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufFileDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufFileDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufFileOptionsImplementors = []string{"GoogleProtobufFileOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileOptions(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileOptions")
		case "javaPackage":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaPackage(ctx, field, obj)
		case "javaOuterClassname":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaOuterClassname(ctx, field, obj)
		case "javaMultipleFiles":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaMultipleFiles(ctx, field, obj)
		case "javaGenerateEqualsAndHash":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaGenerateEqualsAndHash(ctx, field, obj)
		case "javaStringCheckUtf8":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaStringCheckUtf8(ctx, field, obj)
		case "optimizeFor":
			out.Values[i] = ec._GoogleProtobufFileOptions_optimizeFor(ctx, field, obj)
		case "goPackage":
			out.Values[i] = ec._GoogleProtobufFileOptions_goPackage(ctx, field, obj)
		case "ccGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_ccGenericServices(ctx, field, obj)
		case "javaGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaGenericServices(ctx, field, obj)
		case "pyGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_pyGenericServices(ctx, field, obj)
		case "phpGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpGenericServices(ctx, field, obj)
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufFileOptions_deprecated(ctx, field, obj)
		case "ccEnableArenas":
			out.Values[i] = ec._GoogleProtobufFileOptions_ccEnableArenas(ctx, field, obj)
		case "objcClassPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_objcClassPrefix(ctx, field, obj)
		case "csharpNamespace":
			out.Values[i] = ec._GoogleProtobufFileOptions_csharpNamespace(ctx, field, obj)
		case "swiftPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_swiftPrefix(ctx, field, obj)
		case "phpClassPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpClassPrefix(ctx, field, obj)
		case "phpNamespace":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpNamespace(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufFileOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaPackage(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaPackage, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaOuterClassname(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaOuterClassname, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaMultipleFiles(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaMultipleFiles, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaGenerateEqualsAndHash(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaGenerateEqualsAndHash, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaStringCheckUtf8(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaStringCheckUtf8, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_optimizeFor(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OptimizeFor, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufFileOptionsOptimizeMode)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _GoogleProtobufFileOptions_goPackage(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.GoPackage, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_ccGenericServices(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CcGenericServices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_javaGenericServices(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.JavaGenericServices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_pyGenericServices(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PyGenericServices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_phpGenericServices(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PhpGenericServices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_ccEnableArenas(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CcEnableArenas, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_objcClassPrefix(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ObjcClassPrefix, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_csharpNamespace(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CsharpNamespace, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_swiftPrefix(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SwiftPrefix, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_phpClassPrefix(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PhpClassPrefix, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_phpNamespace(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PhpNamespace, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufFileOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufFileOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufFileOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufUninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufGeneratedCodeInfoImplementors = []string{"GoogleProtobufGeneratedCodeInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfo(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufGeneratedCodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufGeneratedCodeInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufGeneratedCodeInfo")
		case "annotation":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfo_annotation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufGeneratedCodeInfo_annotation(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufGeneratedCodeInfo) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufGeneratedCodeInfo"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Annotation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufGeneratedCodeInfoAnnotation)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufGeneratedCodeInfoAnnotation(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufGeneratedCodeInfoAnnotationImplementors = []string{"GoogleProtobufGeneratedCodeInfoAnnotation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufGeneratedCodeInfoAnnotation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufGeneratedCodeInfoAnnotationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufGeneratedCodeInfoAnnotation")
		case "path":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_path(ctx, field, obj)
		case "sourceFile":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_sourceFile(ctx, field, obj)
		case "begin":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_begin(ctx, field, obj)
		case "end":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_end(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_path(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufGeneratedCodeInfoAnnotation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufGeneratedCodeInfoAnnotation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Path, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalInt(*res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_sourceFile(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufGeneratedCodeInfoAnnotation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufGeneratedCodeInfoAnnotation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SourceFile, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_begin(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufGeneratedCodeInfoAnnotation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufGeneratedCodeInfoAnnotation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Begin, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_end(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufGeneratedCodeInfoAnnotation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufGeneratedCodeInfoAnnotation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.End, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var googleProtobufMessageOptionsImplementors = []string{"GoogleProtobufMessageOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMessageOptions(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufMessageOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMessageOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMessageOptions")
		case "messageSetWireFormat":
			out.Values[i] = ec._GoogleProtobufMessageOptions_messageSetWireFormat(ctx, field, obj)
		case "noStandardDescriptorAccessor":
			out.Values[i] = ec._GoogleProtobufMessageOptions_noStandardDescriptorAccessor(ctx, field, obj)
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufMessageOptions_deprecated(ctx, field, obj)
		case "mapEntry":
			out.Values[i] = ec._GoogleProtobufMessageOptions_mapEntry(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufMessageOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufMessageOptions_messageSetWireFormat(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMessageOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMessageOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MessageSetWireFormat, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufMessageOptions_noStandardDescriptorAccessor(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMessageOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMessageOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.NoStandardDescriptorAccessor, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufMessageOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMessageOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMessageOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufMessageOptions_mapEntry(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMessageOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMessageOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MapEntry, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufMessageOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMessageOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMessageOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufUninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufMethodDescriptorProtoImplementors = []string{"GoogleProtobufMethodDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufMethodDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMethodDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMethodDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_name(ctx, field, obj)
		case "inputType":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_inputType(ctx, field, obj)
		case "outputType":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_outputType(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_options(ctx, field, obj)
		case "clientStreaming":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_clientStreaming(ctx, field, obj)
		case "serverStreaming":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_serverStreaming(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_inputType(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.InputType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_outputType(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OutputType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufMethodOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufMethodOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_clientStreaming(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ClientStreaming, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_serverStreaming(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMethodDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ServerStreaming, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

var googleProtobufMethodOptionsImplementors = []string{"GoogleProtobufMethodOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMethodOptions(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufMethodOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMethodOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMethodOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufMethodOptions_deprecated(ctx, field, obj)
		case "idempotencyLevel":
			out.Values[i] = ec._GoogleProtobufMethodOptions_idempotencyLevel(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufMethodOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufMethodOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMethodOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufMethodOptions_idempotencyLevel(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMethodOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IdempotencyLevel, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufMethodOptionsIdempotencyLevel)
	if res == nil {
		return graphql.Null
	}
	return *res
}

func (ec *executionContext) _GoogleProtobufMethodOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufMethodOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufMethodOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufUninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufOneofDescriptorProtoImplementors = []string{"GoogleProtobufOneofDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufOneofDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufOneofDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufOneofDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufOneofDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufOneofDescriptorProto_name(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufOneofDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufOneofDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufOneofDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufOneofDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufOneofDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufOneofDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufOneofDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufOneofOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufOneofOptions(ctx, field.Selections, res)
}

var googleProtobufOneofOptionsImplementors = []string{"GoogleProtobufOneofOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufOneofOptions(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufOneofOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufOneofOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufOneofOptions")
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufOneofOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufOneofOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufOneofOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufOneofOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufUninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufServiceDescriptorProtoImplementors = []string{"GoogleProtobufServiceDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufServiceDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufServiceDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufServiceDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufServiceDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_name(ctx, field, obj)
		case "method":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_method(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufServiceDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufServiceDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_method(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufServiceDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufServiceDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Method, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufMethodDescriptorProto)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufMethodDescriptorProto(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufServiceDescriptorProto) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufServiceDescriptorProto"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GoogleProtobufServiceOptions)
	if res == nil {
		return graphql.Null
	}
	return ec._GoogleProtobufServiceOptions(ctx, field.Selections, res)
}

var googleProtobufServiceOptionsImplementors = []string{"GoogleProtobufServiceOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufServiceOptions(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufServiceOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufServiceOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufServiceOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufServiceOptions_deprecated(ctx, field, obj)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufServiceOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufServiceOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufServiceOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufServiceOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

func (ec *executionContext) _GoogleProtobufServiceOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufServiceOptions) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufServiceOptions"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufUninterpretedOption)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufSourceCodeInfoImplementors = []string{"GoogleProtobufSourceCodeInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufSourceCodeInfo(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufSourceCodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufSourceCodeInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufSourceCodeInfo")
		case "location":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfo_location(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfo_location(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufSourceCodeInfo) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfo"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Location, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufSourceCodeInfoLocation)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufSourceCodeInfoLocation(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var googleProtobufSourceCodeInfoLocationImplementors = []string{"GoogleProtobufSourceCodeInfoLocation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufSourceCodeInfoLocation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufSourceCodeInfoLocationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufSourceCodeInfoLocation")
		case "path":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_path(ctx, field, obj)
		case "span":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_span(ctx, field, obj)
		case "leadingComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_leadingComments(ctx, field, obj)
		case "trailingComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_trailingComments(ctx, field, obj)
		case "leadingDetachedComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_leadingDetachedComments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_path(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufSourceCodeInfoLocation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfoLocation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Path, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalInt(*res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_span(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufSourceCodeInfoLocation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfoLocation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Span, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalInt(*res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_leadingComments(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufSourceCodeInfoLocation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfoLocation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeadingComments, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_trailingComments(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufSourceCodeInfoLocation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfoLocation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TrailingComments, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_leadingDetachedComments(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufSourceCodeInfoLocation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufSourceCodeInfoLocation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeadingDetachedComments, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalString(*res[idx1])
		}())
	}
	return arr1
}

var googleProtobufTimestampImplementors = []string{"GoogleProtobufTimestamp"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufTimestamp(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufTimestamp) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufTimestampImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufTimestamp")
		case "seconds":
			out.Values[i] = ec._GoogleProtobufTimestamp_seconds(ctx, field, obj)
		case "nanos":
			out.Values[i] = ec._GoogleProtobufTimestamp_nanos(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufTimestamp_seconds(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufTimestamp) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufTimestamp"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Seconds, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _GoogleProtobufTimestamp_nanos(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufTimestamp) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufTimestamp"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Nanos, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var googleProtobufUninterpretedOptionImplementors = []string{"GoogleProtobufUninterpretedOption"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufUninterpretedOption(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufUninterpretedOption) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufUninterpretedOptionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufUninterpretedOption")
		case "name":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_name(ctx, field, obj)
		case "identifierValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_identifierValue(ctx, field, obj)
		case "positiveIntValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_positiveIntValue(ctx, field, obj)
		case "negativeIntValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_negativeIntValue(ctx, field, obj)
		case "doubleValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_doubleValue(ctx, field, obj)
		case "stringValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_stringValue(ctx, field, obj)
		case "aggregateValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_aggregateValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_name(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufUninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GoogleProtobufUninterpretedOptionNamePart)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._GoogleProtobufUninterpretedOptionNamePart(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_identifierValue(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufUninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IdentifierValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_positiveIntValue(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufUninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PositiveIntValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_negativeIntValue(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufUninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.NegativeIntValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_doubleValue(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufUninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DoubleValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_stringValue(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufUninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.StringValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufUninterpretedOption_aggregateValue(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufUninterpretedOption) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOption"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AggregateValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var googleProtobufUninterpretedOptionNamePartImplementors = []string{"GoogleProtobufUninterpretedOptionNamePart"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart(ctx context.Context, sel ast.SelectionSet, obj *model.GoogleProtobufUninterpretedOptionNamePart) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufUninterpretedOptionNamePartImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufUninterpretedOptionNamePart")
		case "namePart":
			out.Values[i] = ec._GoogleProtobufUninterpretedOptionNamePart_namePart(ctx, field, obj)
		case "isExtension":
			out.Values[i] = ec._GoogleProtobufUninterpretedOptionNamePart_isExtension(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart_namePart(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufUninterpretedOptionNamePart) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOptionNamePart"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.NamePart, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart_isExtension(ctx context.Context, field graphql.CollectedField, obj *model.GoogleProtobufUninterpretedOptionNamePart) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "GoogleProtobufUninterpretedOptionNamePart"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsExtension, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "ContactRequest":
			out.Values[i] = ec._Mutation_ContactRequest(ctx, field)
		case "ContactRemove":
			out.Values[i] = ec._Mutation_ContactRemove(ctx, field)
		case "ContactUpdate":
			out.Values[i] = ec._Mutation_ContactUpdate(ctx, field)
		case "ConversationCreate":
			out.Values[i] = ec._Mutation_ConversationCreate(ctx, field)
		case "ConversationInvite":
			out.Values[i] = ec._Mutation_ConversationInvite(ctx, field)
		case "ConversationExclude":
			out.Values[i] = ec._Mutation_ConversationExclude(ctx, field)
		case "ConversationAddMessage":
			out.Values[i] = ec._Mutation_ConversationAddMessage(ctx, field)
		case "GenerateFakeData":
			out.Values[i] = ec._Mutation_GenerateFakeData(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Mutation_ContactRequest(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 model.ContactRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalContactRequestInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["input"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ContactRequest(ctx, args["input"].(model.ContactRequestInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContactRequestPayload)
	if res == nil {
		return graphql.Null
	}
	return ec._ContactRequestPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ContactRemove(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 model.ContactRemoveInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalContactRemoveInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["input"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ContactRemove(ctx, args["input"].(model.ContactRemoveInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContactRemovePayload)
	if res == nil {
		return graphql.Null
	}
	return ec._ContactRemovePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ContactUpdate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 model.ContactUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalContactUpdateInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["input"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ContactUpdate(ctx, args["input"].(model.ContactUpdateInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContactUpdatePayload)
	if res == nil {
		return graphql.Null
	}
	return ec._ContactUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ConversationCreate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 model.ConversationCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalConversationCreateInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["input"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ConversationCreate(ctx, args["input"].(model.ConversationCreateInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConversationCreatePayload)
	if res == nil {
		return graphql.Null
	}
	return ec._ConversationCreatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ConversationInvite(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 model.ConversationInviteInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalConversationInviteInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["input"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ConversationInvite(ctx, args["input"].(model.ConversationInviteInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConversationInvitePayload)
	if res == nil {
		return graphql.Null
	}
	return ec._ConversationInvitePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ConversationExclude(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 model.ConversationExcludeInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalConversationExcludeInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["input"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ConversationExclude(ctx, args["input"].(model.ConversationExcludeInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConversationExcludePayload)
	if res == nil {
		return graphql.Null
	}
	return ec._ConversationExcludePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ConversationAddMessage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 model.ConversationAddMessageInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalConversationAddMessageInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["input"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().ConversationAddMessage(ctx, args["input"].(model.ConversationAddMessageInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConversationAddMessagePayload)
	if res == nil {
		return graphql.Null
	}
	return ec._ConversationAddMessagePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_GenerateFakeData(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 model.GenerateFakeDataInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalGenerateFakeDataInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["input"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().GenerateFakeData(ctx, args["input"].(model.GenerateFakeDataInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GenerateFakeDataPayload)
	if res == nil {
		return graphql.Null
	}
	return ec._GenerateFakeDataPayload(ctx, field.Selections, res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			out.Values[i] = ec._Query_node(ctx, field)
		case "EventList":
			out.Values[i] = ec._Query_EventList(ctx, field)
		case "ContactList":
			out.Values[i] = ec._Query_ContactList(ctx, field)
		case "ConversationList":
			out.Values[i] = ec._Query_ConversationList(ctx, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = graphql.UnmarshalID(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().Node(ctx, args["id"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(model.Node)
		return ec._Node(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_EventList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["limit"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().EventList(ctx, args["limit"].(*int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*model.BertyP2pEvent)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				if res[idx1] == nil {
					return graphql.Null
				}
				return ec._BertyP2pEvent(ctx, field.Selections, res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_ContactList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().ContactList(ctx)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*model.BertyEntityContact)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				if res[idx1] == nil {
					return graphql.Null
				}
				return ec._BertyEntityContact(ctx, field.Selections, res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_ConversationList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().ConversationList(ctx)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*model.BertyEntityConversation)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				if res[idx1] == nil {
					return graphql.Null
				}
				return ec._BertyEntityConversation(ctx, field.Selections, res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.introspectType(args["name"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.introspectSchema(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	if res == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, field.Selections, res)
}

var subscriptionImplementors = []string{"Subscription"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, subscriptionImplementors)
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "EventStream":
		return ec._Subscription_EventStream(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

func (ec *executionContext) _Subscription_EventStream(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{Field: field})
	results, err := ec.resolvers.Subscription().EventStream(ctx)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}
			return ec._BertyP2pEvent(ctx, field.Selections, res)
		}())
		return &out
	}
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Locations, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Types(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Directives(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Directive(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Kind(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Field(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___EnumValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj *model.Node) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case model.BertyEntityDevice:
		return ec._BertyEntityDevice(ctx, sel, &obj)
	case *model.BertyEntityDevice:
		return ec._BertyEntityDevice(ctx, sel, obj)
	case model.BertyEntityContact:
		return ec._BertyEntityContact(ctx, sel, &obj)
	case *model.BertyEntityContact:
		return ec._BertyEntityContact(ctx, sel, obj)
	case model.BertyEntityConversation:
		return ec._BertyEntityConversation(ctx, sel, &obj)
	case *model.BertyEntityConversation:
		return ec._BertyEntityConversation(ctx, sel, obj)
	case model.BertyEntityConversationMember:
		return ec._BertyEntityConversationMember(ctx, sel, &obj)
	case *model.BertyEntityConversationMember:
		return ec._BertyEntityConversationMember(ctx, sel, obj)
	case model.BertyP2pEvent:
		return ec._BertyP2pEvent(ctx, sel, &obj)
	case *model.BertyP2pEvent:
		return ec._BertyP2pEvent(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func UnmarshalContactRemoveInput(v interface{}) (model.ContactRemoveInput, error) {
	var it model.ContactRemoveInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contactID":
			var err error
			it.ContactID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "clientMutationId":
			var err error
			it.ClientMutationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalContactRequestInput(v interface{}) (model.ContactRequestInput, error) {
	var it model.ContactRequestInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contactID":
			var err error
			it.ContactID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "introText":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.IntroText = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "clientMutationId":
			var err error
			it.ClientMutationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalContactUpdateInput(v interface{}) (model.ContactUpdateInput, error) {
	var it model.ContactUpdateInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contactID":
			var err error
			it.ContactID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.DisplayName = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "clientMutationId":
			var err error
			it.ClientMutationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalConversationAddMessageInput(v interface{}) (model.ConversationAddMessageInput, error) {
	var it model.ConversationAddMessageInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "conversationID":
			var err error
			it.ConversationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "clientMutationId":
			var err error
			it.ClientMutationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalConversationCreateInput(v interface{}) (model.ConversationCreateInput, error) {
	var it model.ConversationCreateInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contactsID":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.ContactsID = make([]string, len(rawIf1))
			for idx1 := range rawIf1 {
				it.ContactsID[idx1], err = graphql.UnmarshalString(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "clientMutationId":
			var err error
			it.ClientMutationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalConversationExcludeInput(v interface{}) (model.ConversationExcludeInput, error) {
	var it model.ConversationExcludeInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "conversationID":
			var err error
			it.ConversationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "contactsID":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.ContactsID = make([]string, len(rawIf1))
			for idx1 := range rawIf1 {
				it.ContactsID[idx1], err = graphql.UnmarshalString(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "clientMutationId":
			var err error
			it.ClientMutationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalConversationInviteInput(v interface{}) (model.ConversationInviteInput, error) {
	var it model.ConversationInviteInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "conversationID":
			var err error
			it.ConversationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "contactsID":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.ContactsID = make([]string, len(rawIf1))
			for idx1 := range rawIf1 {
				it.ContactsID[idx1], err = graphql.UnmarshalString(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "clientMutationId":
			var err error
			it.ClientMutationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalGenerateFakeDataInput(v interface{}) (model.GenerateFakeDataInput, error) {
	var it model.GenerateFakeDataInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error
			it.ClientMutationID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, next graphql.Resolver) interface{} {
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name])
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "service.gen.graphql", Input: `
# GENERATED CODE -- DO NOT EDIT!

scalar DateTime

interface Node {
  id: ID!
}





  

type GoogleProtobufFileDescriptorSet {
  file: [GoogleProtobufFileDescriptorProto]
} 

type GoogleProtobufFileDescriptorProto {
  name: String
  package: String
  dependency: [String]
  publicDependency: [Int]
  weakDependency: [Int]
  messageType: [GoogleProtobufDescriptorProto]
  enumType: [GoogleProtobufEnumDescriptorProto]
  service: [GoogleProtobufServiceDescriptorProto]
  extension: [GoogleProtobufFieldDescriptorProto]
  options: GoogleProtobufFileOptions
  sourceCodeInfo: GoogleProtobufSourceCodeInfo
  syntax: String
}  

type GoogleProtobufDescriptorProtoExtensionRange {
  start: Int
  end: Int
  options: GoogleProtobufExtensionRangeOptions
}

type GoogleProtobufDescriptorProtoReservedRange {
  start: Int
  end: Int
}

type GoogleProtobufDescriptorProto {
  name: String
  field: [GoogleProtobufFieldDescriptorProto]
  extension: [GoogleProtobufFieldDescriptorProto]
  nestedType: [GoogleProtobufDescriptorProto]
  enumType: [GoogleProtobufEnumDescriptorProto]
  extensionRange: [GoogleProtobufDescriptorProtoExtensionRange]
  oneofDecl: [GoogleProtobufOneofDescriptorProto]
  options: GoogleProtobufMessageOptions
  reservedRange: [GoogleProtobufDescriptorProtoReservedRange]
  reservedName: [String]
} 

type GoogleProtobufExtensionRangeOptions {
  uninterpretedOption: [GoogleProtobufUninterpretedOption]
} 

type GoogleProtobufFieldDescriptorProto {
  name: String
  number: Int
  label: GoogleProtobufFieldDescriptorProtoLabel
  type: GoogleProtobufFieldDescriptorProtoType
  typeName: String
  extendee: String
  defaultValue: String
  oneofIndex: Int
  jsonName: String
  options: GoogleProtobufFieldOptions
}

enum GoogleProtobufFieldDescriptorProtoType {
  TYPE_DOUBLE
  TYPE_FLOAT
  TYPE_INT64
  TYPE_UINT64
  TYPE_INT32
  TYPE_FIXED64
  TYPE_FIXED32
  TYPE_BOOL
  TYPE_STRING
  TYPE_GROUP
  TYPE_MESSAGE
  TYPE_BYTES
  TYPE_UINT32
  TYPE_ENUM
  TYPE_SFIXED32
  TYPE_SFIXED64
  TYPE_SINT32
  TYPE_SINT64
}

enum GoogleProtobufFieldDescriptorProtoLabel {
  LABEL_OPTIONAL
  LABEL_REQUIRED
  LABEL_REPEATED
} 

type GoogleProtobufOneofDescriptorProto {
  name: String
  options: GoogleProtobufOneofOptions
}  

type GoogleProtobufEnumDescriptorProtoEnumReservedRange {
  start: Int
  end: Int
}

type GoogleProtobufEnumDescriptorProto {
  name: String
  value: [GoogleProtobufEnumValueDescriptorProto]
  options: GoogleProtobufEnumOptions
  reservedRange: [GoogleProtobufEnumDescriptorProtoEnumReservedRange]
  reservedName: [String]
} 

type GoogleProtobufEnumValueDescriptorProto {
  name: String
  number: Int
  options: GoogleProtobufEnumValueOptions
} 

type GoogleProtobufServiceDescriptorProto {
  name: String
  method: [GoogleProtobufMethodDescriptorProto]
  options: GoogleProtobufServiceOptions
} 

type GoogleProtobufMethodDescriptorProto {
  name: String
  inputType: String
  outputType: String
  options: GoogleProtobufMethodOptions
  clientStreaming: Boolean
  serverStreaming: Boolean
} 

type GoogleProtobufFileOptions {
  javaPackage: String
  javaOuterClassname: String
  javaMultipleFiles: Boolean
  javaGenerateEqualsAndHash: Boolean
  javaStringCheckUtf8: Boolean
  optimizeFor: GoogleProtobufFileOptionsOptimizeMode
  goPackage: String
  ccGenericServices: Boolean
  javaGenericServices: Boolean
  pyGenericServices: Boolean
  phpGenericServices: Boolean
  deprecated: Boolean
  ccEnableArenas: Boolean
  objcClassPrefix: String
  csharpNamespace: String
  swiftPrefix: String
  phpClassPrefix: String
  phpNamespace: String
  uninterpretedOption: [GoogleProtobufUninterpretedOption]
}

enum GoogleProtobufFileOptionsOptimizeMode {
  SPEED
  CODE_SIZE
  LITE_RUNTIME
} 

type GoogleProtobufMessageOptions {
  messageSetWireFormat: Boolean
  noStandardDescriptorAccessor: Boolean
  deprecated: Boolean
  mapEntry: Boolean
  uninterpretedOption: [GoogleProtobufUninterpretedOption]
} 

type GoogleProtobufFieldOptions {
  ctype: GoogleProtobufFieldOptionsCType
  packed: Boolean
  jstype: GoogleProtobufFieldOptionsJSType
  lazy: Boolean
  deprecated: Boolean
  weak: Boolean
  uninterpretedOption: [GoogleProtobufUninterpretedOption]
}

enum GoogleProtobufFieldOptionsCType {
  STRING
  CORD
  STRING_PIECE
}

enum GoogleProtobufFieldOptionsJSType {
  JS_NORMAL
  JS_STRING
  JS_NUMBER
} 

type GoogleProtobufOneofOptions {
  uninterpretedOption: [GoogleProtobufUninterpretedOption]
} 

type GoogleProtobufEnumOptions {
  allowAlias: Boolean
  deprecated: Boolean
  uninterpretedOption: [GoogleProtobufUninterpretedOption]
} 

type GoogleProtobufEnumValueOptions {
  deprecated: Boolean
  uninterpretedOption: [GoogleProtobufUninterpretedOption]
} 

type GoogleProtobufServiceOptions {
  deprecated: Boolean
  uninterpretedOption: [GoogleProtobufUninterpretedOption]
} 

type GoogleProtobufMethodOptions {
  deprecated: Boolean
  idempotencyLevel: GoogleProtobufMethodOptionsIdempotencyLevel
  uninterpretedOption: [GoogleProtobufUninterpretedOption]
}

enum GoogleProtobufMethodOptionsIdempotencyLevel {
  IDEMPOTENCY_UNKNOWN
  NO_SIDE_EFFECTS
  IDEMPOTENT
}  

type GoogleProtobufUninterpretedOptionNamePart {
  namePart: String
  isExtension: Boolean
}

type GoogleProtobufUninterpretedOption {
  name: [GoogleProtobufUninterpretedOptionNamePart]
  identifierValue: String
  positiveIntValue: Int
  negativeIntValue: Int
  doubleValue: Float
  stringValue: String
  aggregateValue: String
}  

type GoogleProtobufSourceCodeInfoLocation {
  path: [Int]
  span: [Int]
  leadingComments: String
  trailingComments: String
  leadingDetachedComments: [String]
}

type GoogleProtobufSourceCodeInfo {
  location: [GoogleProtobufSourceCodeInfoLocation]
}  

type GoogleProtobufGeneratedCodeInfoAnnotation {
  path: [Int]
  sourceFile: String
  begin: Int
  end: Int
}

type GoogleProtobufGeneratedCodeInfo {
  annotation: [GoogleProtobufGeneratedCodeInfoAnnotation]
}  



   



   



  

type GoogleProtobufTimestamp {
  seconds: Int
  nanos: Int
}  



    

type BertyEntityDevice implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String
  status: BertyEntityDeviceStatus
  apiVersion: Int
  contactId: String
}

enum BertyEntityDeviceStatus {
  Unknown
  Connected
  Disconnected
  Available
  Myself
}  



    

type BertyEntityContact implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  sigchain: String
  status: BertyEntityContactStatus
  devices: [BertyEntityDevice]
  displayName: String
  displayStatus: String
  overrideDisplayName: String
  overrideDisplayStatus: String
}

enum BertyEntityContactStatus {
  Unknown
  IsFriend
  IsTrustedFriend
  IsRequested
  RequestedMe
  IsBlocked
  Myself
}  



    

type BertyEntityConversation implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  title: String
  topic: String
  members: [BertyEntityConversationMember]
}   

type BertyEntityConversationMember implements Node {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  status: BertyEntityConversationMemberStatus
  contact: BertyEntityContact
  conversationId: String
  contactId: String
}

enum BertyEntityConversationMemberStatus {
  Unknown
  Owner
  Active
  Blocked
}  



  

type BertyEntityMessage {
  text: String
}  



  

type BertyP2pSentAttrs {
  ids: [String]
} 

type BertyP2pAckAttrs {
  ids: [String]
  ErrMsg: String
} 

type BertyP2pPingAttrs { # Can't make empty type
  T: Boolean
} 

type BertyP2pContactRequestAttrs {
  me: BertyEntityContact
  introText: String
} 

type BertyP2pContactRequestAcceptedAttrs { # Can't make empty type
  T: Boolean
} 

type BertyP2pContactShareMeAttrs {
  me: BertyEntityContact
} 

type BertyP2pContactShareAttrs {
  contact: BertyEntityContact
} 

type BertyP2pConversationInviteAttrs {
  conversation: BertyEntityConversation
} 

type BertyP2pConversationNewMessageAttrs {
  message: BertyEntityMessage
} 

enum BertyP2pKind {
  Unknown
  Sent
  Ack
  Ping
  ContactRequest
  ContactRequestAccepted
  ContactShareMe
  ContactShare
  ConversationInvite
  ConversationNewMessage
} 



    

type BertyP2pEvent implements Node {
  id: ID!
  senderId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  sentAt: DateTime
  receivedAt: DateTime
  ackedAt: DateTime
  direction: BertyP2pEventDirection
  senderApiVersion: Int
  receiverApiVersion: Int
  receiverId: String
  kind: BertyP2pKind
  attributes: String
  conversationId: String
}

enum BertyP2pEventDirection {
  UnknownDirection
  Incoming
  Outgoing
}  



  

type BertyNodeContactRequestInput {
  contact: BertyEntityContact
  introText: String
} 

type BertyNodeConversationAddMessageInput {
  conversation: BertyEntityConversation
  message: BertyEntityMessage
} 

type BertyNodeEventStreamInput {
  filter: BertyP2pEvent
} 

type BertyNodeEventListInput {
  limit: Int
  filter: BertyP2pEvent
} 

type BertyNodeConversationManageMembersInput {
  conversation: BertyEntityConversation
  members: [BertyEntityConversationMember]
} 

type BertyNodeVoid { # Can't make empty type
  T: Boolean
}  




input ContactRequestInput {
  contactID: String!
  introText: String
  clientMutationId: String!
}

type ContactRequestPayload {
  bertyEntityContact: BertyEntityContact
  clientMutationId: String!
}

input ContactRemoveInput {
  contactID: String!
  clientMutationId: String!
}

type ContactRemovePayload {
  bertyEntityContact: BertyEntityContact
  clientMutationId: String!
}

input ContactUpdateInput {
  contactID: String!
  displayName: String
  clientMutationId: String!
}

type ContactUpdatePayload {
  bertyEntityContact: BertyEntityContact
  clientMutationId: String!
}

input ConversationCreateInput {
  contactsID: [String!]!
  clientMutationId: String!
}

type ConversationCreatePayload {
  bertyEntityConversation: BertyEntityConversation
  clientMutationId: String!
}

input ConversationInviteInput {
  conversationID: String!
  contactsID: [String!]!
  clientMutationId: String!
}

type ConversationInvitePayload {
  bertyEntityConversation: BertyEntityConversation
  clientMutationId: String!
}

input ConversationExcludeInput {
  conversationID: String!
  contactsID: [String!]!
  clientMutationId: String!
}

type ConversationExcludePayload {
  bertyEntityConversation: BertyEntityConversation
  clientMutationId: String!
}

input ConversationAddMessageInput {
  conversationID: String!
  message: String!
  clientMutationId: String!
}

type ConversationAddMessagePayload {
  bertyP2pEvent: BertyP2pEvent
  clientMutationId: String!
}

input GenerateFakeDataInput {
  clientMutationId: String!
}

type GenerateFakeDataPayload {
  bertyNodeVoid: BertyNodeVoid
  clientMutationId: String!
}




type Mutation {
  ContactRequest(input: ContactRequestInput!): ContactRequestPayload
  ContactRemove(input: ContactRemoveInput!): ContactRemovePayload
  ContactUpdate(input: ContactUpdateInput!): ContactUpdatePayload
  ConversationCreate(input: ConversationCreateInput!): ConversationCreatePayload
  ConversationInvite(input: ConversationInviteInput!): ConversationInvitePayload
  ConversationExclude(input: ConversationExcludeInput!): ConversationExcludePayload
  ConversationAddMessage(input: ConversationAddMessageInput!): ConversationAddMessagePayload
  GenerateFakeData(input: GenerateFakeDataInput!): GenerateFakeDataPayload
}




type Query {
  # Root field
  node(id: ID!): Node

  
  EventList(limit: Int): [BertyP2pEvent]
  ContactList: [BertyEntityContact]
  ConversationList: [BertyEntityConversation]
}




type Subscription {
  
  EventStream: BertyP2pEvent
}

`},
)
