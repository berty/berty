syntax = "proto3";

package berty.node;

import "api/protobuf/graphql/graphql.proto";
import "api/p2p/event.proto";
import "api/p2p/metrics.proto";
import "api/p2p/peer.proto";
import "entity/contact.proto";
import "entity/conversation.proto";
import "entity/message.proto";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";


option go_package = "berty.tech/core/api/node";

service Service {
  // return node current ID
  rpc ID(Void) returns (berty.p2p.Peer) {
    option (gql.graphql_type) = "Query";
  };

  //
  // Events
  //

  // yield new events in real-time
  rpc EventStream(EventStreamInput) returns (stream berty.p2p.Event) {
    option (gql.graphql_type) = "Subscription";
  };
  // list old events
  rpc EventList(EventListInput) returns (stream berty.p2p.Event) {
    option (gql.graphql_output) = ".berty.node.EventListConnection";
    option (gql.graphql_type) = "Query";
  };
  rpc GetEvent(berty.p2p.Event) returns (berty.p2p.Event) {
    option (gql.graphql_type) = "Query";
  };

  //
  // Contacts
  //

  rpc ContactRequest(ContactRequestInput) returns (berty.entity.Contact) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ContactAcceptRequest(berty.entity.Contact) returns (berty.entity.Contact) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ContactRemove(berty.entity.Contact) returns (berty.entity.Contact) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ContactUpdate(berty.entity.Contact) returns (berty.entity.Contact) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ContactList(ContactListInput) returns (stream berty.entity.Contact) {
    option (gql.graphql_output) = ".berty.node.ContactListConnection";
    option (gql.graphql_type) = "Query";
  };
  rpc GetContact(berty.entity.Contact) returns (berty.entity.Contact) {
    option (gql.graphql_type) = "Query";
  };

  //
  // Conversations
  //

  rpc ConversationCreate(ConversationCreateInput) returns (berty.entity.Conversation) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ConversationList(ConversationListInput) returns (stream berty.entity.Conversation) {
    option (gql.graphql_output) = ".berty.node.ConversationListConnection";
    option (gql.graphql_type) = "Query";
  };
  rpc ConversationInvite(ConversationManageMembersInput) returns (berty.entity.Conversation) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ConversationExclude(ConversationManageMembersInput) returns (berty.entity.Conversation) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ConversationAddMessage(ConversationAddMessageInput) returns (berty.p2p.Event) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc GetConversation(berty.entity.Conversation) returns (berty.entity.Conversation) {
    option (gql.graphql_type) = "Query";
  };
  rpc GetConversationMember(berty.entity.ConversationMember) returns (berty.entity.ConversationMember) {
    option (gql.graphql_type) = "Query";
  };

  //rpc ConversationLeave(berty.entity.Conversation) returns (berty.entity.Conversation);
  //rpc ConversationJoinRequest(berty.entity.Conversation) returns (berty.entity.Conversation);
  //rpc ConverstionAcceptJoinRequest(berty.entity.Conversation) returns (berty.entity.Conversation);

  //
  // Devtools
  //

  // HandleEvent is the unencrypted (and unsafe) version of HandleEnvelope.
  // it's only exposed over the node API, it should be completely deactivated in public releases
  rpc HandleEvent(berty.p2p.Event) returns (Void) {};

  rpc GenerateFakeData(Void) returns (Void) {
    option (gql.graphql_type) = "Mutation";
  };

  rpc RunIntegrationTests(IntegrationTestInput) returns (IntegrationTestOutput) {
    option (gql.graphql_type) = "Mutation";
  };

  rpc DebugPing(PingDestination) returns (Void) {};

  rpc DeviceInfos(Void) returns (DeviceInfosOutput) {
    option (gql.graphql_type) = "Query";
  };

  rpc AppVersion(Void) returns (AppVersionOutput) {
    option (gql.graphql_type) = "Query";
  };

  rpc Peers(Void) returns (p2p.Peers) {
    option (gql.graphql_type) = "Query";
  };

  rpc Protocols(p2p.Peer) returns (ProtocolsOutput) {
    option (gql.graphql_type) = "Query";
  };

  //
  // Metrics
  //

  // Yield bandwidth in real-time
  rpc MonitorBandwidth(berty.p2p.BandwidthStats) returns (stream berty.p2p.BandwidthStats) {
    option (gql.graphql_type) = "Subscription";
  };

    // Yield new peers in real-time
  rpc MonitorPeers(Void) returns (stream p2p.Peer) {
    option (gql.graphql_type) = "Subscription";
  };

  rpc Panic(Void) returns (Void) {
    option (gql.graphql_type) = "Query";
  };
}


message DeviceInfosOutput {
  repeated DeviceInfo infos = 1;
}

message ProtocolsOutput {
  repeated string protocols = 1;
};

message DeviceInfo {
  string key = 1;
  string value = 2;
}

message AppVersionOutput {
  string version = 1;
}

message PingDestination {
  string destination = 1;
}

message ContactRequestInput {
  berty.entity.Contact contact = 1;
  string intro_text = 2;
}

message ConversationAddMessageInput {
  berty.entity.Conversation conversation = 1;
  berty.entity.Message message = 2;
}

message EventStreamInput {
  berty.p2p.Event filter = 1;
}


//
// EventList
//
message EventListInput {
  berty.p2p.Event filter = 1;
  Pagination paginate = 99 [(gql.graphql_spread) = true];
}
message EventEdge {
  berty.p2p.Event node = 1;
  string cursor = 2;
}
message EventListConnection {
  repeated EventEdge edges = 1;
  PageInfo page_info = 99 [(gql.graphql_non_nullable) = true];
}


//
// ContactList
//

message ContactListInput {
  berty.entity.Contact filter = 1;
  Pagination paginate = 99 [(gql.graphql_spread) = true];
}
message ContactEdge {
  berty.entity.Contact node = 1;
  string cursor = 2;
}
message ContactListConnection {
  repeated ContactEdge edges = 1;
  PageInfo page_info = 99 [(gql.graphql_non_nullable) = true];
}


//
// ConversationList
//

message ConversationListInput {
  berty.entity.Conversation filter = 1;
  Pagination paginate = 99 [(gql.graphql_spread) = true];
}
message ConversationEdge {
  berty.entity.Conversation node = 1;
  string cursor = 2;
}
message ConversationListConnection{
  repeated ConversationEdge edges = 1;
  PageInfo page_info = 99 [(gql.graphql_non_nullable) = true];
}

message ConversationCreateInput {
  repeated berty.entity.Contact contacts = 1;
  string title = 2;
  string topic = 3;
}

message ConversationManageMembersInput {
  berty.entity.Conversation conversation = 1;
  repeated berty.entity.ConversationMember members = 2;
}

//
// common
//

message Pagination {
  // argument definition
  string order_by = 1;
  bool order_desc = 2;

  // feed definition
  int32 first = 11 [(gql.graphql_nullable) = true];
  string after = 12 [(gql.graphql_nullable) = true];
  int32 last = 13 [(gql.graphql_nullable) = true];
  string before = 14 [(gql.graphql_nullable) = true];
}

message PageInfo {
  string start_cursor = 1;
  string end_cursor = 2;
  bool has_next_page = 3;
  bool has_previous_page = 4;

  // non-standard
  uint32 count = 5;
}

message IntegrationTestInput {
  string name = 1;
}

message IntegrationTestOutput {
  string name = 1;
  bool success = 2;
  string verbose = 3;
  google.protobuf.Timestamp started_at = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  google.protobuf.Timestamp finished_at = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message Void {
  bool T = 1;
}
