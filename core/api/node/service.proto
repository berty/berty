syntax = "proto3";

package berty.node;

import "api/protobuf/graphql.proto";
import "api/p2p/event.proto";
import "entity/contact.proto";
import "entity/conversation.proto";
import "entity/message.proto";

option go_package = "berty.tech/core/api/node";

service Service {

  //
  // Events
  //

  // yield new events in real-time
  rpc EventStream(EventStreamInput) returns (stream berty.p2p.Event) {
    option (protobuf.gql.graphql_type) = "Subscription";
  };
  // list old events
  rpc EventList(EventListInput) returns (stream berty.p2p.Event) {
    option (protobuf.gql.graphql_fields) = "limit: Int";
    option (protobuf.gql.graphql_type) = "Query";
  };

  //
  // Contacts
  //

  rpc ContactRequest(ContactRequestInput) returns (berty.entity.Contact) {
    option (protobuf.gql.graphql_fields) = "contactID: String!, introText: String";
    option (protobuf.gql.graphql_type) = "Mutation";
  };
  rpc ContactAcceptRequest(berty.entity.Contact) returns (berty.entity.Contact) {
    option (protobuf.gql.graphql_fields) = "contactID: String!";
    option (protobuf.gql.graphql_type) = "mutation";
  };
  rpc ContactRemove(berty.entity.Contact) returns (berty.entity.Contact) {
    option (protobuf.gql.graphql_fields) = "contactID: String!";
    option (protobuf.gql.graphql_type) = "Mutation";
  };
  rpc ContactUpdate(berty.entity.Contact) returns (berty.entity.Contact) {
    option (protobuf.gql.graphql_fields) = "contactID: String!, displayName: String";
    option (protobuf.gql.graphql_type) = "Mutation";
  };
  rpc ContactList(Void) returns (stream berty.entity.Contact) {
    option (protobuf.gql.graphql_type) = "Query";
  };


  //
  // Conversations
  //

  rpc ConversationCreate(berty.entity.Conversation) returns (berty.entity.Conversation) {
    option (protobuf.gql.graphql_fields) = "contactsID: [String!]!";
    option (protobuf.gql.graphql_type) = "Mutation";
  };
  rpc ConversationList(Void) returns (stream berty.entity.Conversation) {
    option (protobuf.gql.graphql_type) = "Query";
  };
  rpc ConversationInvite(ConversationManageMembersInput) returns (berty.entity.Conversation) {
    option (protobuf.gql.graphql_fields) = "conversationID: String!, contactsID: [String!]!";
    option (protobuf.gql.graphql_type) = "Mutation";
  };
  rpc ConversationExclude(ConversationManageMembersInput) returns (berty.entity.Conversation) {
    option (protobuf.gql.graphql_fields) = "conversationID: String!, contactsID: [String!]!";
    option (protobuf.gql.graphql_type) = "Mutation";
  };
  rpc ConversationAddMessage(ConversationAddMessageInput) returns (berty.p2p.Event) {
    option (protobuf.gql.graphql_fields) = "conversationID: String!, message: String!";
    option (protobuf.gql.graphql_type) = "Mutation";
  };

  //rpc ConversationLeave(berty.entity.Conversation) returns (berty.entity.Conversation);
  //rpc ConversationJoinRequest(berty.entity.Conversation) returns (berty.entity.Conversation);
  //rpc ConverstionAcceptJoinRequest(berty.entity.Conversation) returns (berty.entity.Conversation);

  //
  // Devtools
  //

  // HandleEvent is the unencrypted (and unsafe) version of HandleEnvelope.
  // it's only exposed over the node API, it should be completely deactivated in public releases
  rpc HandleEvent(berty.p2p.Event) returns (Void) {};

  rpc GenerateFakeData(Void) returns (Void) {
    option (protobuf.gql.graphql_type) = "Mutation";
  };
}

message ContactRequestInput {
  berty.entity.Contact contact = 1;
  string intro_text = 2;
}

message ConversationAddMessageInput {
  berty.entity.Conversation conversation = 1;
  berty.entity.Message message = 2;
}

message EventStreamInput {
  berty.p2p.Event filter = 1;
}

message EventListInput {
  uint32 limit = 1;
  berty.p2p.Event filter = 2;
}

message ConversationManageMembersInput {
  berty.entity.Conversation conversation = 1;
  repeated berty.entity.ConversationMember members = 2;
}

message Void {}
