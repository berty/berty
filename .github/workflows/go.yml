name: Go
on:
  push:
    tags:
      - v*
    branches:
      - master
    paths:
      - "go/**"
      - "!go/**.md"
      - ".goreleaser"
      - "go.*"
      - "**.go"
      - ".github/workflows/go.yml"
  pull_request:
    paths:
      - "go/**"
      - "!go/**.md"
      - ".goreleaser"
      - "go.*"
      - "**.go"
      - ".github/workflows/go.yml"

jobs:
  goreleaser-dryrun:
    name: "GoReleaser (dry-run)"
    runs-on: ubuntu-latest
    needs: golangci-lint
    strategy:
      matrix:
        golang: ['1.16.x']
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Install libgl
        run: |
          sudo apt update
          sudo apt install -f
          sudo apt install -f -y libgl1-mesa-glx libgl1-mesa-dev xorg-dev
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.golang }}
      - name: Cache Go modules
        uses: actions/cache@v2.1.6
        with:
          path: ~/go/pkg/mod
          key:          ${{ runner.os }}-go-${{ matrix.golang }}-v1-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.golang }}-v1-
      - name: Run GoReleaser (Dry Run)
        uses: goreleaser/goreleaser-action@v2.7.0
        with:
          version: latest
          args: release --rm-dist --snapshot --skip-publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  golangci-lint:
    name: "GolangCI-lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2.5.2
        with:
          version: v1.31
          working-directory: go
          args: --timeout=10m
          # only-new-issues: true

  # this is unusual to have a job that checks the unstable tests.
  #
  # reason: some tests are unstable, they works, but not always;
  #         this job checks that they are working sometimes.
  #         if this job fails, then a tests switched from "unstable" to "broken".
  #
  #         summary: this job checks that "unstable tests" do not become "broken tests".
  #
  # we hope we can remove this job because all the tests are stable 100% of the time :)
  unstable-tests:
    name: "Unstable tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        golang: ['1.16.x']
    env:
      OS: ubuntu-latest
      GOLANG: ${{ matrix.golang }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.golang }}
      - name: Cache Go modules
        uses: actions/cache@v2.1.6
        with:
          path: ~/go/pkg/mod
          key:          ${{ runner.os }}-go-${{ matrix.golang }}-v1-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.golang }}-v1-
      - name: Avoid triggering make generate
        run: touch go/gen.sum
      - name: Fetch dependencies
        run: go mod download
      - name: Compile the testing binaries
        run: |
          pushd ./go/pkg/bertyprotocol  && go test -c -o ./tests.bin . && popd
          pushd ./go/pkg/bertymessenger && go test -tags fts5 -c -o ./tests.bin . && popd
      - name: Check go.mod and go.sum
        run: |
          go mod tidy -v
          git --no-pager diff go.mod go.sum
          git --no-pager diff --quiet go.mod go.sum
      - name: Run fast unstable tests
        working-directory: go
        env:
          TEST_SPEED: fast
          TEST_STABILITY: unstable
        run: make go.unstable-tests
      # FIXME: coverage

  go-tests-on-linux:
    name: "Stable tests (linux)"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        golang:
          - 1.15.x
          - 1.16.x
          #- tip
    env:
      OS: ubuntu-latest
      GOLANG: ${{ matrix.golang }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.golang }}
      - name: Cache Go modules
        uses: actions/cache@v2.1.6
        with:
          path: ~/go/pkg/mod
          key:          ${{ runner.os }}-go-${{ matrix.golang }}-v1-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.golang }}-v1-
      - name: Compile the project on Unix-like operating systems
        working-directory: go
        run: |
          touch gen.sum # avoid triggering make generate
          make go.install
      - name: Check go.mod and go.sum
        run: |
          go mod tidy -v
          git --no-pager diff go.mod go.sum
          git --no-pager diff --quiet go.mod go.sum
      - name: Run fast tests multiple times
        working-directory: go
        env:
          TEST_SPEED: fast
          GO_TEST_OPTS: -test.timeout=600s -count 1 -tags fts5
        run: set -o pipefail; make go.unittest | tee test_log.txt
      - name: Run all tests
        working-directory: go
        env:
          TEST_SPEED: any
          GO_TEST_OPTS: -test.timeout=600s -count 1 -tags fts5
        run: make go.unittest
      - name: Run all tests with race flag and generate coverage
        working-directory: go
        env:
          TEST_SPEED: any
          GO_TEST_OPTS: -test.timeout=1200s -count=1 -race -cover -tags fts5 -coverprofile=coverage.txt -covermode=atomic
        run: make go.unittest
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2.0.1
        with:
          file: ./go/coverage.txt
          flags: go.unittests
          env_vars: OS,GOLANG
          name: codecov-umbrella
          fail_ci_if_error: false

  go-tests-on-windows:
    name: "Stable tests (windows)"
    runs-on: windows-latest
    strategy:
      matrix:
        golang: ['1.16.x']
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.golang }}
      - name: Cache Go modules
        uses: actions/cache@v2.1.6
        with:
          path: ~/go/pkg/mod
          key:          ${{ runner.os }}-go-${{ matrix.golang }}-v1-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.golang }}-v1-
      - name: Compile the project on Windows
        run: go.exe install -buildmode=exe ./go/cmd/...
      - name: Check go.mod and go.sum
        run: |
          go mod tidy -v
          git --no-pager diff go.mod go.sum
          git --no-pager diff --quiet go.mod go.sum
      - name: Run fast tests multiple times
        working-directory: go
        env:
          TEST_SPEED: fast
        run: go.exe test ./... -tags fts5 -buildmode=exe -timeout=600s -count=5
      - name: Run all tests
        working-directory: go
        env:
          TEST_SPEED: any
        run: go.exe test ./... -tags fts5 -buildmode=exe -timeout=600s -count=1
      # broken
      #- name: Run all tests with race flag and generate coverage
      #  working-directory: go
      #  env:
      #    TEST_SPEED: any
      #  run: go.exe test ./... -buildmode=exe -v -timeout=1200s -count=1 -tags fts5 -race -cover -coverprofile=coverage.txt -covermode=atomic
      #- name: Upload coverage to Codecov
      #  uses: codecov/codecov-action@v2.0.1
      #  with:
      #    file: ./coverage.txt
      #    flags: unittests
      #    env_vars: OS,GOLANG
      #    name: codecov-umbrella
      #    fail_ci_if_error: false

  go-install-on-darwin:
    name: "make install (darwin)"
    runs-on: macos-latest
    strategy:
      matrix:
        golang: ['1.16.x']
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.golang }}
      - name: Cache Go modules
        uses: actions/cache@v2.1.6
        with:
          path: ~/go/pkg/mod
          key:          ${{ runner.os }}-go-${{ matrix.golang }}-v1-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.golang }}-v1-
      - name: Install the project on Darwin
        run: cd go && make install
      - name: Check go.mod and go.sum
        run: |
          go mod tidy -v
          git --no-pager diff go.mod go.sum
          git --no-pager diff --quiet go.mod go.sum

  # TODO: consider adding various GOARCH check per OS.
  #       i.e., to validate that we build on 32/64bit.
