// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: go-internal/testutil.proto

package testutil

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EchoTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EchoTest) Reset() {
	*x = EchoTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_testutil_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoTest) ProtoMessage() {}

func (x *EchoTest) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_testutil_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoTest.ProtoReflect.Descriptor instead.
func (*EchoTest) Descriptor() ([]byte, []int) {
	return file_go_internal_testutil_proto_rawDescGZIP(), []int{0}
}

type EchoStreamTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EchoStreamTest) Reset() {
	*x = EchoStreamTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_testutil_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoStreamTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoStreamTest) ProtoMessage() {}

func (x *EchoStreamTest) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_testutil_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoStreamTest.ProtoReflect.Descriptor instead.
func (*EchoStreamTest) Descriptor() ([]byte, []int) {
	return file_go_internal_testutil_proto_rawDescGZIP(), []int{1}
}

type EchoDuplexTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EchoDuplexTest) Reset() {
	*x = EchoDuplexTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_testutil_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoDuplexTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoDuplexTest) ProtoMessage() {}

func (x *EchoDuplexTest) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_testutil_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoDuplexTest.ProtoReflect.Descriptor instead.
func (*EchoDuplexTest) Descriptor() ([]byte, []int) {
	return file_go_internal_testutil_proto_rawDescGZIP(), []int{2}
}

type EchoTest_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delay        int64  `protobuf:"varint,1,opt,name=delay,proto3" json:"delay,omitempty"`
	Echo         string `protobuf:"bytes,2,opt,name=echo,proto3" json:"echo,omitempty"`
	TriggerError bool   `protobuf:"varint,3,opt,name=trigger_error,json=triggerError,proto3" json:"trigger_error,omitempty"`
}

func (x *EchoTest_Request) Reset() {
	*x = EchoTest_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_testutil_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoTest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoTest_Request) ProtoMessage() {}

func (x *EchoTest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_testutil_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoTest_Request.ProtoReflect.Descriptor instead.
func (*EchoTest_Request) Descriptor() ([]byte, []int) {
	return file_go_internal_testutil_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EchoTest_Request) GetDelay() int64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *EchoTest_Request) GetEcho() string {
	if x != nil {
		return x.Echo
	}
	return ""
}

func (x *EchoTest_Request) GetTriggerError() bool {
	if x != nil {
		return x.TriggerError
	}
	return false
}

type EchoTest_Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Echo string `protobuf:"bytes,1,opt,name=echo,proto3" json:"echo,omitempty"`
}

func (x *EchoTest_Reply) Reset() {
	*x = EchoTest_Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_testutil_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoTest_Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoTest_Reply) ProtoMessage() {}

func (x *EchoTest_Reply) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_testutil_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoTest_Reply.ProtoReflect.Descriptor instead.
func (*EchoTest_Reply) Descriptor() ([]byte, []int) {
	return file_go_internal_testutil_proto_rawDescGZIP(), []int{0, 1}
}

func (x *EchoTest_Reply) GetEcho() string {
	if x != nil {
		return x.Echo
	}
	return ""
}

type EchoStreamTest_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delay        int64  `protobuf:"varint,1,opt,name=delay,proto3" json:"delay,omitempty"`
	Echo         string `protobuf:"bytes,2,opt,name=echo,proto3" json:"echo,omitempty"`
	TriggerError bool   `protobuf:"varint,3,opt,name=trigger_error,json=triggerError,proto3" json:"trigger_error,omitempty"`
}

func (x *EchoStreamTest_Request) Reset() {
	*x = EchoStreamTest_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_testutil_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoStreamTest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoStreamTest_Request) ProtoMessage() {}

func (x *EchoStreamTest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_testutil_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoStreamTest_Request.ProtoReflect.Descriptor instead.
func (*EchoStreamTest_Request) Descriptor() ([]byte, []int) {
	return file_go_internal_testutil_proto_rawDescGZIP(), []int{1, 0}
}

func (x *EchoStreamTest_Request) GetDelay() int64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *EchoStreamTest_Request) GetEcho() string {
	if x != nil {
		return x.Echo
	}
	return ""
}

func (x *EchoStreamTest_Request) GetTriggerError() bool {
	if x != nil {
		return x.TriggerError
	}
	return false
}

type EchoStreamTest_Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Echo string `protobuf:"bytes,1,opt,name=echo,proto3" json:"echo,omitempty"`
}

func (x *EchoStreamTest_Reply) Reset() {
	*x = EchoStreamTest_Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_testutil_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoStreamTest_Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoStreamTest_Reply) ProtoMessage() {}

func (x *EchoStreamTest_Reply) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_testutil_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoStreamTest_Reply.ProtoReflect.Descriptor instead.
func (*EchoStreamTest_Reply) Descriptor() ([]byte, []int) {
	return file_go_internal_testutil_proto_rawDescGZIP(), []int{1, 1}
}

func (x *EchoStreamTest_Reply) GetEcho() string {
	if x != nil {
		return x.Echo
	}
	return ""
}

type EchoDuplexTest_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Echo         string `protobuf:"bytes,1,opt,name=echo,proto3" json:"echo,omitempty"`
	TriggerError bool   `protobuf:"varint,2,opt,name=trigger_error,json=triggerError,proto3" json:"trigger_error,omitempty"`
}

func (x *EchoDuplexTest_Request) Reset() {
	*x = EchoDuplexTest_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_testutil_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoDuplexTest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoDuplexTest_Request) ProtoMessage() {}

func (x *EchoDuplexTest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_testutil_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoDuplexTest_Request.ProtoReflect.Descriptor instead.
func (*EchoDuplexTest_Request) Descriptor() ([]byte, []int) {
	return file_go_internal_testutil_proto_rawDescGZIP(), []int{2, 0}
}

func (x *EchoDuplexTest_Request) GetEcho() string {
	if x != nil {
		return x.Echo
	}
	return ""
}

func (x *EchoDuplexTest_Request) GetTriggerError() bool {
	if x != nil {
		return x.TriggerError
	}
	return false
}

type EchoDuplexTest_Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Echo string `protobuf:"bytes,1,opt,name=echo,proto3" json:"echo,omitempty"`
}

func (x *EchoDuplexTest_Reply) Reset() {
	*x = EchoDuplexTest_Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_internal_testutil_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoDuplexTest_Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoDuplexTest_Reply) ProtoMessage() {}

func (x *EchoDuplexTest_Reply) ProtoReflect() protoreflect.Message {
	mi := &file_go_internal_testutil_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoDuplexTest_Reply.ProtoReflect.Descriptor instead.
func (*EchoDuplexTest_Reply) Descriptor() ([]byte, []int) {
	return file_go_internal_testutil_proto_rawDescGZIP(), []int{2, 1}
}

func (x *EchoDuplexTest_Reply) GetEcho() string {
	if x != nil {
		return x.Echo
	}
	return ""
}

var File_go_internal_testutil_proto protoreflect.FileDescriptor

var file_go_internal_testutil_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x67, 0x6f, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x22, 0x81, 0x01, 0x0a, 0x08, 0x45, 0x63, 0x68, 0x6f, 0x54,
	0x65, 0x73, 0x74, 0x1a, 0x58, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x1b, 0x0a,
	0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x45,
	0x63, 0x68, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x58, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x63,
	0x68, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x1b, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x63, 0x68, 0x6f, 0x22, 0x71, 0x0a, 0x0e, 0x45, 0x63, 0x68, 0x6f, 0x44, 0x75, 0x70, 0x6c,
	0x65, 0x78, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x1b, 0x0a, 0x05, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x32, 0xfd, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x45, 0x63, 0x68, 0x6f, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x45,
	0x63, 0x68, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x45, 0x63, 0x68,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x30, 0x01, 0x12,
	0x56, 0x0a, 0x0e, 0x45, 0x63, 0x68, 0x6f, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x45, 0x63, 0x68,
	0x6f, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x45,
	0x63, 0x68, 0x6f, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x42, 0x27, 0x5a, 0x25, 0x62, 0x65, 0x72, 0x74, 0x79,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x62, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x67, 0x6f, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_internal_testutil_proto_rawDescOnce sync.Once
	file_go_internal_testutil_proto_rawDescData = file_go_internal_testutil_proto_rawDesc
)

func file_go_internal_testutil_proto_rawDescGZIP() []byte {
	file_go_internal_testutil_proto_rawDescOnce.Do(func() {
		file_go_internal_testutil_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_internal_testutil_proto_rawDescData)
	})
	return file_go_internal_testutil_proto_rawDescData
}

var file_go_internal_testutil_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_go_internal_testutil_proto_goTypes = []any{
	(*EchoTest)(nil),               // 0: testutil.EchoTest
	(*EchoStreamTest)(nil),         // 1: testutil.EchoStreamTest
	(*EchoDuplexTest)(nil),         // 2: testutil.EchoDuplexTest
	(*EchoTest_Request)(nil),       // 3: testutil.EchoTest.Request
	(*EchoTest_Reply)(nil),         // 4: testutil.EchoTest.Reply
	(*EchoStreamTest_Request)(nil), // 5: testutil.EchoStreamTest.Request
	(*EchoStreamTest_Reply)(nil),   // 6: testutil.EchoStreamTest.Reply
	(*EchoDuplexTest_Request)(nil), // 7: testutil.EchoDuplexTest.Request
	(*EchoDuplexTest_Reply)(nil),   // 8: testutil.EchoDuplexTest.Reply
}
var file_go_internal_testutil_proto_depIdxs = []int32{
	3, // 0: testutil.TestService.EchoTest:input_type -> testutil.EchoTest.Request
	5, // 1: testutil.TestService.EchoStreamTest:input_type -> testutil.EchoStreamTest.Request
	7, // 2: testutil.TestService.EchoDuplexTest:input_type -> testutil.EchoDuplexTest.Request
	4, // 3: testutil.TestService.EchoTest:output_type -> testutil.EchoTest.Reply
	6, // 4: testutil.TestService.EchoStreamTest:output_type -> testutil.EchoStreamTest.Reply
	8, // 5: testutil.TestService.EchoDuplexTest:output_type -> testutil.EchoDuplexTest.Reply
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_go_internal_testutil_proto_init() }
func file_go_internal_testutil_proto_init() {
	if File_go_internal_testutil_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_internal_testutil_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EchoTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_testutil_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EchoStreamTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_testutil_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*EchoDuplexTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_testutil_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*EchoTest_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_testutil_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*EchoTest_Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_testutil_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*EchoStreamTest_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_testutil_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*EchoStreamTest_Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_testutil_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*EchoDuplexTest_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_internal_testutil_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*EchoDuplexTest_Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_internal_testutil_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_internal_testutil_proto_goTypes,
		DependencyIndexes: file_go_internal_testutil_proto_depIdxs,
		MessageInfos:      file_go_internal_testutil_proto_msgTypes,
	}.Build()
	File_go_internal_testutil_proto = out.File
	file_go_internal_testutil_proto_rawDesc = nil
	file_go_internal_testutil_proto_goTypes = nil
	file_go_internal_testutil_proto_depIdxs = nil
}
