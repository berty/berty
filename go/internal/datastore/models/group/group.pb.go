// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iface/datastore/models/group/group.proto

package group

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "berty.tech/go/internal/crypto/group"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Group struct {
	AccountID            string    `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty" gorm:"primary_key;unique"`
	Sigchain             []byte    `protobuf:"bytes,2,opt,name=sigchain,proto3" json:"sigchain,omitempty"`
	RendezvousSeed       []byte    `protobuf:"bytes,3,opt,name=rendezvous_seed,json=rendezvousSeed,proto3" json:"rendezvous_seed,omitempty"`
	CreatorPubKeyBytes   []byte    `protobuf:"bytes,4,opt,name=creator_pub_key_bytes,json=creatorPubKeyBytes,proto3" json:"creator_pub_key_bytes,omitempty"`
	CreatedAt            time.Time `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt            time.Time `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d23b70981a0329c, []int{0}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *Group) GetSigchain() []byte {
	if m != nil {
		return m.Sigchain
	}
	return nil
}

func (m *Group) GetRendezvousSeed() []byte {
	if m != nil {
		return m.RendezvousSeed
	}
	return nil
}

func (m *Group) GetCreatorPubKeyBytes() []byte {
	if m != nil {
		return m.CreatorPubKeyBytes
	}
	return nil
}

func (m *Group) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Group) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*Group)(nil), "group.Group")
}

func init() {
	proto.RegisterFile("iface/datastore/models/group/group.proto", fileDescriptor_8d23b70981a0329c)
}

var fileDescriptor_8d23b70981a0329c = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x86, 0xbd, 0x6e, 0xed, 0xda, 0xdb, 0xd2, 0x82, 0x68, 0x41, 0xd5, 0x41, 0x32, 0x3e, 0xb4,
	0xa2, 0x14, 0x89, 0x36, 0xb7, 0x04, 0x02, 0x56, 0x12, 0x82, 0xc9, 0x25, 0x38, 0x39, 0xe5, 0x22,
	0x56, 0xbb, 0x63, 0x59, 0xc4, 0xd2, 0x2a, 0xab, 0xdd, 0x80, 0xf2, 0x14, 0x39, 0xe6, 0x91, 0x7c,
	0xf4, 0x13, 0x38, 0x41, 0x79, 0x83, 0x3c, 0x41, 0xd0, 0x4a, 0x4e, 0x6e, 0x81, 0x5c, 0xc4, 0xcc,
	0x3f, 0xff, 0xff, 0x0d, 0x8c, 0x16, 0xbb, 0xc9, 0x9c, 0x50, 0xf0, 0x19, 0x91, 0xa4, 0x90, 0x5c,
	0x80, 0x9f, 0x72, 0x06, 0xcb, 0xc2, 0x8f, 0x05, 0x57, 0x79, 0xf3, 0xf5, 0x72, 0xc1, 0x25, 0x37,
	0x7a, 0xba, 0xb1, 0x9c, 0x98, 0xf3, 0x78, 0x09, 0xbe, 0x16, 0x23, 0x35, 0xf7, 0x65, 0x92, 0x42,
	0x21, 0x49, 0xda, 0xfa, 0xac, 0x5f, 0x0d, 0x91, 0x8a, 0x32, 0x97, 0xbc, 0x21, 0xb4, 0xb8, 0x30,
	0x85, 0x34, 0x02, 0xd1, 0xfa, 0xbe, 0xc7, 0x3c, 0xe6, 0xba, 0xf4, 0xeb, 0xaa, 0x51, 0xc7, 0xeb,
	0x2e, 0xee, 0x1d, 0xd7, 0x66, 0xe3, 0x08, 0x0f, 0x9a, 0x54, 0xc2, 0x4c, 0x34, 0x42, 0xee, 0x30,
	0xf8, 0x53, 0x6d, 0x9c, 0xe1, 0x84, 0x52, 0xae, 0x32, 0x39, 0x3d, 0x7c, 0xda, 0x38, 0x3f, 0x63,
	0x2e, 0xd2, 0xdd, 0x71, 0x2e, 0x92, 0x94, 0x88, 0x32, 0xbc, 0x84, 0x72, 0x4f, 0x65, 0xc9, 0x95,
	0x82, 0xf1, 0xec, 0x93, 0xce, 0x4e, 0x99, 0x61, 0xe1, 0x41, 0x91, 0xc4, 0x74, 0x41, 0x92, 0xcc,
	0xec, 0x8e, 0x90, 0xfb, 0x65, 0xf6, 0xd2, 0x1b, 0xbf, 0xf1, 0x37, 0x01, 0x19, 0x83, 0x9b, 0x6b,
	0xae, 0x8a, 0xb0, 0x00, 0x60, 0xe6, 0x07, 0x6d, 0xf9, 0xfa, 0x2a, 0x9f, 0x01, 0x30, 0xe3, 0x1f,
	0xfe, 0x41, 0x05, 0x10, 0xc9, 0x45, 0x98, 0xab, 0xa8, 0x5e, 0x14, 0x46, 0xa5, 0x84, 0xc2, 0xfc,
	0xa8, 0xed, 0x46, 0x3b, 0x3c, 0x55, 0xd1, 0x09, 0x94, 0x41, 0x3d, 0x31, 0x0e, 0x30, 0xd6, 0x2a,
	0xb0, 0x90, 0x48, 0xb3, 0x37, 0x42, 0xee, 0xe7, 0xff, 0x96, 0xd7, 0x1c, 0xcf, 0xdb, 0x1e, 0xcf,
	0x3b, 0xdf, 0x1e, 0x2f, 0x18, 0xac, 0x36, 0x4e, 0xe7, 0xf6, 0xde, 0x41, 0xb3, 0x61, 0x9b, 0x9b,
	0xc8, 0x1a, 0xa2, 0x72, 0xb6, 0x85, 0xf4, 0xdf, 0x03, 0x69, 0x73, 0x13, 0x19, 0xec, 0xaf, 0x2a,
	0x1b, 0xad, 0x2b, 0x1b, 0x3d, 0x54, 0x36, 0xba, 0x7b, 0xb4, 0x3b, 0x17, 0x7f, 0x23, 0x10, 0xb2,
	0xf4, 0x24, 0xd0, 0x85, 0x4f, 0xeb, 0x9f, 0xfe, 0xd6, 0x23, 0x88, 0xfa, 0x7a, 0xd1, 0xce, 0x73,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x22, 0x24, 0x0b, 0x2b, 0x02, 0x00, 0x00,
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGroup(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGroup(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.CreatorPubKeyBytes) > 0 {
		i -= len(m.CreatorPubKeyBytes)
		copy(dAtA[i:], m.CreatorPubKeyBytes)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.CreatorPubKeyBytes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RendezvousSeed) > 0 {
		i -= len(m.RendezvousSeed)
		copy(dAtA[i:], m.RendezvousSeed)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.RendezvousSeed)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sigchain) > 0 {
		i -= len(m.Sigchain)
		copy(dAtA[i:], m.Sigchain)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Sigchain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountID) > 0 {
		i -= len(m.AccountID)
		copy(dAtA[i:], m.AccountID)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.AccountID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Sigchain)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.RendezvousSeed)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.CreatorPubKeyBytes)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovGroup(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovGroup(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroup(x uint64) (n int) {
	return sovGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigchain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sigchain = append(m.Sigchain[:0], dAtA[iNdEx:postIndex]...)
			if m.Sigchain == nil {
				m.Sigchain = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RendezvousSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RendezvousSeed = append(m.RendezvousSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.RendezvousSeed == nil {
				m.RendezvousSeed = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorPubKeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorPubKeyBytes = append(m.CreatorPubKeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.CreatorPubKeyBytes == nil {
				m.CreatorPubKeyBytes = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroup
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGroup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGroup(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGroup
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGroup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup   = fmt.Errorf("proto: integer overflow")
)
