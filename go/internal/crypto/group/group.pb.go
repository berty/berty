// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iface/crypto/groups/group.proto

package group

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A group is a set of devices (members) communicating together
type Group struct {
	// An arbitrary unique identifier for this group, used the creator pubkey for disambiguation
	ID []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The public key of the device which created the group
	CreatorPubKeyBytes []byte `protobuf:"bytes,2,opt,name=creator_pub_key_bytes,json=creatorPubKeyBytes,proto3" json:"creator_pub_key_bytes,omitempty"`
	// A rendezvous seed for the current group
	RendezvousSeed []byte `protobuf:"bytes,3,opt,name=rendezvous_seed,json=rendezvousSeed,proto3" json:"rendezvous_seed,omitempty"`
	// A list of the group members
	MemberObjects        []*GroupMember `protobuf:"bytes,4,rep,name=member_objects,json=memberObjects,proto3" json:"member_objects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a221f8e2e297a6, []int{0}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Group) GetCreatorPubKeyBytes() []byte {
	if m != nil {
		return m.CreatorPubKeyBytes
	}
	return nil
}

func (m *Group) GetRendezvousSeed() []byte {
	if m != nil {
		return m.RendezvousSeed
	}
	return nil
}

func (m *Group) GetMemberObjects() []*GroupMember {
	if m != nil {
		return m.MemberObjects
	}
	return nil
}

func init() {
	proto.RegisterType((*Group)(nil), "groups.Group")
}

func init() { proto.RegisterFile("iface/crypto/groups/group.proto", fileDescriptor_a6a221f8e2e297a6) }

var fileDescriptor_a6a221f8e2e297a6 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd0, 0xcf, 0x4a, 0xfc, 0x30,
	0x10, 0x07, 0xf0, 0x5f, 0xba, 0x3f, 0xf7, 0x10, 0x75, 0x85, 0xf8, 0x87, 0xb2, 0x87, 0xee, 0xa2,
	0xa0, 0x7b, 0x6a, 0x50, 0xf1, 0xe2, 0x71, 0x11, 0x44, 0x44, 0x94, 0x7a, 0xf3, 0x12, 0x9a, 0x74,
	0xb6, 0x56, 0xad, 0x53, 0x92, 0x54, 0xa8, 0x4f, 0xe2, 0x9b, 0xf8, 0x0a, 0x1e, 0x7d, 0x02, 0x91,
	0xfa, 0x22, 0xd2, 0xa4, 0xe0, 0x45, 0x4f, 0x19, 0xbe, 0xf3, 0x21, 0xcc, 0x0c, 0x9d, 0x14, 0x8b,
	0x54, 0x01, 0x57, 0xba, 0xa9, 0x2c, 0xf2, 0x5c, 0x63, 0x5d, 0x19, 0xff, 0xc4, 0x95, 0x46, 0x8b,
	0x6c, 0xe8, 0xb3, 0xf1, 0x24, 0x47, 0xcc, 0x1f, 0x80, 0xbb, 0x54, 0xd6, 0x0b, 0x6e, 0x8b, 0x12,
	0x8c, 0x4d, 0xcb, 0x1e, 0x8e, 0x77, 0xff, 0xfc, 0x49, 0x94, 0x50, 0x4a, 0xd0, 0xbd, 0xdb, 0xc8,
	0x31, 0x47, 0x57, 0xf2, 0xae, 0xf2, 0xe9, 0xf6, 0x2b, 0xa1, 0x4b, 0xa7, 0x1d, 0x66, 0x5b, 0x34,
	0x28, 0xb2, 0x90, 0x4c, 0xc9, 0x6c, 0x65, 0x3e, 0x6c, 0x3f, 0x26, 0xc1, 0xd9, 0x49, 0x12, 0x14,
	0x19, 0xdb, 0xa7, 0x9b, 0x4a, 0x43, 0x6a, 0x51, 0x8b, 0xaa, 0x96, 0xe2, 0x1e, 0x1a, 0x21, 0x1b,
	0x0b, 0x26, 0x0c, 0x3a, 0x9a, 0xb0, 0xbe, 0x79, 0x55, 0xcb, 0x73, 0x68, 0xe6, 0x5d, 0x87, 0xed,
	0xd1, 0x35, 0x0d, 0x8f, 0x19, 0x3c, 0x3f, 0x61, 0x6d, 0x84, 0x01, 0xc8, 0xc2, 0x81, 0xc3, 0xa3,
	0x9f, 0xf8, 0x1a, 0x20, 0x63, 0xc7, 0x74, 0xe4, 0x67, 0x14, 0x28, 0xef, 0x40, 0x59, 0x13, 0xfe,
	0x9f, 0x0e, 0x66, 0xcb, 0x07, 0xeb, 0xb1, 0xdf, 0x23, 0x76, 0xa3, 0x5d, 0x38, 0x92, 0xac, 0x7a,
	0x7a, 0xe9, 0xe5, 0xfc, 0xe8, 0xad, 0x8d, 0xc8, 0x7b, 0x1b, 0x91, 0xcf, 0x36, 0x22, 0x2f, 0x5f,
	0xd1, 0xbf, 0x9b, 0x1d, 0x09, 0xda, 0x36, 0xb1, 0x05, 0x75, 0xcb, 0x15, 0x6a, 0xe0, 0xbf, 0x5c,
	0x46, 0x0e, 0xdd, 0xde, 0x87, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x33, 0x9d, 0x99, 0xc7, 0x81,
	0x01, 0x00, 0x00,
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MemberObjects) > 0 {
		for iNdEx := len(m.MemberObjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MemberObjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RendezvousSeed) > 0 {
		i -= len(m.RendezvousSeed)
		copy(dAtA[i:], m.RendezvousSeed)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.RendezvousSeed)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CreatorPubKeyBytes) > 0 {
		i -= len(m.CreatorPubKeyBytes)
		copy(dAtA[i:], m.CreatorPubKeyBytes)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.CreatorPubKeyBytes)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.CreatorPubKeyBytes)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.RendezvousSeed)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if len(m.MemberObjects) > 0 {
		for _, e := range m.MemberObjects {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroup(x uint64) (n int) {
	return sovGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorPubKeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorPubKeyBytes = append(m.CreatorPubKeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.CreatorPubKeyBytes == nil {
				m.CreatorPubKeyBytes = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RendezvousSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RendezvousSeed = append(m.RendezvousSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.RendezvousSeed == nil {
				m.RendezvousSeed = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberObjects = append(m.MemberObjects, &GroupMember{})
			if err := m.MemberObjects[len(m.MemberObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroup
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGroup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGroup(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGroup
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGroup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup   = fmt.Errorf("proto: integer overflow")
)
