// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iface/crypto/groups/group_member.proto

package group

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A group member identifies a device which is part of a group
type GroupMember struct {
	// The device public key (should we replace it with a pub key unique to this group here ?)
	PublicKeyBytes []byte `protobuf:"bytes,1,opt,name=public_key_bytes,json=publicKeyBytes,proto3" json:"public_key_bytes,omitempty" gorm:"primary_key"`
	// The account id of this group member (same here, should we use aliases unique to this conversation? should we set this only when an identity has been disclosed?)
	AccountID []byte `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" gorm:"primary_key"`
	// A secret for this member in this group
	GroupSecret []byte `protobuf:"bytes,3,opt,name=group_secret,json=groupSecret,proto3" json:"group_secret,omitempty"`
	// The current derivation state
	DerivationState []byte `protobuf:"bytes,4,opt,name=derivation_state,json=derivationState,proto3" json:"derivation_state,omitempty"`
	// The current derivation counter
	DerivationCounter    uint64   `protobuf:"varint,5,opt,name=derivation_counter,json=derivationCounter,proto3" json:"derivation_counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMember) Reset()         { *m = GroupMember{} }
func (m *GroupMember) String() string { return proto.CompactTextString(m) }
func (*GroupMember) ProtoMessage()    {}
func (*GroupMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_1416383cb53daf95, []int{0}
}
func (m *GroupMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMember.Merge(m, src)
}
func (m *GroupMember) XXX_Size() int {
	return m.Size()
}
func (m *GroupMember) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMember.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMember proto.InternalMessageInfo

func (m *GroupMember) GetPublicKeyBytes() []byte {
	if m != nil {
		return m.PublicKeyBytes
	}
	return nil
}

func (m *GroupMember) GetAccountID() []byte {
	if m != nil {
		return m.AccountID
	}
	return nil
}

func (m *GroupMember) GetGroupSecret() []byte {
	if m != nil {
		return m.GroupSecret
	}
	return nil
}

func (m *GroupMember) GetDerivationState() []byte {
	if m != nil {
		return m.DerivationState
	}
	return nil
}

func (m *GroupMember) GetDerivationCounter() uint64 {
	if m != nil {
		return m.DerivationCounter
	}
	return 0
}

func init() {
	proto.RegisterType((*GroupMember)(nil), "groups.GroupMember")
}

func init() {
	proto.RegisterFile("iface/crypto/groups/group_member.proto", fileDescriptor_1416383cb53daf95)
}

var fileDescriptor_1416383cb53daf95 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcb, 0x4c, 0x4b, 0x4c,
	0x4e, 0xd5, 0x4f, 0x2e, 0xaa, 0x2c, 0x28, 0xc9, 0xd7, 0x4f, 0x2f, 0xca, 0x2f, 0x2d, 0x28, 0x86,
	0x50, 0xf1, 0xb9, 0xa9, 0xb9, 0x49, 0xa9, 0x45, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c,
	0x10, 0x29, 0x29, 0x91, 0xf4, 0xfc, 0xf4, 0x7c, 0xb0, 0x90, 0x3e, 0x88, 0x05, 0x91, 0x55, 0x9a,
	0xc0, 0xc4, 0xc5, 0xed, 0x0e, 0x52, 0xe0, 0x0b, 0xd6, 0x23, 0xe4, 0xc0, 0x25, 0x50, 0x50, 0x9a,
	0x94, 0x93, 0x99, 0x1c, 0x9f, 0x9d, 0x5a, 0x19, 0x9f, 0x54, 0x59, 0x92, 0x5a, 0x2c, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0xe3, 0x24, 0xf6, 0xe9, 0x9e, 0xbc, 0x50, 0x7a, 0x7e, 0x51, 0xae, 0x95, 0x52,
	0x41, 0x51, 0x66, 0x6e, 0x62, 0x51, 0x25, 0x48, 0x89, 0x52, 0x10, 0x1f, 0x44, 0xbd, 0x77, 0x6a,
	0xa5, 0x13, 0x48, 0xb5, 0x90, 0x13, 0x17, 0x57, 0x62, 0x72, 0x72, 0x7e, 0x69, 0x5e, 0x49, 0x7c,
	0x66, 0x8a, 0x04, 0x13, 0x58, 0xaf, 0xf2, 0xa3, 0x7b, 0xf2, 0x9c, 0x8e, 0x10, 0x51, 0x4f, 0x17,
	0x1c, 0x06, 0x71, 0x42, 0xb5, 0x79, 0xa6, 0x08, 0x29, 0x72, 0xf1, 0x40, 0x7c, 0x52, 0x9c, 0x9a,
	0x5c, 0x94, 0x5a, 0x22, 0xc1, 0x0c, 0x32, 0x25, 0x88, 0x1b, 0x2c, 0x16, 0x0c, 0x16, 0x12, 0xd2,
	0xe4, 0x12, 0x48, 0x49, 0x2d, 0xca, 0x2c, 0x4b, 0x2c, 0xc9, 0xcc, 0xcf, 0x8b, 0x2f, 0x2e, 0x49,
	0x2c, 0x49, 0x95, 0x60, 0x01, 0x2b, 0xe3, 0x47, 0x88, 0x07, 0x83, 0x84, 0x85, 0x74, 0xb9, 0x84,
	0x90, 0x94, 0x82, 0xed, 0x48, 0x2d, 0x92, 0x60, 0x55, 0x60, 0xd4, 0x60, 0x09, 0x12, 0x44, 0xc8,
	0x38, 0x43, 0x24, 0x9c, 0x4c, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23,
	0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0xa2, 0x94, 0x93, 0x52, 0x8b, 0x4a, 0x2a, 0xf5, 0x4a, 0x52,
	0x93, 0x33, 0xf4, 0x93, 0xf3, 0x8b, 0x52, 0xf5, 0xb1, 0x04, 0x7d, 0x12, 0x1b, 0x38, 0x40, 0x8d,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xe7, 0xbf, 0x4b, 0x98, 0x01, 0x00, 0x00,
}

func (m *GroupMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DerivationCounter != 0 {
		i = encodeVarintGroupMember(dAtA, i, uint64(m.DerivationCounter))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DerivationState) > 0 {
		i -= len(m.DerivationState)
		copy(dAtA[i:], m.DerivationState)
		i = encodeVarintGroupMember(dAtA, i, uint64(len(m.DerivationState)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupSecret) > 0 {
		i -= len(m.GroupSecret)
		copy(dAtA[i:], m.GroupSecret)
		i = encodeVarintGroupMember(dAtA, i, uint64(len(m.GroupSecret)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountID) > 0 {
		i -= len(m.AccountID)
		copy(dAtA[i:], m.AccountID)
		i = encodeVarintGroupMember(dAtA, i, uint64(len(m.AccountID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKeyBytes) > 0 {
		i -= len(m.PublicKeyBytes)
		copy(dAtA[i:], m.PublicKeyBytes)
		i = encodeVarintGroupMember(dAtA, i, uint64(len(m.PublicKeyBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroupMember(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroupMember(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKeyBytes)
	if l > 0 {
		n += 1 + l + sovGroupMember(uint64(l))
	}
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovGroupMember(uint64(l))
	}
	l = len(m.GroupSecret)
	if l > 0 {
		n += 1 + l + sovGroupMember(uint64(l))
	}
	l = len(m.DerivationState)
	if l > 0 {
		n += 1 + l + sovGroupMember(uint64(l))
	}
	if m.DerivationCounter != 0 {
		n += 1 + sovGroupMember(uint64(m.DerivationCounter))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGroupMember(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroupMember(x uint64) (n int) {
	return sovGroupMember(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GroupMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroupMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyBytes = append(m.PublicKeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKeyBytes == nil {
				m.PublicKeyBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroupMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = append(m.AccountID[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountID == nil {
				m.AccountID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSecret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroupMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupSecret = append(m.GroupSecret[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupSecret == nil {
				m.GroupSecret = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivationState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroupMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DerivationState = append(m.DerivationState[:0], dAtA[iNdEx:postIndex]...)
			if m.DerivationState == nil {
				m.DerivationState = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivationCounter", wireType)
			}
			m.DerivationCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DerivationCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroupMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupMember
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroupMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroupMember(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroupMember
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroupMember
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGroupMember
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGroupMember
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGroupMember(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGroupMember
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGroupMember = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroupMember   = fmt.Errorf("proto: integer overflow")
)
