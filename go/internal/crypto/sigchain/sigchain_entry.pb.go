// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iface/crypto/sigchain/sigchain_entry.proto

package sigchain

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SigChainEntry struct {
	EntryHash             []byte    `protobuf:"bytes,1,opt,name=entry_hash,json=entryHash,proto3" json:"entry_hash,omitempty" gorm:"primary_key"`
	EntryTypeCode         uint32    `protobuf:"varint,2,opt,name=entry_type_code,json=entryTypeCode,proto3" json:"entry_type_code,omitempty"`
	ParentEntryHash       []byte    `protobuf:"bytes,3,opt,name=parentEntryHash,proto3" json:"parentEntryHash,omitempty"`
	CreatedAt             time.Time `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	ExpiringAt            time.Time `protobuf:"bytes,5,opt,name=expiring_at,json=expiringAt,proto3,stdtime" json:"expiring_at"`
	SignerPublicKeyBytes  []byte    `protobuf:"bytes,6,opt,name=signer_public_key_bytes,json=signerPublicKeyBytes,proto3" json:"signer_public_key_bytes,omitempty"`
	SubjectPublicKeyBytes []byte    `protobuf:"bytes,7,opt,name=subject_public_key_bytes,json=subjectPublicKeyBytes,proto3" json:"subject_public_key_bytes,omitempty"`
	Signature             []byte    `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}  `json:"-"`
	XXX_unrecognized      []byte    `json:"-"`
	XXX_sizecache         int32     `json:"-"`
}

func (m *SigChainEntry) Reset()         { *m = SigChainEntry{} }
func (m *SigChainEntry) String() string { return proto.CompactTextString(m) }
func (*SigChainEntry) ProtoMessage()    {}
func (*SigChainEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_54029024ad03a53c, []int{0}
}
func (m *SigChainEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigChainEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigChainEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigChainEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigChainEntry.Merge(m, src)
}
func (m *SigChainEntry) XXX_Size() int {
	return m.Size()
}
func (m *SigChainEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SigChainEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SigChainEntry proto.InternalMessageInfo

func (m *SigChainEntry) GetEntryHash() []byte {
	if m != nil {
		return m.EntryHash
	}
	return nil
}

func (m *SigChainEntry) GetEntryTypeCode() uint32 {
	if m != nil {
		return m.EntryTypeCode
	}
	return 0
}

func (m *SigChainEntry) GetParentEntryHash() []byte {
	if m != nil {
		return m.ParentEntryHash
	}
	return nil
}

func (m *SigChainEntry) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *SigChainEntry) GetExpiringAt() time.Time {
	if m != nil {
		return m.ExpiringAt
	}
	return time.Time{}
}

func (m *SigChainEntry) GetSignerPublicKeyBytes() []byte {
	if m != nil {
		return m.SignerPublicKeyBytes
	}
	return nil
}

func (m *SigChainEntry) GetSubjectPublicKeyBytes() []byte {
	if m != nil {
		return m.SubjectPublicKeyBytes
	}
	return nil
}

func (m *SigChainEntry) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*SigChainEntry)(nil), "sigchain.SigChainEntry")
}

func init() {
	proto.RegisterFile("iface/crypto/sigchain/sigchain_entry.proto", fileDescriptor_54029024ad03a53c)
}

var fileDescriptor_54029024ad03a53c = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0x86, 0x3b, 0x56, 0xeb, 0xee, 0xd4, 0xa5, 0x30, 0x54, 0x0d, 0x8b, 0xec, 0x2e, 0x0b, 0x4a,
	0xf0, 0x22, 0x01, 0xa5, 0x14, 0xbc, 0x6b, 0x96, 0x05, 0xc1, 0x1b, 0x89, 0xbd, 0xf2, 0x26, 0x4c,
	0x66, 0x4f, 0x27, 0xa3, 0x4d, 0x66, 0x98, 0x9c, 0x80, 0xf3, 0x16, 0x5e, 0xfa, 0x1c, 0x3e, 0x45,
	0x2f, 0x7d, 0x82, 0x2a, 0xeb, 0x1b, 0xf8, 0x04, 0x32, 0x93, 0x46, 0x61, 0xf5, 0xa6, 0x77, 0x87,
	0xff, 0x3f, 0xdf, 0x7f, 0xe6, 0x87, 0xa1, 0xcf, 0xd5, 0x05, 0x17, 0x90, 0x0a, 0xeb, 0x0c, 0xea,
	0xb4, 0x55, 0x52, 0x54, 0x5c, 0x35, 0x7f, 0x86, 0x02, 0x1a, 0xb4, 0x2e, 0x31, 0x56, 0xa3, 0x66,
	0xa3, 0x41, 0x9d, 0xce, 0xa5, 0xd6, 0xf2, 0x12, 0xd2, 0xa0, 0x97, 0xdd, 0x45, 0x8a, 0xaa, 0x86,
	0x16, 0x79, 0x6d, 0xfa, 0xd5, 0xe9, 0xb1, 0xd4, 0x52, 0x87, 0x31, 0xf5, 0x53, 0xaf, 0x2e, 0xbf,
	0xee, 0xd3, 0xc9, 0x3b, 0x25, 0x57, 0x3e, 0x63, 0xed, 0x83, 0xd9, 0x09, 0xa5, 0xe1, 0x42, 0x51,
	0xf1, 0xb6, 0x8a, 0xc8, 0x82, 0xc4, 0x0f, 0xb2, 0x47, 0xbf, 0xae, 0xe7, 0x4c, 0x6a, 0x5b, 0xbf,
	0x5a, 0x1a, 0xab, 0x6a, 0x6e, 0x5d, 0xf1, 0x11, 0xdc, 0x32, 0x1f, 0x87, 0xcd, 0xd7, 0xbc, 0xad,
	0xd8, 0x33, 0x7a, 0xd4, 0x63, 0xe8, 0x0c, 0x14, 0x42, 0x6f, 0x20, 0xba, 0xb3, 0x20, 0xf1, 0x24,
	0x9f, 0x04, 0xf9, 0xdc, 0x19, 0x58, 0xe9, 0x0d, 0xb0, 0x98, 0x1e, 0x19, 0x6e, 0xa1, 0xc1, 0xf5,
	0x80, 0x46, 0xfb, 0xfe, 0x46, 0xbe, 0x2b, 0xb3, 0x15, 0xa5, 0xc2, 0x02, 0x47, 0xd8, 0x14, 0x1c,
	0xa3, 0xbb, 0x0b, 0x12, 0x1f, 0xbe, 0x98, 0x26, 0x7d, 0xcd, 0x64, 0xa8, 0x99, 0x9c, 0x0f, 0x35,
	0xb3, 0xd1, 0xd5, 0xf5, 0x7c, 0xef, 0xf3, 0xf7, 0x39, 0xc9, 0xc7, 0x37, 0xdc, 0x19, 0xb2, 0x35,
	0x3d, 0x84, 0x4f, 0x46, 0x59, 0xd5, 0x48, 0x9f, 0x72, 0xef, 0x16, 0x29, 0x74, 0x00, 0xcf, 0x90,
	0x9d, 0xd0, 0xc7, 0xad, 0x92, 0x0d, 0xd8, 0xc2, 0x74, 0xe5, 0xa5, 0x12, 0xbe, 0x7e, 0x51, 0x3a,
	0x84, 0x36, 0x3a, 0x08, 0xaf, 0x3f, 0xee, 0xed, 0xb7, 0xc1, 0x7d, 0x03, 0x2e, 0xf3, 0x1e, 0x3b,
	0xa5, 0x51, 0xdb, 0x95, 0x1f, 0x40, 0xe0, 0xbf, 0xdc, 0xfd, 0xc0, 0x3d, 0xbc, 0xf1, 0x77, 0xc0,
	0x27, 0x74, 0xec, 0x03, 0x39, 0x76, 0x16, 0xa2, 0x51, 0xd8, 0xfc, 0x2b, 0x64, 0xa7, 0x57, 0xdb,
	0x19, 0xf9, 0xb6, 0x9d, 0x91, 0x1f, 0xdb, 0x19, 0xf9, 0xf2, 0x73, 0xb6, 0xf7, 0xfe, 0x69, 0x09,
	0x16, 0x5d, 0x82, 0x20, 0xaa, 0x54, 0x68, 0x0b, 0xe9, 0x7f, 0xff, 0x50, 0x79, 0x10, 0x0a, 0xbf,
	0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x15, 0x21, 0x5a, 0xe3, 0x63, 0x02, 0x00, 0x00,
}

func (m *SigChainEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigChainEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigChainEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSigchainEntry(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SubjectPublicKeyBytes) > 0 {
		i -= len(m.SubjectPublicKeyBytes)
		copy(dAtA[i:], m.SubjectPublicKeyBytes)
		i = encodeVarintSigchainEntry(dAtA, i, uint64(len(m.SubjectPublicKeyBytes)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SignerPublicKeyBytes) > 0 {
		i -= len(m.SignerPublicKeyBytes)
		copy(dAtA[i:], m.SignerPublicKeyBytes)
		i = encodeVarintSigchainEntry(dAtA, i, uint64(len(m.SignerPublicKeyBytes)))
		i--
		dAtA[i] = 0x32
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpiringAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpiringAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSigchainEntry(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintSigchainEntry(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.ParentEntryHash) > 0 {
		i -= len(m.ParentEntryHash)
		copy(dAtA[i:], m.ParentEntryHash)
		i = encodeVarintSigchainEntry(dAtA, i, uint64(len(m.ParentEntryHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EntryTypeCode != 0 {
		i = encodeVarintSigchainEntry(dAtA, i, uint64(m.EntryTypeCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EntryHash) > 0 {
		i -= len(m.EntryHash)
		copy(dAtA[i:], m.EntryHash)
		i = encodeVarintSigchainEntry(dAtA, i, uint64(len(m.EntryHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSigchainEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovSigchainEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SigChainEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntryHash)
	if l > 0 {
		n += 1 + l + sovSigchainEntry(uint64(l))
	}
	if m.EntryTypeCode != 0 {
		n += 1 + sovSigchainEntry(uint64(m.EntryTypeCode))
	}
	l = len(m.ParentEntryHash)
	if l > 0 {
		n += 1 + l + sovSigchainEntry(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovSigchainEntry(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpiringAt)
	n += 1 + l + sovSigchainEntry(uint64(l))
	l = len(m.SignerPublicKeyBytes)
	if l > 0 {
		n += 1 + l + sovSigchainEntry(uint64(l))
	}
	l = len(m.SubjectPublicKeyBytes)
	if l > 0 {
		n += 1 + l + sovSigchainEntry(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSigchainEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSigchainEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSigchainEntry(x uint64) (n int) {
	return sovSigchainEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SigChainEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigchainEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigChainEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigChainEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchainEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryHash = append(m.EntryHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EntryHash == nil {
				m.EntryHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryTypeCode", wireType)
			}
			m.EntryTypeCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchainEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryTypeCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentEntryHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchainEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentEntryHash = append(m.ParentEntryHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentEntryHash == nil {
				m.ParentEntryHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchainEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiringAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchainEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpiringAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerPublicKeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchainEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerPublicKeyBytes = append(m.SignerPublicKeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SignerPublicKeyBytes == nil {
				m.SignerPublicKeyBytes = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectPublicKeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchainEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectPublicKeyBytes = append(m.SubjectPublicKeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SubjectPublicKeyBytes == nil {
				m.SubjectPublicKeyBytes = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchainEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigchainEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSigchainEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSigchainEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSigchainEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigchainEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigchainEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSigchainEntry
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSigchainEntry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSigchainEntry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSigchainEntry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSigchainEntry
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSigchainEntry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSigchainEntry   = fmt.Errorf("proto: integer overflow")
)
