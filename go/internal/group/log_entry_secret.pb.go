// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/log_entry_secret.proto

package group

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SecretEntryEnvelope struct {
	EncryptedSecretPayload []byte `protobuf:"bytes,1,opt,name=encrypted_secret_payload,json=encryptedSecretPayload,proto3" json:"encrypted_secret_payload,omitempty"`
	SecretPayloadSignature []byte `protobuf:"bytes,2,opt,name=secret_payload_signature,json=secretPayloadSignature,proto3" json:"secret_payload_signature,omitempty"`
}

func (m *SecretEntryEnvelope) Reset()         { *m = SecretEntryEnvelope{} }
func (m *SecretEntryEnvelope) String() string { return proto.CompactTextString(m) }
func (*SecretEntryEnvelope) ProtoMessage()    {}
func (*SecretEntryEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ccce4ec8e52467, []int{0}
}
func (m *SecretEntryEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretEntryEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecretEntryEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecretEntryEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretEntryEnvelope.Merge(m, src)
}
func (m *SecretEntryEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *SecretEntryEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretEntryEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_SecretEntryEnvelope proto.InternalMessageInfo

func (m *SecretEntryEnvelope) GetEncryptedSecretPayload() []byte {
	if m != nil {
		return m.EncryptedSecretPayload
	}
	return nil
}

func (m *SecretEntryEnvelope) GetSecretPayloadSignature() []byte {
	if m != nil {
		return m.SecretPayloadSignature
	}
	return nil
}

type SecretEntryPayload struct {
	DestMemberPubKey      []byte `protobuf:"bytes,1,opt,name=dest_member_pub_key,json=destMemberPubKey,proto3" json:"dest_member_pub_key,omitempty"`
	DevicePubKey          []byte `protobuf:"bytes,2,opt,name=device_pub_key,json=devicePubKey,proto3" json:"device_pub_key,omitempty"`
	EncryptedDeviceSecret []byte `protobuf:"bytes,3,opt,name=encrypted_device_secret,json=encryptedDeviceSecret,proto3" json:"encrypted_device_secret,omitempty"`
}

func (m *SecretEntryPayload) Reset()         { *m = SecretEntryPayload{} }
func (m *SecretEntryPayload) String() string { return proto.CompactTextString(m) }
func (*SecretEntryPayload) ProtoMessage()    {}
func (*SecretEntryPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ccce4ec8e52467, []int{1}
}
func (m *SecretEntryPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretEntryPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecretEntryPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecretEntryPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretEntryPayload.Merge(m, src)
}
func (m *SecretEntryPayload) XXX_Size() int {
	return m.Size()
}
func (m *SecretEntryPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretEntryPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SecretEntryPayload proto.InternalMessageInfo

func (m *SecretEntryPayload) GetDestMemberPubKey() []byte {
	if m != nil {
		return m.DestMemberPubKey
	}
	return nil
}

func (m *SecretEntryPayload) GetDevicePubKey() []byte {
	if m != nil {
		return m.DevicePubKey
	}
	return nil
}

func (m *SecretEntryPayload) GetEncryptedDeviceSecret() []byte {
	if m != nil {
		return m.EncryptedDeviceSecret
	}
	return nil
}

type DeviceSecret struct {
	DerivationState []byte `protobuf:"bytes,1,opt,name=derivation_state,json=derivationState,proto3" json:"derivation_state,omitempty"`
	Counter         uint64 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *DeviceSecret) Reset()         { *m = DeviceSecret{} }
func (m *DeviceSecret) String() string { return proto.CompactTextString(m) }
func (*DeviceSecret) ProtoMessage()    {}
func (*DeviceSecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ccce4ec8e52467, []int{2}
}
func (m *DeviceSecret) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceSecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceSecret.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceSecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceSecret.Merge(m, src)
}
func (m *DeviceSecret) XXX_Size() int {
	return m.Size()
}
func (m *DeviceSecret) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceSecret.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceSecret proto.InternalMessageInfo

func (m *DeviceSecret) GetDerivationState() []byte {
	if m != nil {
		return m.DerivationState
	}
	return nil
}

func (m *DeviceSecret) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func init() {
	proto.RegisterType((*SecretEntryEnvelope)(nil), "SecretEntryEnvelope")
	proto.RegisterType((*SecretEntryPayload)(nil), "SecretEntryPayload")
	proto.RegisterType((*DeviceSecret)(nil), "DeviceSecret")
}

func init() { proto.RegisterFile("internal/log_entry_secret.proto", fileDescriptor_34ccce4ec8e52467) }

var fileDescriptor_34ccce4ec8e52467 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x31, 0x4b, 0xc3, 0x40,
	0x1c, 0xc5, 0x7b, 0x2a, 0x0a, 0x47, 0xd1, 0x92, 0xa2, 0x66, 0x90, 0x53, 0x8a, 0x83, 0x0e, 0xb6,
	0x83, 0x50, 0x9c, 0xc5, 0x4e, 0x22, 0x94, 0x66, 0x73, 0x39, 0x2e, 0xc9, 0x9f, 0x18, 0x4c, 0xef,
	0x8e, 0xcb, 0x3f, 0x85, 0xfb, 0x08, 0x6e, 0x7e, 0x05, 0xbf, 0x8d, 0x63, 0x47, 0x47, 0x69, 0xbf,
	0x88, 0xe4, 0x2e, 0x4d, 0xeb, 0xf8, 0x7f, 0xbf, 0xf7, 0x92, 0x77, 0x3c, 0x7a, 0x99, 0x4b, 0x04,
	0x23, 0x45, 0x31, 0x2a, 0x54, 0xc6, 0x41, 0xa2, 0xb1, 0xbc, 0x84, 0xc4, 0x00, 0x0e, 0xb5, 0x51,
	0xa8, 0x06, 0x1f, 0x84, 0xf6, 0x23, 0x27, 0x4c, 0x6a, 0x38, 0x91, 0x0b, 0x28, 0x94, 0x86, 0xe0,
	0x81, 0x86, 0x20, 0x13, 0x63, 0x35, 0x42, 0xda, 0x24, 0xb8, 0x16, 0xb6, 0x50, 0x22, 0x0d, 0xc9,
	0x15, 0xb9, 0xe9, 0xce, 0xce, 0x5a, 0xee, 0xf3, 0x53, 0x4f, 0xeb, 0xe4, 0x7f, 0x3f, 0x2f, 0xf3,
	0x4c, 0x0a, 0xac, 0x0c, 0x84, 0x7b, 0x3e, 0x59, 0xee, 0x06, 0xa2, 0x0d, 0x1d, 0x7c, 0x11, 0x1a,
	0xec, 0x74, 0xd9, 0x7c, 0xf0, 0x8e, 0xf6, 0x53, 0x28, 0x91, 0xcf, 0x61, 0x1e, 0x83, 0xe1, 0xba,
	0x8a, 0xf9, 0x3b, 0xd8, 0xa6, 0x45, 0xaf, 0x46, 0x2f, 0x8e, 0x4c, 0xab, 0xf8, 0x19, 0x6c, 0x70,
	0x4d, 0x8f, 0x53, 0x58, 0xe4, 0x09, 0xb4, 0x4e, 0xff, 0xd7, 0xae, 0x57, 0x1b, 0xd7, 0x98, 0x9e,
	0x6f, 0xdf, 0xd7, 0xf8, 0x7d, 0xad, 0x70, 0xdf, 0xd9, 0x4f, 0x5b, 0xfc, 0xe4, 0xa8, 0x2f, 0x36,
	0x88, 0x68, 0x77, 0xf7, 0x0e, 0x6e, 0x69, 0x2f, 0x05, 0x93, 0x2f, 0x04, 0xe6, 0x4a, 0xf2, 0x12,
	0x05, 0x42, 0xd3, 0xec, 0x64, 0xab, 0x47, 0xb5, 0x1c, 0x84, 0xf4, 0x28, 0x51, 0x55, 0xbd, 0x87,
	0x6b, 0x74, 0x30, 0xdb, 0x9c, 0x8f, 0xe3, 0xef, 0x15, 0x23, 0xcb, 0x15, 0x23, 0xbf, 0x2b, 0x46,
	0x3e, 0xd7, 0xac, 0xb3, 0x5c, 0xb3, 0xce, 0xcf, 0x9a, 0x75, 0x5e, 0x2f, 0x62, 0x30, 0x68, 0x87,
	0x08, 0xc9, 0xdb, 0x28, 0x53, 0xa3, 0x76, 0xcd, 0xcc, 0xa8, 0x4a, 0xc7, 0x87, 0x6e, 0xc3, 0xfb,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0xd7, 0x2b, 0xa4, 0xe6, 0x01, 0x00, 0x00,
}

func (m *SecretEntryEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretEntryEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretEntryEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecretPayloadSignature) > 0 {
		i -= len(m.SecretPayloadSignature)
		copy(dAtA[i:], m.SecretPayloadSignature)
		i = encodeVarintLogEntrySecret(dAtA, i, uint64(len(m.SecretPayloadSignature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptedSecretPayload) > 0 {
		i -= len(m.EncryptedSecretPayload)
		copy(dAtA[i:], m.EncryptedSecretPayload)
		i = encodeVarintLogEntrySecret(dAtA, i, uint64(len(m.EncryptedSecretPayload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecretEntryPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretEntryPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretEntryPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedDeviceSecret) > 0 {
		i -= len(m.EncryptedDeviceSecret)
		copy(dAtA[i:], m.EncryptedDeviceSecret)
		i = encodeVarintLogEntrySecret(dAtA, i, uint64(len(m.EncryptedDeviceSecret)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevicePubKey) > 0 {
		i -= len(m.DevicePubKey)
		copy(dAtA[i:], m.DevicePubKey)
		i = encodeVarintLogEntrySecret(dAtA, i, uint64(len(m.DevicePubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestMemberPubKey) > 0 {
		i -= len(m.DestMemberPubKey)
		copy(dAtA[i:], m.DestMemberPubKey)
		i = encodeVarintLogEntrySecret(dAtA, i, uint64(len(m.DestMemberPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceSecret) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceSecret) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceSecret) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Counter != 0 {
		i = encodeVarintLogEntrySecret(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DerivationState) > 0 {
		i -= len(m.DerivationState)
		copy(dAtA[i:], m.DerivationState)
		i = encodeVarintLogEntrySecret(dAtA, i, uint64(len(m.DerivationState)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogEntrySecret(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogEntrySecret(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SecretEntryEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncryptedSecretPayload)
	if l > 0 {
		n += 1 + l + sovLogEntrySecret(uint64(l))
	}
	l = len(m.SecretPayloadSignature)
	if l > 0 {
		n += 1 + l + sovLogEntrySecret(uint64(l))
	}
	return n
}

func (m *SecretEntryPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestMemberPubKey)
	if l > 0 {
		n += 1 + l + sovLogEntrySecret(uint64(l))
	}
	l = len(m.DevicePubKey)
	if l > 0 {
		n += 1 + l + sovLogEntrySecret(uint64(l))
	}
	l = len(m.EncryptedDeviceSecret)
	if l > 0 {
		n += 1 + l + sovLogEntrySecret(uint64(l))
	}
	return n
}

func (m *DeviceSecret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DerivationState)
	if l > 0 {
		n += 1 + l + sovLogEntrySecret(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovLogEntrySecret(uint64(m.Counter))
	}
	return n
}

func sovLogEntrySecret(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogEntrySecret(x uint64) (n int) {
	return sovLogEntrySecret(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecretEntryEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogEntrySecret
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretEntryEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretEntryEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedSecretPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntrySecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedSecretPayload = append(m.EncryptedSecretPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedSecretPayload == nil {
				m.EncryptedSecretPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretPayloadSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntrySecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretPayloadSignature = append(m.SecretPayloadSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.SecretPayloadSignature == nil {
				m.SecretPayloadSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogEntrySecret(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretEntryPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogEntrySecret
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretEntryPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretEntryPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestMemberPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntrySecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestMemberPubKey = append(m.DestMemberPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.DestMemberPubKey == nil {
				m.DestMemberPubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntrySecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePubKey = append(m.DevicePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePubKey == nil {
				m.DevicePubKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedDeviceSecret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntrySecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedDeviceSecret = append(m.EncryptedDeviceSecret[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedDeviceSecret == nil {
				m.EncryptedDeviceSecret = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogEntrySecret(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceSecret) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogEntrySecret
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceSecret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceSecret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivationState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntrySecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DerivationState = append(m.DerivationState[:0], dAtA[iNdEx:postIndex]...)
			if m.DerivationState == nil {
				m.DerivationState = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntrySecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogEntrySecret(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogEntrySecret
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogEntrySecret(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogEntrySecret
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogEntrySecret
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogEntrySecret
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogEntrySecret
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLogEntrySecret
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogEntrySecret
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogEntrySecret(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLogEntrySecret
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogEntrySecret = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogEntrySecret   = fmt.Errorf("proto: integer overflow")
)
