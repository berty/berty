// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/log_entry_member.proto

package group

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MemberEntryEnvelope struct {
	EncryptedMemberPayload []byte `protobuf:"bytes,1,opt,name=encrypted_member_payload,json=encryptedMemberPayload,proto3" json:"encrypted_member_payload,omitempty"`
	MemberPayloadSignature []byte `protobuf:"bytes,2,opt,name=member_payload_signature,json=memberPayloadSignature,proto3" json:"member_payload_signature,omitempty"`
}

func (m *MemberEntryEnvelope) Reset()         { *m = MemberEntryEnvelope{} }
func (m *MemberEntryEnvelope) String() string { return proto.CompactTextString(m) }
func (*MemberEntryEnvelope) ProtoMessage()    {}
func (*MemberEntryEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_efc6b480e26e2199, []int{0}
}
func (m *MemberEntryEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberEntryEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberEntryEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberEntryEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberEntryEnvelope.Merge(m, src)
}
func (m *MemberEntryEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *MemberEntryEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberEntryEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_MemberEntryEnvelope proto.InternalMessageInfo

func (m *MemberEntryEnvelope) GetEncryptedMemberPayload() []byte {
	if m != nil {
		return m.EncryptedMemberPayload
	}
	return nil
}

func (m *MemberEntryEnvelope) GetMemberPayloadSignature() []byte {
	if m != nil {
		return m.MemberPayloadSignature
	}
	return nil
}

type MemberEntryPayload struct {
	MemberPubKey                []byte `protobuf:"bytes,1,opt,name=member_pub_key,json=memberPubKey,proto3" json:"member_pub_key,omitempty"`
	MemberDevicePubKey          []byte `protobuf:"bytes,2,opt,name=member_device_pub_key,json=memberDevicePubKey,proto3" json:"member_device_pub_key,omitempty"`
	MemberDevicePubKeySignature []byte `protobuf:"bytes,3,opt,name=member_device_pub_key_signature,json=memberDevicePubKeySignature,proto3" json:"member_device_pub_key_signature,omitempty"`
	InviterMemberPubKey         []byte `protobuf:"bytes,4,opt,name=inviter_member_pub_key,json=inviterMemberPubKey,proto3" json:"inviter_member_pub_key,omitempty"`
	InvitationPubKey            []byte `protobuf:"bytes,5,opt,name=invitation_pub_key,json=invitationPubKey,proto3" json:"invitation_pub_key,omitempty"`
	InvitationPubKeySignature   []byte `protobuf:"bytes,6,opt,name=invitation_pub_key_signature,json=invitationPubKeySignature,proto3" json:"invitation_pub_key_signature,omitempty"`
}

func (m *MemberEntryPayload) Reset()         { *m = MemberEntryPayload{} }
func (m *MemberEntryPayload) String() string { return proto.CompactTextString(m) }
func (*MemberEntryPayload) ProtoMessage()    {}
func (*MemberEntryPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_efc6b480e26e2199, []int{1}
}
func (m *MemberEntryPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberEntryPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberEntryPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberEntryPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberEntryPayload.Merge(m, src)
}
func (m *MemberEntryPayload) XXX_Size() int {
	return m.Size()
}
func (m *MemberEntryPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberEntryPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MemberEntryPayload proto.InternalMessageInfo

func (m *MemberEntryPayload) GetMemberPubKey() []byte {
	if m != nil {
		return m.MemberPubKey
	}
	return nil
}

func (m *MemberEntryPayload) GetMemberDevicePubKey() []byte {
	if m != nil {
		return m.MemberDevicePubKey
	}
	return nil
}

func (m *MemberEntryPayload) GetMemberDevicePubKeySignature() []byte {
	if m != nil {
		return m.MemberDevicePubKeySignature
	}
	return nil
}

func (m *MemberEntryPayload) GetInviterMemberPubKey() []byte {
	if m != nil {
		return m.InviterMemberPubKey
	}
	return nil
}

func (m *MemberEntryPayload) GetInvitationPubKey() []byte {
	if m != nil {
		return m.InvitationPubKey
	}
	return nil
}

func (m *MemberEntryPayload) GetInvitationPubKeySignature() []byte {
	if m != nil {
		return m.InvitationPubKeySignature
	}
	return nil
}

func init() {
	proto.RegisterType((*MemberEntryEnvelope)(nil), "MemberEntryEnvelope")
	proto.RegisterType((*MemberEntryPayload)(nil), "MemberEntryPayload")
}

func init() { proto.RegisterFile("internal/log_entry_member.proto", fileDescriptor_efc6b480e26e2199) }

var fileDescriptor_efc6b480e26e2199 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x4b, 0xf3, 0x30,
	0x1c, 0x87, 0x97, 0xbd, 0xaf, 0x3b, 0x84, 0x21, 0x92, 0xe1, 0x98, 0x38, 0x32, 0x19, 0x1e, 0x3c,
	0xc8, 0x86, 0x0c, 0xc4, 0x9b, 0x20, 0xdb, 0x49, 0x06, 0xa2, 0x37, 0x2f, 0xa1, 0xdd, 0xfe, 0xd4,
	0x60, 0x97, 0x94, 0x98, 0x16, 0xf2, 0x11, 0xbc, 0xf9, 0xb1, 0x3c, 0xee, 0xa6, 0x47, 0x69, 0xbf,
	0x88, 0x2c, 0x4d, 0x63, 0xdd, 0xbc, 0xf6, 0xf9, 0x3d, 0xff, 0x3e, 0x87, 0xe0, 0x01, 0x17, 0x1a,
	0x94, 0x08, 0xe2, 0x71, 0x2c, 0x23, 0x06, 0x42, 0x2b, 0xc3, 0x56, 0xb0, 0x0a, 0x41, 0x8d, 0x12,
	0x25, 0xb5, 0x1c, 0xbe, 0x22, 0xdc, 0x99, 0xdb, 0x0f, 0xb3, 0x0d, 0x9c, 0x89, 0x0c, 0x62, 0x99,
	0x00, 0xb9, 0xc2, 0x3d, 0x10, 0x0b, 0x65, 0x12, 0x0d, 0x4b, 0x67, 0xb0, 0x24, 0x30, 0xb1, 0x0c,
	0x96, 0x3d, 0x74, 0x82, 0xce, 0xda, 0xf7, 0x5d, 0xcf, 0x4b, 0xff, 0xae, 0xa4, 0x1b, 0xf3, 0xf7,
	0x9e, 0xbd, 0xf0, 0x48, 0x04, 0x3a, 0x55, 0xd0, 0x6b, 0x96, 0xe6, 0xaa, 0x2e, 0x3c, 0x54, 0x74,
	0xf8, 0xd1, 0xc4, 0xa4, 0xd6, 0x52, 0x1d, 0x3c, 0xc5, 0xfb, 0xd5, 0xc1, 0x34, 0x64, 0xcf, 0x60,
	0x5c, 0x40, 0xdb, 0x9d, 0x49, 0xc3, 0x5b, 0x30, 0xe4, 0x02, 0x1f, 0xba, 0xd5, 0x12, 0x32, 0xbe,
	0x00, 0x3f, 0x2e, 0xff, 0x49, 0x4a, 0x38, 0xb5, 0xcc, 0x29, 0x53, 0x3c, 0xf8, 0x53, 0xa9, 0x05,
	0xff, 0xb3, 0xf2, 0xf1, 0xae, 0xec, 0xab, 0xc9, 0x04, 0x77, 0xb9, 0xc8, 0xb8, 0x06, 0xc5, 0xb6,
	0x32, 0xff, 0x5b, 0xb9, 0xe3, 0xe8, 0xbc, 0x5e, 0x7b, 0x8e, 0x89, 0xfd, 0x1c, 0x68, 0x2e, 0x85,
	0x17, 0xf6, 0xac, 0x70, 0xf0, 0x43, 0xdc, 0xfa, 0x1a, 0xf7, 0x77, 0xd7, 0xb5, 0xca, 0x96, 0xf5,
	0x8e, 0xb6, 0x3d, 0xdf, 0x78, 0x73, 0xf9, 0x9e, 0x53, 0xb4, 0xce, 0x29, 0xfa, 0xca, 0x29, 0x7a,
	0x2b, 0x68, 0x63, 0x5d, 0xd0, 0xc6, 0x67, 0x41, 0x1b, 0x8f, 0xfd, 0x10, 0x94, 0x36, 0x23, 0x0d,
	0x8b, 0xa7, 0x71, 0x24, 0xc7, 0xfe, 0xb9, 0x44, 0x4a, 0xa6, 0x49, 0xd8, 0xb2, 0x8f, 0x64, 0xf2,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0x31, 0x9d, 0x74, 0x35, 0x47, 0x02, 0x00, 0x00,
}

func (m *MemberEntryEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberEntryEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberEntryEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MemberPayloadSignature) > 0 {
		i -= len(m.MemberPayloadSignature)
		copy(dAtA[i:], m.MemberPayloadSignature)
		i = encodeVarintLogEntryMember(dAtA, i, uint64(len(m.MemberPayloadSignature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptedMemberPayload) > 0 {
		i -= len(m.EncryptedMemberPayload)
		copy(dAtA[i:], m.EncryptedMemberPayload)
		i = encodeVarintLogEntryMember(dAtA, i, uint64(len(m.EncryptedMemberPayload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemberEntryPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberEntryPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberEntryPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InvitationPubKeySignature) > 0 {
		i -= len(m.InvitationPubKeySignature)
		copy(dAtA[i:], m.InvitationPubKeySignature)
		i = encodeVarintLogEntryMember(dAtA, i, uint64(len(m.InvitationPubKeySignature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InvitationPubKey) > 0 {
		i -= len(m.InvitationPubKey)
		copy(dAtA[i:], m.InvitationPubKey)
		i = encodeVarintLogEntryMember(dAtA, i, uint64(len(m.InvitationPubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InviterMemberPubKey) > 0 {
		i -= len(m.InviterMemberPubKey)
		copy(dAtA[i:], m.InviterMemberPubKey)
		i = encodeVarintLogEntryMember(dAtA, i, uint64(len(m.InviterMemberPubKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MemberDevicePubKeySignature) > 0 {
		i -= len(m.MemberDevicePubKeySignature)
		copy(dAtA[i:], m.MemberDevicePubKeySignature)
		i = encodeVarintLogEntryMember(dAtA, i, uint64(len(m.MemberDevicePubKeySignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MemberDevicePubKey) > 0 {
		i -= len(m.MemberDevicePubKey)
		copy(dAtA[i:], m.MemberDevicePubKey)
		i = encodeVarintLogEntryMember(dAtA, i, uint64(len(m.MemberDevicePubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MemberPubKey) > 0 {
		i -= len(m.MemberPubKey)
		copy(dAtA[i:], m.MemberPubKey)
		i = encodeVarintLogEntryMember(dAtA, i, uint64(len(m.MemberPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogEntryMember(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogEntryMember(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MemberEntryEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncryptedMemberPayload)
	if l > 0 {
		n += 1 + l + sovLogEntryMember(uint64(l))
	}
	l = len(m.MemberPayloadSignature)
	if l > 0 {
		n += 1 + l + sovLogEntryMember(uint64(l))
	}
	return n
}

func (m *MemberEntryPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberPubKey)
	if l > 0 {
		n += 1 + l + sovLogEntryMember(uint64(l))
	}
	l = len(m.MemberDevicePubKey)
	if l > 0 {
		n += 1 + l + sovLogEntryMember(uint64(l))
	}
	l = len(m.MemberDevicePubKeySignature)
	if l > 0 {
		n += 1 + l + sovLogEntryMember(uint64(l))
	}
	l = len(m.InviterMemberPubKey)
	if l > 0 {
		n += 1 + l + sovLogEntryMember(uint64(l))
	}
	l = len(m.InvitationPubKey)
	if l > 0 {
		n += 1 + l + sovLogEntryMember(uint64(l))
	}
	l = len(m.InvitationPubKeySignature)
	if l > 0 {
		n += 1 + l + sovLogEntryMember(uint64(l))
	}
	return n
}

func sovLogEntryMember(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogEntryMember(x uint64) (n int) {
	return sovLogEntryMember(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MemberEntryEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogEntryMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberEntryEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberEntryEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedMemberPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntryMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedMemberPayload = append(m.EncryptedMemberPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedMemberPayload == nil {
				m.EncryptedMemberPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPayloadSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntryMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPayloadSignature = append(m.MemberPayloadSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberPayloadSignature == nil {
				m.MemberPayloadSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogEntryMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberEntryPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogEntryMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberEntryPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberEntryPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntryMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPubKey = append(m.MemberPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberPubKey == nil {
				m.MemberPubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberDevicePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntryMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberDevicePubKey = append(m.MemberDevicePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberDevicePubKey == nil {
				m.MemberDevicePubKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberDevicePubKeySignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntryMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberDevicePubKeySignature = append(m.MemberDevicePubKeySignature[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberDevicePubKeySignature == nil {
				m.MemberDevicePubKeySignature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterMemberPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntryMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviterMemberPubKey = append(m.InviterMemberPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.InviterMemberPubKey == nil {
				m.InviterMemberPubKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntryMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitationPubKey = append(m.InvitationPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.InvitationPubKey == nil {
				m.InvitationPubKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationPubKeySignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogEntryMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitationPubKeySignature = append(m.InvitationPubKeySignature[:0], dAtA[iNdEx:postIndex]...)
			if m.InvitationPubKeySignature == nil {
				m.InvitationPubKeySignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogEntryMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogEntryMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogEntryMember(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogEntryMember
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogEntryMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogEntryMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogEntryMember
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLogEntryMember
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogEntryMember
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogEntryMember(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLogEntryMember
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogEntryMember = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogEntryMember   = fmt.Errorf("proto: integer overflow")
)
