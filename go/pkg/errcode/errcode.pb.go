// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errcode.proto

package errcode

import (
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErrCode int32

const (
	Undefined                           ErrCode = 0
	TODO                                ErrCode = 666
	ErrNotImplemented                   ErrCode = 777
	ErrInternal                         ErrCode = 999
	ErrInvalidInput                     ErrCode = 101
	ErrMissingInput                     ErrCode = 102
	ErrSigChainNoEntries                ErrCode = 1001
	ErrSigChainInvalidEntryType         ErrCode = 1002
	ErrSigChainAlreadyInitialized       ErrCode = 1003
	ErrSigChainPermission               ErrCode = 1004
	ErrSigChainOperationAlreadyDone     ErrCode = 1005
	ErrHandshakeNoPayload               ErrCode = 1006
	ErrHandshakeInvalidFlow             ErrCode = 1007
	ErrHandshakeInvalidFlowStepNotFound ErrCode = 1008
	ErrHandshakeParams                  ErrCode = 1009
	ErrHandshakeNoAuthReturned          ErrCode = 1010
	ErrHandshakeInvalidKeyType          ErrCode = 1011
	ErrHandshakeInvalidSignature        ErrCode = 1012
	ErrHandshakeSessionInvalid          ErrCode = 1013
	ErrHandshakeKeyNotInSigChain        ErrCode = 1014
	ErrHandshakeDecrypt                 ErrCode = 1015
	ErrGroupMemberLogEventOpen          ErrCode = 1020
	ErrGroupMemberLogEventSignature     ErrCode = 1021
	ErrGroupMemberLogWrongInviter       ErrCode = 1022
	ErrGroupMemberUnknownGroupID        ErrCode = 1023
	ErrGroupMemberMissingSecrets        ErrCode = 1024
	ErrGroupSecretOtherDestMember       ErrCode = 1030
	ErrGroupSecretEntryDoesNotExist     ErrCode = 1031
	ErrBridgeInterrupted                ErrCode = 2001
	ErrBridgeNotRunning                 ErrCode = 2002
)

var ErrCode_name = map[int32]string{
	0:    "Undefined",
	666:  "TODO",
	777:  "ErrNotImplemented",
	999:  "ErrInternal",
	101:  "ErrInvalidInput",
	102:  "ErrMissingInput",
	1001: "ErrSigChainNoEntries",
	1002: "ErrSigChainInvalidEntryType",
	1003: "ErrSigChainAlreadyInitialized",
	1004: "ErrSigChainPermission",
	1005: "ErrSigChainOperationAlreadyDone",
	1006: "ErrHandshakeNoPayload",
	1007: "ErrHandshakeInvalidFlow",
	1008: "ErrHandshakeInvalidFlowStepNotFound",
	1009: "ErrHandshakeParams",
	1010: "ErrHandshakeNoAuthReturned",
	1011: "ErrHandshakeInvalidKeyType",
	1012: "ErrHandshakeInvalidSignature",
	1013: "ErrHandshakeSessionInvalid",
	1014: "ErrHandshakeKeyNotInSigChain",
	1015: "ErrHandshakeDecrypt",
	1020: "ErrGroupMemberLogEventOpen",
	1021: "ErrGroupMemberLogEventSignature",
	1022: "ErrGroupMemberLogWrongInviter",
	1023: "ErrGroupMemberUnknownGroupID",
	1024: "ErrGroupMemberMissingSecrets",
	1030: "ErrGroupSecretOtherDestMember",
	1031: "ErrGroupSecretEntryDoesNotExist",
	2001: "ErrBridgeInterrupted",
	2002: "ErrBridgeNotRunning",
}

var ErrCode_value = map[string]int32{
	"Undefined":                           0,
	"TODO":                                666,
	"ErrNotImplemented":                   777,
	"ErrInternal":                         999,
	"ErrInvalidInput":                     101,
	"ErrMissingInput":                     102,
	"ErrSigChainNoEntries":                1001,
	"ErrSigChainInvalidEntryType":         1002,
	"ErrSigChainAlreadyInitialized":       1003,
	"ErrSigChainPermission":               1004,
	"ErrSigChainOperationAlreadyDone":     1005,
	"ErrHandshakeNoPayload":               1006,
	"ErrHandshakeInvalidFlow":             1007,
	"ErrHandshakeInvalidFlowStepNotFound": 1008,
	"ErrHandshakeParams":                  1009,
	"ErrHandshakeNoAuthReturned":          1010,
	"ErrHandshakeInvalidKeyType":          1011,
	"ErrHandshakeInvalidSignature":        1012,
	"ErrHandshakeSessionInvalid":          1013,
	"ErrHandshakeKeyNotInSigChain":        1014,
	"ErrHandshakeDecrypt":                 1015,
	"ErrGroupMemberLogEventOpen":          1020,
	"ErrGroupMemberLogEventSignature":     1021,
	"ErrGroupMemberLogWrongInviter":       1022,
	"ErrGroupMemberUnknownGroupID":        1023,
	"ErrGroupMemberMissingSecrets":        1024,
	"ErrGroupSecretOtherDestMember":       1030,
	"ErrGroupSecretEntryDoesNotExist":     1031,
	"ErrBridgeInterrupted":                2001,
	"ErrBridgeNotRunning":                 2002,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4240057316120df7, []int{0}
}

func init() {
	proto.RegisterEnum("berty.errcode.ErrCode", ErrCode_name, ErrCode_value)
}

func init() { proto.RegisterFile("errcode.proto", fileDescriptor_4240057316120df7) }

var fileDescriptor_4240057316120df7 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x4b, 0x4f, 0x14, 0x41,
	0x10, 0xc7, 0x39, 0x28, 0x0d, 0x6d, 0x08, 0x65, 0xa3, 0x22, 0x88, 0xe2, 0xeb, 0x60, 0x4c, 0x64,
	0x0f, 0x7e, 0x02, 0x60, 0x07, 0xdd, 0x20, 0xbb, 0x84, 0x85, 0x98, 0x78, 0xeb, 0xdd, 0x29, 0x66,
	0x3b, 0xcc, 0x76, 0x4f, 0x6a, 0x6a, 0xc0, 0xf1, 0xe4, 0x49, 0xa3, 0x1f, 0xc1, 0x4f, 0xa5, 0x7e,
	0x03, 0x4f, 0xc6, 0xf7, 0x5b, 0x2f, 0xbe, 0x32, 0xaf, 0x38, 0x04, 0xbc, 0xcd, 0xd4, 0xff, 0xd7,
	0xff, 0xae, 0x54, 0xd7, 0x5f, 0x4e, 0x20, 0x51, 0xdf, 0xf9, 0xb8, 0x10, 0x91, 0x63, 0xa7, 0x26,
	0x7a, 0x48, 0x9c, 0x2e, 0x94, 0xc5, 0xd9, 0x6b, 0x81, 0xe1, 0x41, 0xd2, 0x5b, 0xe8, 0xbb, 0x61,
	0x23, 0x70, 0x81, 0x6b, 0xe4, 0x54, 0x2f, 0xd9, 0xce, 0xff, 0xf2, 0x9f, 0xfc, 0xab, 0x38, 0x7d,
	0xf5, 0xb1, 0x90, 0xc2, 0x23, 0x5a, 0x76, 0x3e, 0xaa, 0x09, 0x39, 0xbe, 0x65, 0x7d, 0xdc, 0x36,
	0x16, 0x7d, 0x18, 0x51, 0xe3, 0xf2, 0xc8, 0x66, 0xa7, 0xd9, 0x81, 0x27, 0x47, 0xd5, 0x29, 0x79,
	0xdc, 0x23, 0x6a, 0x3b, 0x6e, 0x0d, 0xa3, 0x10, 0x87, 0x68, 0x19, 0x7d, 0x78, 0x34, 0xaa, 0x40,
	0x1e, 0xf3, 0x88, 0x5a, 0x96, 0x91, 0xac, 0x0e, 0xe1, 0xa5, 0x50, 0x53, 0x72, 0x32, 0xaf, 0xec,
	0xea, 0xd0, 0xf8, 0x2d, 0x1b, 0x25, 0x0c, 0x58, 0x16, 0xd7, 0x4c, 0x1c, 0x1b, 0x1b, 0x14, 0xc5,
	0x6d, 0x35, 0x23, 0x4f, 0x78, 0x44, 0x5d, 0x13, 0x2c, 0x0f, 0xb4, 0xb1, 0x6d, 0xe7, 0x59, 0x26,
	0x83, 0x31, 0xbc, 0x12, 0xea, 0xbc, 0x3c, 0x53, 0x93, 0x4a, 0xb3, 0x4c, 0x4f, 0x37, 0xd3, 0x08,
	0xe1, 0xb5, 0x50, 0x17, 0xe5, 0xd9, 0x1a, 0xb1, 0x18, 0x12, 0x6a, 0x3f, 0x6d, 0x59, 0xc3, 0x46,
	0x87, 0xe6, 0x1e, 0xfa, 0xf0, 0x46, 0xa8, 0x59, 0x79, 0xb2, 0xc6, 0xac, 0x23, 0x0d, 0xb3, 0x06,
	0x9c, 0x85, 0xb7, 0x42, 0x5d, 0x96, 0xf3, 0x35, 0xad, 0x13, 0x21, 0x69, 0x36, 0xae, 0x32, 0x6a,
	0x3a, 0x8b, 0xf0, 0xae, 0x72, 0xb8, 0xa9, 0xad, 0x1f, 0x0f, 0xf4, 0x0e, 0xb6, 0xdd, 0xba, 0x4e,
	0x43, 0xa7, 0x7d, 0x78, 0x2f, 0xd4, 0x9c, 0x9c, 0xae, 0x6b, 0x65, 0x93, 0x2b, 0xa1, 0xdb, 0x83,
	0x0f, 0x42, 0x5d, 0x91, 0x97, 0xfe, 0xa3, 0x76, 0x19, 0xa3, 0xb6, 0xe3, 0x15, 0x97, 0x58, 0x1f,
	0x3e, 0x0a, 0x35, 0x2d, 0x55, 0x9d, 0x5c, 0xd7, 0xa4, 0x87, 0x31, 0x7c, 0x12, 0x6a, 0x5e, 0xce,
	0xee, 0xbf, 0x7c, 0x31, 0xe1, 0xc1, 0x06, 0x72, 0x42, 0xd9, 0xf3, 0x7c, 0x3e, 0x00, 0x94, 0x77,
	0xac, 0x62, 0x31, 0xa4, 0x2f, 0x42, 0x5d, 0x90, 0x73, 0x87, 0x00, 0x5d, 0x13, 0x58, 0xcd, 0x09,
	0x21, 0x7c, 0x3d, 0xe0, 0xd1, 0xc5, 0x7c, 0x42, 0x25, 0x09, 0xdf, 0x0e, 0x78, 0xac, 0x62, 0x9a,
	0x6d, 0x81, 0xad, 0x26, 0x07, 0xdf, 0x85, 0x3a, 0x2d, 0xa7, 0xea, 0x48, 0x13, 0xfb, 0x94, 0x46,
	0x0c, 0x3f, 0x2a, 0xf7, 0x1b, 0xe4, 0x92, 0x68, 0x0d, 0x87, 0x3d, 0xa4, 0x5b, 0x2e, 0xf0, 0x76,
	0xd1, 0x72, 0x27, 0x42, 0x0b, 0x3f, 0xab, 0x67, 0x38, 0x04, 0xf8, 0xd7, 0xe4, 0xaf, 0xea, 0xb1,
	0xf7, 0x53, 0xb7, 0xc9, 0x65, 0xab, 0xb4, 0x6b, 0x18, 0x09, 0x7e, 0x57, 0x7d, 0xd6, 0x98, 0x2d,
	0xbb, 0x63, 0xdd, 0x9e, 0xcd, 0x2b, 0xad, 0x26, 0xfc, 0x39, 0x04, 0x29, 0x17, 0xb2, 0x8b, 0x7d,
	0x42, 0x8e, 0xe1, 0xfe, 0x58, 0xfd, 0xa6, 0xa2, 0xda, 0xe1, 0x01, 0x52, 0x13, 0x63, 0x2e, 0x4e,
	0xc0, 0x83, 0xb1, 0x7a, 0xcf, 0x05, 0x93, 0x2f, 0x66, 0xd3, 0x61, 0xdc, 0x76, 0xec, 0xdd, 0x35,
	0x31, 0xc3, 0xc3, 0xb1, 0x72, 0xbb, 0x97, 0xc8, 0xf8, 0x01, 0xe6, 0xf9, 0xa0, 0x24, 0xca, 0x42,
	0xf3, 0x6c, 0xb2, 0x9c, 0x57, 0x21, 0xb5, 0x1d, 0x6f, 0x24, 0xd6, 0x1a, 0x1b, 0xc0, 0xf3, 0xc9,
	0xa5, 0xf9, 0xa7, 0x2f, 0xce, 0x8d, 0xdc, 0x99, 0x29, 0x02, 0xcd, 0xd8, 0x1f, 0x34, 0xb2, 0xfc,
	0xee, 0x04, 0x8d, 0x32, 0xdc, 0xbd, 0xd1, 0x3c, 0xb4, 0xd7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xae, 0x3f, 0xc8, 0x3b, 0x03, 0x04, 0x00, 0x00,
}
