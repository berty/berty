// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errcode.proto

package errcode

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErrCode int32

const (
	Undefined                                  ErrCode = 0
	TODO                                       ErrCode = 666
	ErrNotImplemented                          ErrCode = 777
	ErrInternal                                ErrCode = 888
	ErrInvalidInput                            ErrCode = 100
	ErrInvalidRange                            ErrCode = 101
	ErrMissingInput                            ErrCode = 102
	ErrSerialization                           ErrCode = 103
	ErrDeserialization                         ErrCode = 104
	ErrStreamRead                              ErrCode = 105
	ErrStreamWrite                             ErrCode = 106
	ErrStreamTransform                         ErrCode = 110
	ErrStreamSendAndClose                      ErrCode = 111
	ErrStreamHeaderWrite                       ErrCode = 112
	ErrStreamHeaderRead                        ErrCode = 115
	ErrStreamSink                              ErrCode = 113
	ErrStreamCloseAndRecv                      ErrCode = 114
	ErrMissingMapKey                           ErrCode = 107
	ErrDBWrite                                 ErrCode = 108
	ErrDBRead                                  ErrCode = 109
	ErrDBDestroy                               ErrCode = 120
	ErrDBMigrate                               ErrCode = 121
	ErrDBReplay                                ErrCode = 122
	ErrDBRestore                               ErrCode = 123
	ErrDBOpen                                  ErrCode = 124
	ErrDBClose                                 ErrCode = 125
	ErrCryptoRandomGeneration                  ErrCode = 200
	ErrCryptoKeyGeneration                     ErrCode = 201
	ErrCryptoNonceGeneration                   ErrCode = 202
	ErrCryptoSignature                         ErrCode = 203
	ErrCryptoSignatureVerification             ErrCode = 204
	ErrCryptoDecrypt                           ErrCode = 205
	ErrCryptoDecryptPayload                    ErrCode = 206
	ErrCryptoEncrypt                           ErrCode = 207
	ErrCryptoKeyConversion                     ErrCode = 208
	ErrCryptoCipherInit                        ErrCode = 209
	ErrCryptoKeyDerivation                     ErrCode = 210
	ErrMap                                     ErrCode = 300
	ErrForEach                                 ErrCode = 301
	ErrKeystoreGet                             ErrCode = 400
	ErrKeystorePut                             ErrCode = 401
	ErrNotFound                                ErrCode = 404
	ErrOrbitDBInit                             ErrCode = 1000
	ErrOrbitDBOpen                             ErrCode = 1001
	ErrOrbitDBAppend                           ErrCode = 1002
	ErrOrbitDBDeserialization                  ErrCode = 1003
	ErrOrbitDBStoreCast                        ErrCode = 1004
	ErrIPFSAdd                                 ErrCode = 1050
	ErrIPFSGet                                 ErrCode = 1051
	ErrIPFSInit                                ErrCode = 1052
	ErrIPFSSetupConfig                         ErrCode = 1053
	ErrIPFSSetupRepo                           ErrCode = 1054
	ErrIPFSSetupHost                           ErrCode = 1055
	ErrHandshakeOwnEphemeralKeyGenSend         ErrCode = 1100
	ErrHandshakePeerEphemeralKeyRecv           ErrCode = 1101
	ErrHandshakeRequesterAuthenticateBoxKeyGen ErrCode = 1102
	ErrHandshakeResponderAcceptBoxKeyGen       ErrCode = 1103
	ErrHandshakeRequesterHello                 ErrCode = 1104
	ErrHandshakeResponderHello                 ErrCode = 1105
	ErrHandshakeRequesterAuthenticate          ErrCode = 1106
	ErrHandshakeResponderAccept                ErrCode = 1107
	ErrHandshakeRequesterAcknowledge           ErrCode = 1108
	ErrContactRequestSameAccount               ErrCode = 1200
	ErrContactRequestContactAlreadyAdded       ErrCode = 1201
	ErrContactRequestContactBlocked            ErrCode = 1202
	ErrContactRequestContactUndefined          ErrCode = 1203
	ErrContactRequestIncomingAlreadyReceived   ErrCode = 1204
	ErrGroupMemberLogEventOpen                 ErrCode = 1300
	ErrGroupMemberLogEventSignature            ErrCode = 1301
	ErrGroupMemberUnknownGroupID               ErrCode = 1302
	ErrGroupSecretOtherDestMember              ErrCode = 1303
	ErrGroupSecretAlreadySentToMember          ErrCode = 1304
	ErrGroupInvalidType                        ErrCode = 1305
	ErrGroupMissing                            ErrCode = 1306
	ErrGroupActivate                           ErrCode = 1307
	ErrGroupDeactivate                         ErrCode = 1308
	ErrGroupInfo                               ErrCode = 1309
	ErrGroupUnknown                            ErrCode = 1310
	// Event errors
	ErrEventListMetadata                   ErrCode = 1400
	ErrEventListMessage                    ErrCode = 1401
	ErrMessageKeyPersistencePut            ErrCode = 1500
	ErrMessageKeyPersistenceGet            ErrCode = 1501
	ErrBridgeInterrupted                   ErrCode = 1600
	ErrBridgeNotRunning                    ErrCode = 1601
	ErrMessengerInvalidDeepLink            ErrCode = 2000
	ErrMessengerDeepLinkRequiresPassphrase ErrCode = 2001
	ErrMessengerDeepLinkInvalidPassphrase  ErrCode = 2002
	ErrMessengerStreamEvent                ErrCode = 2003
	ErrMessengerContactMetadataUnmarshal   ErrCode = 2004
	ErrDBEntryAlreadyExists                ErrCode = 2100
	ErrDBAddConversation                   ErrCode = 2101
	ErrDBAddContactRequestOutgoingSent     ErrCode = 2102
	ErrDBAddContactRequestOutgoingEnqueud  ErrCode = 2103
	ErrDBAddContactRequestIncomingReceived ErrCode = 2104
	ErrDBAddContactRequestIncomingAccepted ErrCode = 2105
	ErrDBAddGroupMemberDeviceAdded         ErrCode = 2106
	ErrDBMultipleRecords                   ErrCode = 2107
	ErrReplayProcessGroupMetadata          ErrCode = 2200
	ErrReplayProcessGroupMessage           ErrCode = 2201
	ErrAttachmentPrepare                   ErrCode = 2300
	ErrAttachmentRetrieve                  ErrCode = 2301
	ErrProtocolSend                        ErrCode = 2302
	ErrProtocolEventUnmarshal              ErrCode = 2303
	ErrProtocolGetGroupInfo                ErrCode = 2304
	// Test Error
	ErrTestEcho                                          ErrCode = 2401
	ErrTestEchoRecv                                      ErrCode = 2402
	ErrTestEchoSend                                      ErrCode = 2403
	ErrCLINoTermcaps                                     ErrCode = 3001
	ErrServicesAuth                                      ErrCode = 4000
	ErrServicesAuthNotInitialized                        ErrCode = 4001
	ErrServicesAuthWrongState                            ErrCode = 4002
	ErrServicesAuthInvalidResponse                       ErrCode = 4003
	ErrServicesAuthServer                                ErrCode = 4004
	ErrServicesAuthCodeChallenge                         ErrCode = 4005
	ErrServicesAuthServiceInvalidToken                   ErrCode = 4006
	ErrServicesAuthServiceNotSupported                   ErrCode = 4007
	ErrServicesAuthUnknownToken                          ErrCode = 4008
	ErrServicesAuthInvalidURL                            ErrCode = 4009
	ErrServiceReplication                                ErrCode = 4100
	ErrServiceReplicationServer                          ErrCode = 4101
	ErrServiceReplicationMissingEndpoint                 ErrCode = 4102
	ErrServicesDirectory                                 ErrCode = 4200
	ErrServicesDirectoryInvalidVerifiedCredentialSubject ErrCode = 4201
	ErrServicesDirectoryExistingRecordNotFound           ErrCode = 4202
	ErrServicesDirectoryRecordLockedAndCantBeReplaced    ErrCode = 4203
	ErrServicesDirectoryExplicitReplaceFlagRequired      ErrCode = 4204
	ErrServicesDirectoryInvalidVerifiedCredential        ErrCode = 4205
	ErrServicesDirectoryExpiredVerifiedCredential        ErrCode = 4206
	ErrServicesDirectoryInvalidVerifiedCredentialID      ErrCode = 4207
	ErrBertyAccount                                      ErrCode = 5000
	ErrBertyAccountNoIDSpecified                         ErrCode = 5001
	ErrBertyAccountAlreadyOpened                         ErrCode = 5002
	ErrBertyAccountInvalidIDFormat                       ErrCode = 5003
	ErrBertyAccountLoggerDecorator                       ErrCode = 5004
	ErrBertyAccountGRPCClient                            ErrCode = 5005
	ErrBertyAccountOpenAccount                           ErrCode = 5006
	ErrBertyAccountDataNotFound                          ErrCode = 5007
	ErrBertyAccountMetadataUpdate                        ErrCode = 5008
	ErrBertyAccountManagerOpen                           ErrCode = 5009
	ErrBertyAccountManagerClose                          ErrCode = 5010
	ErrBertyAccountInvalidCLIArgs                        ErrCode = 5011
	ErrBertyAccountFSError                               ErrCode = 5012
	ErrBertyAccountAlreadyExists                         ErrCode = 5013
	ErrBertyAccountNoBackupSpecified                     ErrCode = 5014
	ErrBertyAccountIDGenFailed                           ErrCode = 5015
	ErrBertyAccountCreationFailed                        ErrCode = 5016
	ErrBertyAccountUpdateFailed                          ErrCode = 5017
	ErrAppStorageNotSupported                            ErrCode = 5018
	ErrPush                                              ErrCode = 6000
	ErrPushWrongAccount                                  ErrCode = 6001
	ErrPushUnableToDecrypt                               ErrCode = 6002
	ErrPushInvalidPayload                                ErrCode = 6003
	ErrPushInvalidServerConfig                           ErrCode = 6004
	ErrPushMissingBundleID                               ErrCode = 6005
	ErrPushUnknownDestination                            ErrCode = 6006
	ErrPushProvider                                      ErrCode = 6007
	ErrPushUnknownProvider                               ErrCode = 6008
	ErrNoProvidersConfigured                             ErrCode = 6009
	ErrInvalidPrivateKey                                 ErrCode = 6010
)

var ErrCode_name = map[int32]string{
	0:    "Undefined",
	666:  "TODO",
	777:  "ErrNotImplemented",
	888:  "ErrInternal",
	100:  "ErrInvalidInput",
	101:  "ErrInvalidRange",
	102:  "ErrMissingInput",
	103:  "ErrSerialization",
	104:  "ErrDeserialization",
	105:  "ErrStreamRead",
	106:  "ErrStreamWrite",
	110:  "ErrStreamTransform",
	111:  "ErrStreamSendAndClose",
	112:  "ErrStreamHeaderWrite",
	115:  "ErrStreamHeaderRead",
	113:  "ErrStreamSink",
	114:  "ErrStreamCloseAndRecv",
	107:  "ErrMissingMapKey",
	108:  "ErrDBWrite",
	109:  "ErrDBRead",
	120:  "ErrDBDestroy",
	121:  "ErrDBMigrate",
	122:  "ErrDBReplay",
	123:  "ErrDBRestore",
	124:  "ErrDBOpen",
	125:  "ErrDBClose",
	200:  "ErrCryptoRandomGeneration",
	201:  "ErrCryptoKeyGeneration",
	202:  "ErrCryptoNonceGeneration",
	203:  "ErrCryptoSignature",
	204:  "ErrCryptoSignatureVerification",
	205:  "ErrCryptoDecrypt",
	206:  "ErrCryptoDecryptPayload",
	207:  "ErrCryptoEncrypt",
	208:  "ErrCryptoKeyConversion",
	209:  "ErrCryptoCipherInit",
	210:  "ErrCryptoKeyDerivation",
	300:  "ErrMap",
	301:  "ErrForEach",
	400:  "ErrKeystoreGet",
	401:  "ErrKeystorePut",
	404:  "ErrNotFound",
	1000: "ErrOrbitDBInit",
	1001: "ErrOrbitDBOpen",
	1002: "ErrOrbitDBAppend",
	1003: "ErrOrbitDBDeserialization",
	1004: "ErrOrbitDBStoreCast",
	1050: "ErrIPFSAdd",
	1051: "ErrIPFSGet",
	1052: "ErrIPFSInit",
	1053: "ErrIPFSSetupConfig",
	1054: "ErrIPFSSetupRepo",
	1055: "ErrIPFSSetupHost",
	1100: "ErrHandshakeOwnEphemeralKeyGenSend",
	1101: "ErrHandshakePeerEphemeralKeyRecv",
	1102: "ErrHandshakeRequesterAuthenticateBoxKeyGen",
	1103: "ErrHandshakeResponderAcceptBoxKeyGen",
	1104: "ErrHandshakeRequesterHello",
	1105: "ErrHandshakeResponderHello",
	1106: "ErrHandshakeRequesterAuthenticate",
	1107: "ErrHandshakeResponderAccept",
	1108: "ErrHandshakeRequesterAcknowledge",
	1200: "ErrContactRequestSameAccount",
	1201: "ErrContactRequestContactAlreadyAdded",
	1202: "ErrContactRequestContactBlocked",
	1203: "ErrContactRequestContactUndefined",
	1204: "ErrContactRequestIncomingAlreadyReceived",
	1300: "ErrGroupMemberLogEventOpen",
	1301: "ErrGroupMemberLogEventSignature",
	1302: "ErrGroupMemberUnknownGroupID",
	1303: "ErrGroupSecretOtherDestMember",
	1304: "ErrGroupSecretAlreadySentToMember",
	1305: "ErrGroupInvalidType",
	1306: "ErrGroupMissing",
	1307: "ErrGroupActivate",
	1308: "ErrGroupDeactivate",
	1309: "ErrGroupInfo",
	1310: "ErrGroupUnknown",
	1400: "ErrEventListMetadata",
	1401: "ErrEventListMessage",
	1500: "ErrMessageKeyPersistencePut",
	1501: "ErrMessageKeyPersistenceGet",
	1600: "ErrBridgeInterrupted",
	1601: "ErrBridgeNotRunning",
	2000: "ErrMessengerInvalidDeepLink",
	2001: "ErrMessengerDeepLinkRequiresPassphrase",
	2002: "ErrMessengerDeepLinkInvalidPassphrase",
	2003: "ErrMessengerStreamEvent",
	2004: "ErrMessengerContactMetadataUnmarshal",
	2100: "ErrDBEntryAlreadyExists",
	2101: "ErrDBAddConversation",
	2102: "ErrDBAddContactRequestOutgoingSent",
	2103: "ErrDBAddContactRequestOutgoingEnqueud",
	2104: "ErrDBAddContactRequestIncomingReceived",
	2105: "ErrDBAddContactRequestIncomingAccepted",
	2106: "ErrDBAddGroupMemberDeviceAdded",
	2107: "ErrDBMultipleRecords",
	2200: "ErrReplayProcessGroupMetadata",
	2201: "ErrReplayProcessGroupMessage",
	2300: "ErrAttachmentPrepare",
	2301: "ErrAttachmentRetrieve",
	2302: "ErrProtocolSend",
	2303: "ErrProtocolEventUnmarshal",
	2304: "ErrProtocolGetGroupInfo",
	2401: "ErrTestEcho",
	2402: "ErrTestEchoRecv",
	2403: "ErrTestEchoSend",
	3001: "ErrCLINoTermcaps",
	4000: "ErrServicesAuth",
	4001: "ErrServicesAuthNotInitialized",
	4002: "ErrServicesAuthWrongState",
	4003: "ErrServicesAuthInvalidResponse",
	4004: "ErrServicesAuthServer",
	4005: "ErrServicesAuthCodeChallenge",
	4006: "ErrServicesAuthServiceInvalidToken",
	4007: "ErrServicesAuthServiceNotSupported",
	4008: "ErrServicesAuthUnknownToken",
	4009: "ErrServicesAuthInvalidURL",
	4100: "ErrServiceReplication",
	4101: "ErrServiceReplicationServer",
	4102: "ErrServiceReplicationMissingEndpoint",
	4200: "ErrServicesDirectory",
	4201: "ErrServicesDirectoryInvalidVerifiedCredentialSubject",
	4202: "ErrServicesDirectoryExistingRecordNotFound",
	4203: "ErrServicesDirectoryRecordLockedAndCantBeReplaced",
	4204: "ErrServicesDirectoryExplicitReplaceFlagRequired",
	4205: "ErrServicesDirectoryInvalidVerifiedCredential",
	4206: "ErrServicesDirectoryExpiredVerifiedCredential",
	4207: "ErrServicesDirectoryInvalidVerifiedCredentialID",
	5000: "ErrBertyAccount",
	5001: "ErrBertyAccountNoIDSpecified",
	5002: "ErrBertyAccountAlreadyOpened",
	5003: "ErrBertyAccountInvalidIDFormat",
	5004: "ErrBertyAccountLoggerDecorator",
	5005: "ErrBertyAccountGRPCClient",
	5006: "ErrBertyAccountOpenAccount",
	5007: "ErrBertyAccountDataNotFound",
	5008: "ErrBertyAccountMetadataUpdate",
	5009: "ErrBertyAccountManagerOpen",
	5010: "ErrBertyAccountManagerClose",
	5011: "ErrBertyAccountInvalidCLIArgs",
	5012: "ErrBertyAccountFSError",
	5013: "ErrBertyAccountAlreadyExists",
	5014: "ErrBertyAccountNoBackupSpecified",
	5015: "ErrBertyAccountIDGenFailed",
	5016: "ErrBertyAccountCreationFailed",
	5017: "ErrBertyAccountUpdateFailed",
	5018: "ErrAppStorageNotSupported",
	6000: "ErrPush",
	6001: "ErrPushWrongAccount",
	6002: "ErrPushUnableToDecrypt",
	6003: "ErrPushInvalidPayload",
	6004: "ErrPushInvalidServerConfig",
	6005: "ErrPushMissingBundleID",
	6006: "ErrPushUnknownDestination",
	6007: "ErrPushProvider",
	6008: "ErrPushUnknownProvider",
	6009: "ErrNoProvidersConfigured",
	6010: "ErrInvalidPrivateKey",
}

var ErrCode_value = map[string]int32{
	"Undefined":                          0,
	"TODO":                               666,
	"ErrNotImplemented":                  777,
	"ErrInternal":                        888,
	"ErrInvalidInput":                    100,
	"ErrInvalidRange":                    101,
	"ErrMissingInput":                    102,
	"ErrSerialization":                   103,
	"ErrDeserialization":                 104,
	"ErrStreamRead":                      105,
	"ErrStreamWrite":                     106,
	"ErrStreamTransform":                 110,
	"ErrStreamSendAndClose":              111,
	"ErrStreamHeaderWrite":               112,
	"ErrStreamHeaderRead":                115,
	"ErrStreamSink":                      113,
	"ErrStreamCloseAndRecv":              114,
	"ErrMissingMapKey":                   107,
	"ErrDBWrite":                         108,
	"ErrDBRead":                          109,
	"ErrDBDestroy":                       120,
	"ErrDBMigrate":                       121,
	"ErrDBReplay":                        122,
	"ErrDBRestore":                       123,
	"ErrDBOpen":                          124,
	"ErrDBClose":                         125,
	"ErrCryptoRandomGeneration":          200,
	"ErrCryptoKeyGeneration":             201,
	"ErrCryptoNonceGeneration":           202,
	"ErrCryptoSignature":                 203,
	"ErrCryptoSignatureVerification":     204,
	"ErrCryptoDecrypt":                   205,
	"ErrCryptoDecryptPayload":            206,
	"ErrCryptoEncrypt":                   207,
	"ErrCryptoKeyConversion":             208,
	"ErrCryptoCipherInit":                209,
	"ErrCryptoKeyDerivation":             210,
	"ErrMap":                             300,
	"ErrForEach":                         301,
	"ErrKeystoreGet":                     400,
	"ErrKeystorePut":                     401,
	"ErrNotFound":                        404,
	"ErrOrbitDBInit":                     1000,
	"ErrOrbitDBOpen":                     1001,
	"ErrOrbitDBAppend":                   1002,
	"ErrOrbitDBDeserialization":          1003,
	"ErrOrbitDBStoreCast":                1004,
	"ErrIPFSAdd":                         1050,
	"ErrIPFSGet":                         1051,
	"ErrIPFSInit":                        1052,
	"ErrIPFSSetupConfig":                 1053,
	"ErrIPFSSetupRepo":                   1054,
	"ErrIPFSSetupHost":                   1055,
	"ErrHandshakeOwnEphemeralKeyGenSend": 1100,
	"ErrHandshakePeerEphemeralKeyRecv":   1101,
	"ErrHandshakeRequesterAuthenticateBoxKeyGen":           1102,
	"ErrHandshakeResponderAcceptBoxKeyGen":                 1103,
	"ErrHandshakeRequesterHello":                           1104,
	"ErrHandshakeResponderHello":                           1105,
	"ErrHandshakeRequesterAuthenticate":                    1106,
	"ErrHandshakeResponderAccept":                          1107,
	"ErrHandshakeRequesterAcknowledge":                     1108,
	"ErrContactRequestSameAccount":                         1200,
	"ErrContactRequestContactAlreadyAdded":                 1201,
	"ErrContactRequestContactBlocked":                      1202,
	"ErrContactRequestContactUndefined":                    1203,
	"ErrContactRequestIncomingAlreadyReceived":             1204,
	"ErrGroupMemberLogEventOpen":                           1300,
	"ErrGroupMemberLogEventSignature":                      1301,
	"ErrGroupMemberUnknownGroupID":                         1302,
	"ErrGroupSecretOtherDestMember":                        1303,
	"ErrGroupSecretAlreadySentToMember":                    1304,
	"ErrGroupInvalidType":                                  1305,
	"ErrGroupMissing":                                      1306,
	"ErrGroupActivate":                                     1307,
	"ErrGroupDeactivate":                                   1308,
	"ErrGroupInfo":                                         1309,
	"ErrGroupUnknown":                                      1310,
	"ErrEventListMetadata":                                 1400,
	"ErrEventListMessage":                                  1401,
	"ErrMessageKeyPersistencePut":                          1500,
	"ErrMessageKeyPersistenceGet":                          1501,
	"ErrBridgeInterrupted":                                 1600,
	"ErrBridgeNotRunning":                                  1601,
	"ErrMessengerInvalidDeepLink":                          2000,
	"ErrMessengerDeepLinkRequiresPassphrase":               2001,
	"ErrMessengerDeepLinkInvalidPassphrase":                2002,
	"ErrMessengerStreamEvent":                              2003,
	"ErrMessengerContactMetadataUnmarshal":                 2004,
	"ErrDBEntryAlreadyExists":                              2100,
	"ErrDBAddConversation":                                 2101,
	"ErrDBAddContactRequestOutgoingSent":                   2102,
	"ErrDBAddContactRequestOutgoingEnqueud":                2103,
	"ErrDBAddContactRequestIncomingReceived":               2104,
	"ErrDBAddContactRequestIncomingAccepted":               2105,
	"ErrDBAddGroupMemberDeviceAdded":                       2106,
	"ErrDBMultipleRecords":                                 2107,
	"ErrReplayProcessGroupMetadata":                        2200,
	"ErrReplayProcessGroupMessage":                         2201,
	"ErrAttachmentPrepare":                                 2300,
	"ErrAttachmentRetrieve":                                2301,
	"ErrProtocolSend":                                      2302,
	"ErrProtocolEventUnmarshal":                            2303,
	"ErrProtocolGetGroupInfo":                              2304,
	"ErrTestEcho":                                          2401,
	"ErrTestEchoRecv":                                      2402,
	"ErrTestEchoSend":                                      2403,
	"ErrCLINoTermcaps":                                     3001,
	"ErrServicesAuth":                                      4000,
	"ErrServicesAuthNotInitialized":                        4001,
	"ErrServicesAuthWrongState":                            4002,
	"ErrServicesAuthInvalidResponse":                       4003,
	"ErrServicesAuthServer":                                4004,
	"ErrServicesAuthCodeChallenge":                         4005,
	"ErrServicesAuthServiceInvalidToken":                   4006,
	"ErrServicesAuthServiceNotSupported":                   4007,
	"ErrServicesAuthUnknownToken":                          4008,
	"ErrServicesAuthInvalidURL":                            4009,
	"ErrServiceReplication":                                4100,
	"ErrServiceReplicationServer":                          4101,
	"ErrServiceReplicationMissingEndpoint":                 4102,
	"ErrServicesDirectory":                                 4200,
	"ErrServicesDirectoryInvalidVerifiedCredentialSubject": 4201,
	"ErrServicesDirectoryExistingRecordNotFound":           4202,
	"ErrServicesDirectoryRecordLockedAndCantBeReplaced":    4203,
	"ErrServicesDirectoryExplicitReplaceFlagRequired":      4204,
	"ErrServicesDirectoryInvalidVerifiedCredential":        4205,
	"ErrServicesDirectoryExpiredVerifiedCredential":        4206,
	"ErrServicesDirectoryInvalidVerifiedCredentialID":      4207,
	"ErrBertyAccount":                                      5000,
	"ErrBertyAccountNoIDSpecified":                         5001,
	"ErrBertyAccountAlreadyOpened":                         5002,
	"ErrBertyAccountInvalidIDFormat":                       5003,
	"ErrBertyAccountLoggerDecorator":                       5004,
	"ErrBertyAccountGRPCClient":                            5005,
	"ErrBertyAccountOpenAccount":                           5006,
	"ErrBertyAccountDataNotFound":                          5007,
	"ErrBertyAccountMetadataUpdate":                        5008,
	"ErrBertyAccountManagerOpen":                           5009,
	"ErrBertyAccountManagerClose":                          5010,
	"ErrBertyAccountInvalidCLIArgs":                        5011,
	"ErrBertyAccountFSError":                               5012,
	"ErrBertyAccountAlreadyExists":                         5013,
	"ErrBertyAccountNoBackupSpecified":                     5014,
	"ErrBertyAccountIDGenFailed":                           5015,
	"ErrBertyAccountCreationFailed":                        5016,
	"ErrBertyAccountUpdateFailed":                          5017,
	"ErrAppStorageNotSupported":                            5018,
	"ErrPush":                                              6000,
	"ErrPushWrongAccount":                                  6001,
	"ErrPushUnableToDecrypt":                               6002,
	"ErrPushInvalidPayload":                                6003,
	"ErrPushInvalidServerConfig":                           6004,
	"ErrPushMissingBundleID":                               6005,
	"ErrPushUnknownDestination":                            6006,
	"ErrPushProvider":                                      6007,
	"ErrPushUnknownProvider":                               6008,
	"ErrNoProvidersConfigured":                             6009,
	"ErrInvalidPrivateKey":                                 6010,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4240057316120df7, []int{0}
}

type ErrDetails struct {
	Codes                []ErrCode `protobuf:"varint,1,rep,packed,name=codes,proto3,enum=berty.errcode.ErrCode" json:"codes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ErrDetails) Reset()         { *m = ErrDetails{} }
func (m *ErrDetails) String() string { return proto.CompactTextString(m) }
func (*ErrDetails) ProtoMessage()    {}
func (*ErrDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_4240057316120df7, []int{0}
}
func (m *ErrDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrDetails.Merge(m, src)
}
func (m *ErrDetails) XXX_Size() int {
	return m.Size()
}
func (m *ErrDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ErrDetails proto.InternalMessageInfo

func (m *ErrDetails) GetCodes() []ErrCode {
	if m != nil {
		return m.Codes
	}
	return nil
}

func init() {
	proto.RegisterEnum("berty.errcode.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterType((*ErrDetails)(nil), "berty.errcode.ErrDetails")
}

func init() { proto.RegisterFile("errcode.proto", fileDescriptor_4240057316120df7) }

var fileDescriptor_4240057316120df7 = []byte{
	// 2171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0x69, 0x90, 0x24, 0x45,
	0x15, 0xa6, 0x41, 0x76, 0x7a, 0x72, 0x77, 0x99, 0x37, 0xc9, 0xb2, 0xbb, 0x5c, 0x33, 0x0d, 0x02,
	0x83, 0x28, 0x3d, 0x01, 0x12, 0x46, 0xe8, 0xbf, 0xbe, 0x66, 0xb6, 0x63, 0xe7, 0xe8, 0xe8, 0x9e,
	0x95, 0x08, 0xff, 0xe5, 0x54, 0xbd, 0xa9, 0x2e, 0xa6, 0x3a, 0xb3, 0xc8, 0xca, 0x1e, 0xb6, 0x51,
	0x23, 0xfc, 0xa1, 0x86, 0x78, 0x82, 0x72, 0x2e, 0x87, 0xf7, 0x15, 0xa1, 0x11, 0x1e, 0x78, 0xa0,
	0x7f, 0xf0, 0x1f, 0x2a, 0xc7, 0xb2, 0xf0, 0x53, 0x23, 0x64, 0xfd, 0xc3, 0xe5, 0x7d, 0x2d, 0x86,
	0x57, 0x64, 0xd6, 0xab, 0x9e, 0xea, 0x99, 0xde, 0x55, 0x7f, 0xcd, 0xf4, 0x7b, 0x5f, 0xbe, 0x7c,
	0xf7, 0x7b, 0x59, 0x6c, 0x3f, 0x6a, 0xed, 0x29, 0x1f, 0xcb, 0xb1, 0x56, 0x46, 0xf1, 0xfd, 0xeb,
	0xa8, 0xcd, 0xa0, 0x4c, 0xc4, 0xcb, 0x0e, 0x04, 0x2a, 0x50, 0x8e, 0x33, 0x6f, 0xff, 0x4b, 0x41,
	0x57, 0xbf, 0x8b, 0xb1, 0x86, 0xd6, 0x75, 0x34, 0x22, 0x8c, 0x12, 0xfe, 0x36, 0x76, 0xa1, 0xc5,
	0x26, 0x87, 0x0b, 0xa5, 0x0b, 0xae, 0xbf, 0xe8, 0xe6, 0x83, 0xe5, 0x11, 0x11, 0xe5, 0x86, 0xd6,
	0x35, 0xe5, 0x63, 0x3b, 0x05, 0xdd, 0xf0, 0xe4, 0xb5, 0x6c, 0x82, 0x48, 0x7c, 0x3f, 0x9b, 0x3c,
	0x26, 0x7d, 0xdc, 0x08, 0x25, 0xfa, 0x70, 0x1e, 0x9f, 0x64, 0x6f, 0x5a, 0x5b, 0xad, 0xaf, 0xc2,
	0x89, 0x0b, 0xf9, 0x41, 0x36, 0xdd, 0xd0, 0x7a, 0x45, 0x99, 0x66, 0x2f, 0x8e, 0xb0, 0x87, 0xd2,
	0xa0, 0x0f, 0x77, 0xed, 0xe1, 0xc0, 0xf6, 0x36, 0xb4, 0x6e, 0x4a, 0x83, 0x5a, 0x8a, 0x08, 0xce,
	0xec, 0xe1, 0x17, 0xb3, 0x29, 0x47, 0xd9, 0x12, 0x51, 0xe8, 0x37, 0x65, 0xdc, 0x37, 0xe0, 0x8f,
	0x12, 0xdb, 0x42, 0x06, 0x08, 0x48, 0xc4, 0xe5, 0x30, 0x49, 0x42, 0x19, 0xa4, 0xc8, 0x0d, 0x7e,
	0x80, 0x41, 0x43, 0xeb, 0x0e, 0xea, 0x50, 0x44, 0xe1, 0x9d, 0xc2, 0x84, 0x4a, 0x42, 0xc0, 0x0f,
	0x32, 0xee, 0x0c, 0x4c, 0x46, 0xe8, 0x5d, 0x3e, 0xcd, 0xf6, 0x5b, 0xb4, 0xd1, 0x28, 0x7a, 0x6d,
	0x14, 0x3e, 0x84, 0x9c, 0xb3, 0x8b, 0x86, 0xa4, 0x5b, 0x75, 0x68, 0x10, 0x6e, 0xa3, 0xe3, 0x29,
	0x6d, 0x4d, 0x0b, 0x99, 0x6c, 0x28, 0xdd, 0x03, 0xc9, 0x2f, 0x65, 0x97, 0x0c, 0xe9, 0x1d, 0x94,
	0x7e, 0x45, 0xfa, 0xb5, 0x48, 0x25, 0x08, 0x8a, 0x1f, 0x66, 0x07, 0x86, 0xac, 0x23, 0x28, 0x7c,
	0xd4, 0xa9, 0xb0, 0x98, 0x1f, 0x62, 0x17, 0xef, 0xe0, 0xb8, 0x9b, 0x93, 0x11, 0x65, 0x3a, 0xa1,
	0xdc, 0x84, 0xdb, 0x47, 0x2e, 0x70, 0x92, 0x2b, 0xd2, 0x6f, 0xa3, 0xb7, 0x05, 0x9a, 0x0c, 0x25,
	0xeb, 0x97, 0x45, 0x7c, 0x14, 0x07, 0xb0, 0xc9, 0x2f, 0x4a, 0x23, 0x59, 0x4d, 0x2f, 0x8b, 0x6c,
	0x44, 0xdc, 0x6f, 0x77, 0x45, 0x8f, 0x03, 0xdb, 0xe7, 0x7e, 0xd6, 0x31, 0x31, 0x5a, 0x0d, 0xe0,
	0xf8, 0x90, 0xb2, 0x1c, 0x06, 0x5a, 0x18, 0x84, 0x01, 0x9f, 0x72, 0x21, 0xb1, 0x47, 0xe2, 0x48,
	0x0c, 0xe0, 0xce, 0x21, 0xa4, 0x8d, 0x89, 0x51, 0x1a, 0xe1, 0xbd, 0x43, 0xa9, 0xab, 0x31, 0x4a,
	0x78, 0xdf, 0xf0, 0xd2, 0xd4, 0xf6, 0xf7, 0xf3, 0x19, 0x76, 0xa9, 0xcd, 0x08, 0x3d, 0x88, 0x8d,
	0x6a, 0x0b, 0xe9, 0xab, 0xde, 0x22, 0x4a, 0xd4, 0xa9, 0xd3, 0x9f, 0x2a, 0xf0, 0xcb, 0xd9, 0xc1,
	0x21, 0xff, 0x28, 0x0e, 0x72, 0xcc, 0x9f, 0x16, 0xf8, 0x95, 0xec, 0xf0, 0x90, 0xb9, 0xa2, 0xa4,
	0x87, 0x39, 0xf6, 0xcf, 0x0a, 0xfc, 0x90, 0x0b, 0x45, 0xca, 0xee, 0x84, 0x81, 0x14, 0xa6, 0xaf,
	0x11, 0x7e, 0x5e, 0xe0, 0x6f, 0x66, 0x33, 0xbb, 0x19, 0xef, 0x46, 0x1d, 0x6e, 0x84, 0x5e, 0x7a,
	0xfa, 0xe9, 0x02, 0xbf, 0xc4, 0x39, 0x2d, 0x05, 0xd5, 0xd1, 0xb3, 0x7f, 0xe1, 0x99, 0x02, 0xbf,
	0x82, 0x1d, 0xda, 0x49, 0x6e, 0x89, 0x41, 0xa4, 0x84, 0x0f, 0xcf, 0x8e, 0x1e, 0x6a, 0xc8, 0xf4,
	0xd0, 0x73, 0xbb, 0xac, 0xa8, 0x29, 0xb9, 0x85, 0x3a, 0xb1, 0x17, 0x9d, 0x2c, 0xf0, 0xc3, 0x2e,
	0xc8, 0x29, 0xb3, 0x16, 0xc6, 0x5d, 0xd4, 0x4d, 0x19, 0x1a, 0x78, 0x7e, 0xd7, 0xb1, 0x3a, 0xea,
	0x70, 0x2b, 0xd5, 0xef, 0x54, 0x81, 0xef, 0x65, 0x7b, 0x6c, 0x50, 0x45, 0x0c, 0xdf, 0x38, 0x9f,
	0x4f, 0x39, 0xb7, 0x2e, 0x28, 0xdd, 0x10, 0x5e, 0x17, 0xbe, 0x79, 0x3e, 0xbf, 0xd8, 0xa5, 0xe6,
	0x51, 0x1c, 0xb8, 0x38, 0x2c, 0xa2, 0x81, 0xbb, 0x2f, 0xd8, 0x41, 0x6c, 0xf5, 0x0d, 0xdc, 0x73,
	0x01, 0x95, 0xd5, 0x8a, 0x32, 0x0b, 0xaa, 0x2f, 0x7d, 0xb8, 0x37, 0x83, 0xad, 0xea, 0xf5, 0xd0,
	0xd4, 0xab, 0x4e, 0x97, 0x97, 0x27, 0x46, 0x89, 0x2e, 0x98, 0xaf, 0x4c, 0x90, 0xb9, 0x44, 0xac,
	0xc4, 0x31, 0x4a, 0x1f, 0x5e, 0x9d, 0xa0, 0xa0, 0x12, 0x79, 0x67, 0x25, 0xbd, 0x36, 0x41, 0x16,
	0x13, 0xbf, 0x63, 0x75, 0xa9, 0x89, 0xc4, 0xc0, 0xeb, 0x13, 0x64, 0x47, 0xb3, 0xb5, 0xd0, 0xa9,
	0xf8, 0x3e, 0x9c, 0x28, 0xe6, 0x08, 0xd6, 0x86, 0x87, 0x8b, 0x59, 0x17, 0x68, 0x2d, 0x74, 0x9c,
	0x66, 0x8f, 0x14, 0x29, 0xcc, 0x96, 0xd2, 0x41, 0xd3, 0x8f, 0x6b, 0x4a, 0x6e, 0x84, 0x01, 0x3c,
	0x5a, 0x24, 0xed, 0x86, 0x8c, 0x36, 0xc6, 0x0a, 0x1e, 0xdb, 0x45, 0x3e, 0xa2, 0x12, 0x03, 0x9f,
	0x2d, 0xf2, 0x39, 0x76, 0x75, 0x43, 0xeb, 0x23, 0x42, 0xfa, 0x49, 0x57, 0x6c, 0xe2, 0xea, 0x1d,
	0xb2, 0x11, 0x77, 0xb1, 0x87, 0x5a, 0x44, 0x69, 0xe2, 0xd9, 0xaa, 0x85, 0xa7, 0x8b, 0xfc, 0x5a,
	0x56, 0xca, 0x03, 0x5b, 0x88, 0x3a, 0x8f, 0x74, 0x35, 0xf7, 0x4c, 0x91, 0xcf, 0xb3, 0x1b, 0xf2,
	0xb0, 0x36, 0xde, 0xde, 0xc7, 0xc4, 0xa0, 0xae, 0xf4, 0x4d, 0x17, 0xa5, 0xb1, 0x99, 0x86, 0x55,
	0x75, 0x3c, 0x95, 0x0d, 0xcf, 0x16, 0xf9, 0x5b, 0xd8, 0x35, 0xa3, 0x07, 0x92, 0x58, 0x49, 0x1f,
	0x75, 0xc5, 0xf3, 0x30, 0x36, 0xdb, 0xd0, 0xe7, 0x8a, 0x7c, 0x96, 0x5d, 0x36, 0x56, 0xf6, 0x11,
	0x8c, 0x22, 0x05, 0x27, 0xc7, 0x00, 0x48, 0x56, 0x0a, 0x78, 0xbe, 0xc8, 0xaf, 0x63, 0x57, 0xfd,
	0x57, 0xed, 0xe0, 0x54, 0x91, 0x97, 0xd8, 0xe5, 0xe7, 0x50, 0x0a, 0x5e, 0xd8, 0xe5, 0x8e, 0x6d,
	0x49, 0xde, 0xa6, 0x54, 0x77, 0x44, 0xe8, 0x07, 0x08, 0x2f, 0x16, 0xf9, 0x55, 0xec, 0x0a, 0xd7,
	0xfa, 0xa5, 0x11, 0x9e, 0x21, 0x50, 0x47, 0xf4, 0xb0, 0xe2, 0x79, 0xaa, 0x2f, 0x0d, 0x7c, 0x6b,
	0x92, 0x1c, 0x30, 0x0a, 0xa1, 0x5f, 0x95, 0x48, 0xa3, 0xf0, 0x07, 0x15, 0xdf, 0x47, 0x1f, 0xbe,
	0x3d, 0xc9, 0xaf, 0x61, 0xb3, 0x67, 0x83, 0x56, 0x23, 0xe5, 0x6d, 0xa2, 0x0f, 0xdf, 0x99, 0x24,
	0x23, 0xc7, 0xa2, 0xb6, 0x67, 0xcf, 0x77, 0x27, 0xf9, 0x8d, 0xec, 0xfa, 0x5d, 0xb8, 0xa6, 0xf4,
	0x54, 0x2f, 0x94, 0x01, 0xdd, 0xdc, 0x46, 0x0f, 0xc3, 0x2d, 0xf4, 0xe1, 0xf1, 0x49, 0x72, 0xee,
	0xa2, 0x56, 0xfd, 0x78, 0x19, 0x7b, 0xeb, 0xa8, 0x97, 0x54, 0xd0, 0xd8, 0x42, 0x69, 0x5c, 0x59,
	0xdc, 0xcb, 0x48, 0xbb, 0x31, 0x80, 0xed, 0x2e, 0x74, 0x1f, 0x23, 0x8f, 0xe4, 0x50, 0xc7, 0xa4,
	0xf5, 0x98, 0x74, 0x94, 0x66, 0x1d, 0xee, 0x67, 0xfc, 0x6a, 0x76, 0x65, 0x06, 0xe9, 0xa0, 0xa7,
	0xd1, 0xac, 0x9a, 0x2e, 0xda, 0xd9, 0x64, 0xd2, 0x13, 0xf0, 0x00, 0x23, 0x23, 0x73, 0x18, 0xd2,
	0xb8, 0x83, 0xd2, 0xac, 0x29, 0xc2, 0x3d, 0xc8, 0xa8, 0xe8, 0x52, 0xe1, 0xe9, 0x70, 0x5c, 0x1b,
	0xc4, 0x08, 0x0f, 0x31, 0x7e, 0xc0, 0x0d, 0xc7, 0x54, 0x91, 0x74, 0x46, 0xc0, 0x09, 0x46, 0x65,
	0xe2, 0xa8, 0x15, 0xcf, 0xd8, 0xc6, 0x83, 0xf0, 0x30, 0xa3, 0x6a, 0x73, 0xe4, 0x3a, 0x8a, 0x8c,
	0xf1, 0x08, 0xe3, 0xd3, 0xae, 0xf5, 0x93, 0xfc, 0x0d, 0x05, 0x8f, 0x8e, 0x08, 0x26, 0xdb, 0xe0,
	0x31, 0xc6, 0x2f, 0x75, 0xe3, 0xce, 0xf9, 0x63, 0x29, 0xb4, 0x96, 0x18, 0xe1, 0x0b, 0x23, 0xe0,
	0x4c, 0xa6, 0x63, 0x8e, 0x95, 0x24, 0x22, 0x40, 0x78, 0x83, 0x51, 0x1e, 0x12, 0xe1, 0x28, 0x0e,
	0x5a, 0xb6, 0x7f, 0x26, 0x06, 0xa5, 0xe7, 0xfa, 0xd8, 0x2f, 0xf6, 0x9e, 0x0b, 0x61, 0x5b, 0xc7,
	0x2f, 0xf7, 0xd2, 0xc5, 0x55, 0x1d, 0xfa, 0x01, 0xba, 0x35, 0x42, 0xf7, 0x63, 0xbb, 0x5b, 0x3c,
	0xb9, 0x8f, 0x2e, 0x4e, 0x59, 0x2b, 0xca, 0xb4, 0xfb, 0x52, 0x5a, 0x37, 0xfc, 0x64, 0x5f, 0x4e,
	0x2c, 0xca, 0x00, 0xb3, 0xbd, 0xa2, 0x8e, 0x18, 0x2f, 0xd9, 0xb9, 0x7b, 0x72, 0x8a, 0xbf, 0x95,
	0x5d, 0x97, 0x47, 0x64, 0x2c, 0x9b, 0x47, 0xa1, 0xc6, 0xa4, 0x25, 0x92, 0x24, 0xee, 0x6a, 0x91,
	0x20, 0x3c, 0x3f, 0xc5, 0x6f, 0x60, 0xd7, 0x8e, 0x03, 0x93, 0xd8, 0x1c, 0xf6, 0xd4, 0x14, 0x8d,
	0x9a, 0x21, 0x36, 0x1d, 0xed, 0xce, 0x39, 0xf0, 0xc2, 0x14, 0x55, 0xcb, 0x90, 0x4b, 0xd9, 0x9b,
	0x79, 0xf3, 0x98, 0xec, 0x09, 0x9d, 0x74, 0x45, 0x04, 0x2f, 0x66, 0x82, 0xea, 0xd5, 0x86, 0x34,
	0x7a, 0x40, 0xe9, 0xd1, 0x38, 0x1e, 0x26, 0x26, 0x81, 0xc7, 0x81, 0xdc, 0x52, 0xaf, 0x56, 0x7c,
	0x9f, 0x06, 0x53, 0xda, 0xa8, 0xbf, 0x07, 0xd4, 0x13, 0x33, 0x56, 0xae, 0x3a, 0x56, 0xfb, 0x26,
	0x50, 0xa1, 0x0c, 0x6c, 0x92, 0xc1, 0xf7, 0x81, 0xcc, 0x3a, 0x07, 0xb0, 0x21, 0x6f, 0xef, 0x63,
	0xdf, 0x87, 0x1f, 0x00, 0xf9, 0x6b, 0x0c, 0x36, 0x2b, 0xb9, 0x61, 0xad, 0xfd, 0xf0, 0x7f, 0x00,
	0xa7, 0x8d, 0x08, 0x7d, 0x78, 0x02, 0x68, 0xae, 0x3b, 0x70, 0xae, 0xac, 0xea, 0xb8, 0x15, 0x7a,
	0x98, 0xb6, 0x8e, 0x1f, 0x6d, 0x9b, 0xbb, 0xdc, 0x8f, 0x4c, 0x18, 0x47, 0xd8, 0x46, 0x4f, 0x69,
	0x3f, 0x81, 0x1f, 0x03, 0x95, 0x5b, 0xba, 0xcc, 0xb4, 0xb4, 0xf2, 0x30, 0x49, 0x48, 0x0e, 0xa5,
	0xe8, 0x83, 0xd3, 0x54, 0xb5, 0xe3, 0x30, 0x69, 0xae, 0x3e, 0x34, 0x4d, 0x37, 0x54, 0x8c, 0x11,
	0x5e, 0xd7, 0xae, 0xaf, 0x2d, 0x8d, 0xb1, 0xd0, 0x08, 0xff, 0x98, 0xe6, 0x97, 0xb9, 0x25, 0x6d,
	0x9b, 0xd5, 0x46, 0xa3, 0x43, 0xdc, 0x42, 0xf8, 0xe7, 0x34, 0x55, 0x4b, 0xcb, 0x6e, 0xd9, 0x9e,
	0x8a, 0xdc, 0xb4, 0xf9, 0xd7, 0x34, 0xcd, 0xd2, 0x8c, 0xea, 0xa2, 0xbf, 0x1d, 0xdb, 0x7f, 0x4f,
	0x53, 0x6c, 0x33, 0xfe, 0x22, 0x9a, 0xed, 0x0a, 0xfc, 0x00, 0xa7, 0x69, 0xb9, 0x86, 0x89, 0x69,
	0x78, 0x5d, 0x05, 0x2f, 0x71, 0xba, 0x25, 0xa3, 0xb8, 0x61, 0x75, 0x7a, 0x27, 0xd5, 0xdd, 0xfd,
	0x6b, 0x9e, 0x6d, 0x33, 0x4b, 0xcd, 0x15, 0xb5, 0x86, 0xba, 0xe7, 0x89, 0x38, 0x81, 0x27, 0x0e,
	0x11, 0xb8, 0x83, 0xda, 0xfa, 0x35, 0xb1, 0x13, 0x03, 0x3e, 0x37, 0x4b, 0xce, 0xcb, 0x53, 0xed,
	0x0a, 0x2f, 0x43, 0xe3, 0x66, 0x3f, 0xfa, 0xf0, 0xf9, 0x59, 0x32, 0x26, 0x8f, 0xb9, 0x55, 0x2b,
	0x19, 0x74, 0x8c, 0xed, 0x21, 0x5f, 0x98, 0xa5, 0x00, 0xe6, 0xf9, 0xd9, 0x1e, 0xef, 0xe6, 0x4e,
	0x82, 0xf0, 0xc5, 0x59, 0xf2, 0x61, 0x1e, 0x64, 0xff, 0x47, 0x0d, 0x5f, 0x9a, 0xa5, 0xe8, 0xe4,
	0x79, 0xf6, 0xb1, 0x51, 0xeb, 0x8a, 0x28, 0xb2, 0x55, 0x02, 0x5f, 0x9e, 0xa5, 0x9c, 0xde, 0x79,
	0x3c, 0xf4, 0x30, 0xeb, 0x8a, 0x6a, 0x13, 0x25, 0x7c, 0xe5, 0x1c, 0xc0, 0x15, 0x65, 0x3a, 0xfd,
	0x38, 0x56, 0xda, 0xa6, 0xdd, 0x57, 0x67, 0xa9, 0x45, 0xe4, 0x81, 0xd4, 0xed, 0x52, 0x51, 0x5f,
	0x1b, 0x67, 0x37, 0x5d, 0x76, 0xac, 0xbd, 0x04, 0x5f, 0xdf, 0x61, 0x92, 0xcd, 0xad, 0x6c, 0x0f,
	0xfd, 0x60, 0x69, 0x54, 0x7a, 0x8e, 0x47, 0x46, 0x7f, 0xa8, 0x44, 0x9d, 0x60, 0x37, 0x82, 0x9a,
	0x79, 0x43, 0xfa, 0xb1, 0x0a, 0xa5, 0x81, 0x0f, 0x97, 0x28, 0x35, 0x33, 0x45, 0xea, 0xa1, 0x46,
	0xcf, 0x28, 0x3d, 0x80, 0x97, 0x4b, 0xfc, 0x9d, 0xec, 0x96, 0x71, 0x2c, 0x52, 0x34, 0xdd, 0x8e,
	0xd1, 0xaf, 0x69, 0xf4, 0xed, 0x7e, 0x20, 0xa2, 0x4e, 0x7f, 0xfd, 0x36, 0xf4, 0x0c, 0xbc, 0x52,
	0xa2, 0x55, 0x67, 0xd7, 0x51, 0xd7, 0x62, 0xd2, 0x7a, 0x56, 0xda, 0x1f, 0x6e, 0x98, 0xaf, 0x96,
	0xf8, 0x3b, 0xd8, 0x4d, 0xe3, 0x0e, 0xa4, 0xc0, 0x25, 0x37, 0xbf, 0xed, 0xfb, 0x48, 0x48, 0x53,
	0x75, 0x06, 0x09, 0x0f, 0x7d, 0x78, 0xad, 0xc4, 0x6f, 0x61, 0xf3, 0xe3, 0x2f, 0xb2, 0x36, 0x87,
	0x86, 0xa0, 0x0b, 0x91, 0x08, 0xa8, 0xfb, 0xfa, 0xf0, 0x7a, 0x89, 0xdf, 0xcc, 0x6e, 0xfc, 0xbf,
	0x2c, 0x83, 0xdf, 0x9c, 0xf5, 0x4c, 0xe3, 0x78, 0x6c, 0xa5, 0x8e, 0x39, 0xf3, 0xdb, 0xb3, 0x6a,
	0x77, 0xd6, 0x7b, 0x9a, 0x75, 0xf8, 0x5d, 0x89, 0xaa, 0xa9, 0x6a, 0xdf, 0xcd, 0xd9, 0x2e, 0xf4,
	0x91, 0x39, 0x4a, 0xe4, 0x3c, 0x75, 0x45, 0x35, 0xeb, 0x9d, 0x18, 0x3d, 0x27, 0x04, 0xee, 0x1a,
	0x07, 0xa1, 0xd6, 0x6e, 0xd7, 0x10, 0xf4, 0xe1, 0xa3, 0x73, 0x54, 0x4f, 0x79, 0x48, 0xf6, 0x58,
	0xae, 0x2f, 0x28, 0xdd, 0x13, 0x06, 0x3e, 0x36, 0x0e, 0xb4, 0xa4, 0x02, 0x37, 0x9b, 0x3c, 0xa5,
	0x85, 0x51, 0x1a, 0x3e, 0x3e, 0x47, 0x19, 0x9c, 0x07, 0x2d, 0xb6, 0x5b, 0xb5, 0x5a, 0x14, 0xda,
	0x01, 0xf0, 0x89, 0x39, 0xda, 0x89, 0xf2, 0x7c, 0xab, 0x45, 0x66, 0xd0, 0x27, 0xe7, 0x28, 0x8d,
	0xf3, 0x80, 0xba, 0x30, 0x62, 0x98, 0x14, 0x9f, 0x9a, 0xa3, 0x06, 0x92, 0x47, 0x0c, 0x87, 0x59,
	0xec, 0xdb, 0x06, 0x71, 0xf7, 0xb8, 0x6b, 0x96, 0x85, 0x14, 0x01, 0x6a, 0xb7, 0x7a, 0xdd, 0x33,
	0xee, 0x1a, 0x02, 0xa4, 0x0f, 0xce, 0x4f, 0x8f, 0xbb, 0x86, 0x7c, 0x52, 0x5b, 0x6a, 0x56, 0x74,
	0x90, 0xc0, 0x67, 0xe6, 0xe8, 0xe1, 0x95, 0xc7, 0x2c, 0x74, 0x1a, 0x5a, 0x2b, 0x0d, 0xf7, 0x9e,
	0xc3, 0xef, 0x34, 0x52, 0xef, 0x9b, 0xa3, 0x9d, 0x78, 0x34, 0x7a, 0x55, 0xe1, 0x6d, 0xf6, 0xe3,
	0xed, 0x08, 0xde, 0x3f, 0xce, 0x9a, 0x66, 0x7d, 0x11, 0xe5, 0x82, 0x08, 0x23, 0xf4, 0xe1, 0x81,
	0x71, 0xba, 0xd6, 0x34, 0xba, 0xda, 0x26, 0xcc, 0x83, 0xe3, 0x2c, 0x4e, 0xdd, 0x45, 0x88, 0x87,
	0xb2, 0xd8, 0x55, 0xe2, 0xd8, 0x3e, 0xb5, 0x44, 0x30, 0xda, 0xbf, 0x4e, 0xcc, 0xf1, 0x7d, 0xee,
	0xab, 0x4c, 0xab, 0x9f, 0x74, 0xe1, 0xf7, 0x65, 0x5a, 0x85, 0xec, 0x2f, 0xd7, 0x9b, 0xb3, 0x10,
	0xfe, 0xa1, 0x4c, 0x5e, 0xb1, 0x9c, 0x63, 0x52, 0xac, 0x47, 0xb8, 0x36, 0x7c, 0x17, 0xff, 0xb1,
	0x4c, 0x2d, 0xcc, 0x32, 0x87, 0xbb, 0x4c, 0xfa, 0x2a, 0xfe, 0x53, 0x99, 0xec, 0xcc, 0xf1, 0xd2,
	0xde, 0x45, 0x2f, 0xb5, 0x3f, 0xe7, 0x25, 0x53, 0xcf, 0xaa, 0xf6, 0xa5, 0x1f, 0x61, 0xb3, 0x0e,
	0x7f, 0x29, 0x67, 0x13, 0xd0, 0x5d, 0xeb, 0xda, 0xaa, 0xdd, 0x7f, 0x43, 0x99, 0x36, 0xc8, 0xbf,
	0x96, 0xb3, 0xb9, 0xd9, 0x4f, 0xba, 0x2d, 0xad, 0xb6, 0x42, 0x1f, 0x35, 0xfc, 0x6d, 0x54, 0x59,
	0x77, 0x6a, 0xc8, 0x3c, 0x53, 0xa6, 0x0f, 0x07, 0x2b, 0x2a, 0xa3, 0x25, 0xa9, 0x2a, 0x7d, 0xdb,
	0x30, 0xde, 0x28, 0x53, 0x97, 0xcc, 0xec, 0x70, 0x8f, 0x6e, 0xbb, 0x51, 0xc2, 0xdf, 0xcb, 0xd5,
	0x9b, 0x4e, 0xbe, 0x34, 0x73, 0xde, 0x53, 0xa7, 0x67, 0x0a, 0x27, 0x4f, 0xcf, 0x14, 0x7e, 0x75,
	0x7a, 0xa6, 0xf0, 0x9e, 0xd9, 0xf4, 0x93, 0x97, 0x41, 0xaf, 0x3b, 0xef, 0xfe, 0x9d, 0x0f, 0xd4,
	0x7c, 0xbc, 0x19, 0xcc, 0xd3, 0x47, 0xb0, 0xf5, 0x3d, 0xee, 0xc3, 0xd9, 0xdb, 0xff, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x84, 0x60, 0x33, 0xc8, 0x6e, 0x13, 0x00, 0x00,
}

func (m *ErrDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Codes) > 0 {
		dAtA2 := make([]byte, len(m.Codes)*10)
		var j1 int
		for _, num := range m.Codes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintErrcode(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintErrcode(dAtA []byte, offset int, v uint64) int {
	offset -= sovErrcode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ErrDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Codes) > 0 {
		l = 0
		for _, e := range m.Codes {
			l += sovErrcode(uint64(e))
		}
		n += 1 + sovErrcode(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovErrcode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErrcode(x uint64) (n int) {
	return sovErrcode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ErrDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrcode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ErrCode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrcode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ErrCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Codes = append(m.Codes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrcode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErrcode
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErrcode
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Codes) == 0 {
					m.Codes = make([]ErrCode, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ErrCode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErrcode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ErrCode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Codes = append(m.Codes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Codes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrcode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthErrcode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrcode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrcode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrcode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrcode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErrcode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupErrcode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthErrcode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthErrcode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrcode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupErrcode = fmt.Errorf("proto: unexpected end of group")
)
