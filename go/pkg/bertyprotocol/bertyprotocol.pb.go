// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bertyprotocol.proto

package bertyprotocol

import (
	context "context"
	fmt "fmt"
	math "math"

	bertytypes "berty.tech/berty/v2/go/pkg/bertytypes"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("bertyprotocol.proto", fileDescriptor_047e04c733cf8554) }

var fileDescriptor_047e04c733cf8554 = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xdf, 0x4e, 0x14, 0x31,
	0x14, 0xc6, 0xb3, 0x37, 0x26, 0x36, 0x0a, 0x58, 0x04, 0x0d, 0x21, 0x08, 0x22, 0x7f, 0xd5, 0x5d,
	0x81, 0x98, 0x18, 0xef, 0x96, 0x3f, 0x21, 0x28, 0x24, 0x66, 0x09, 0x89, 0x91, 0xc4, 0xa4, 0x33,
	0x7b, 0x58, 0x46, 0x86, 0x76, 0x6c, 0xbb, 0x13, 0xf7, 0xd6, 0x2b, 0xaf, 0x7c, 0x03, 0x1f, 0xd0,
	0xb7, 0x30, 0xed, 0x94, 0x66, 0x3b, 0x3b, 0xed, 0xce, 0x7a, 0x37, 0xf4, 0xfb, 0x9d, 0xef, 0x3b,
	0xed, 0x9c, 0x29, 0x8b, 0x66, 0x23, 0xe0, 0x72, 0x90, 0x71, 0x26, 0x59, 0xcc, 0xd2, 0xa6, 0x7e,
	0xc0, 0x53, 0x7a, 0xb1, 0x79, 0xb7, 0xba, 0x30, 0xa3, 0xff, 0x96, 0x83, 0x0c, 0x44, 0xb1, 0xb8,
	0xfb, 0x77, 0x1e, 0x4d, 0x7f, 0x32, 0xf2, 0x39, 0xf0, 0x3c, 0x89, 0x01, 0x77, 0x11, 0x3e, 0xa1,
	0x42, 0x12, 0x1a, 0xc3, 0xd1, 0x8f, 0x8c, 0x71, 0x79, 0x48, 0x24, 0xc1, 0x1b, 0xcd, 0xc2, 0xac,
	0xa8, 0x1e, 0x05, 0x9a, 0x1d, 0xf8, 0xde, 0x07, 0x21, 0x17, 0xd6, 0xc6, 0x83, 0x59, 0x3a, 0xc0,
	0x39, 0x7a, 0x7a, 0xa7, 0x1d, 0x83, 0x3c, 0x60, 0xf4, 0x2a, 0xe9, 0xf5, 0x39, 0x91, 0x09, 0xa3,
	0xf8, 0x75, 0xa5, 0x45, 0x19, 0xb3, 0x89, 0x2f, 0xeb, 0xe2, 0x2a, 0x57, 0xa0, 0x27, 0x07, 0x8c,
	0x4a, 0x12, 0x4b, 0x53, 0xde, 0x81, 0x2b, 0xe0, 0x40, 0x63, 0xc0, 0xaf, 0x1c, 0x1f, 0x0f, 0x65,
	0x53, 0xb7, 0x6b, 0xd2, 0x2a, 0xf4, 0x16, 0xcd, 0xb9, 0xc0, 0x61, 0x22, 0x48, 0x94, 0x02, 0x0e,
	0x99, 0x18, 0xc6, 0x06, 0x6e, 0xd6, 0x62, 0x55, 0xdc, 0x37, 0xf4, 0xd8, 0x95, 0x8f, 0xa8, 0x4e,
	0xdb, 0x0a, 0x38, 0x14, 0x88, 0x0d, 0xdb, 0xa8, 0x83, 0xaa, 0xac, 0x9f, 0x0d, 0xb4, 0x58, 0xde,
	0xbc, 0x80, 0xa1, 0x53, 0xdd, 0x09, 0x9e, 0xd3, 0x30, 0x6a, 0xc3, 0x5b, 0x93, 0x94, 0xa8, 0x26,
	0xba, 0x08, 0xbb, 0xd4, 0x39, 0xd0, 0x2e, 0x0e, 0xed, 0x41, 0x01, 0x9e, 0x91, 0xad, 0x04, 0x2b,
	0x8f, 0xb5, 0x1d, 0xc7, 0x90, 0xc9, 0xe0, 0xb1, 0x16, 0x48, 0xad, 0x63, 0xb5, 0xa8, 0x6f, 0x62,
	0x62, 0xc2, 0xbb, 0xe3, 0x26, 0x46, 0x31, 0x75, 0x27, 0xc6, 0xb0, 0x2a, 0xae, 0x83, 0x1e, 0x18,
	0x79, 0x3f, 0x65, 0xf1, 0x0d, 0x5e, 0xa9, 0xaa, 0xd4, 0x92, 0x35, 0x7f, 0x16, 0x42, 0x94, 0xe7,
	0x67, 0x34, 0x65, 0x56, 0x2f, 0x68, 0xa4, 0x5d, 0x57, 0xab, 0x4a, 0x8c, 0x68, 0x7d, 0x57, 0xc2,
	0x90, 0x72, 0xee, 0xa1, 0x59, 0xb3, 0xde, 0x4e, 0x13, 0x22, 0x3e, 0xc2, 0x40, 0xbf, 0xef, 0xca,
	0xed, 0x0e, 0x13, 0x36, 0x63, 0xbd, 0x06, 0xa9, 0x82, 0x32, 0x34, 0x7f, 0xd6, 0x4f, 0x65, 0x72,
	0x06, 0xb7, 0x11, 0xf0, 0x63, 0xce, 0xfa, 0xd9, 0x01, 0x07, 0x22, 0x01, 0xbb, 0x77, 0x4e, 0x35,
	0x64, 0xe3, 0xb6, 0xea, 0xc1, 0x66, 0xc6, 0xca, 0xfa, 0x07, 0x96, 0x50, 0x1c, 0xb6, 0x50, 0x88,
	0x67, 0xc6, 0x3c, 0xa8, 0x99, 0xb1, 0xb2, 0x7a, 0x0a, 0x24, 0x2f, 0xdf, 0x4a, 0x95, 0x8c, 0x67,
	0xc6, 0x7c, 0xac, 0x8a, 0xfb, 0xd3, 0x40, 0x6b, 0x65, 0x5d, 0x9f, 0x79, 0x07, 0x04, 0x4b, 0x73,
	0xe0, 0x6a, 0x24, 0x53, 0x26, 0x00, 0xbf, 0x0f, 0x7a, 0x56, 0xd6, 0xd8, 0x7e, 0xde, 0xfd, 0x57,
	0xad, 0xea, 0xef, 0x57, 0x03, 0x2d, 0x8d, 0xf0, 0xdd, 0xdb, 0x84, 0x76, 0x58, 0x0a, 0xc7, 0x9c,
	0x50, 0x89, 0xf7, 0xc2, 0xe6, 0x0e, 0x6c, 0x3b, 0xda, 0x99, 0xac, 0x48, 0xb5, 0xf2, 0xbb, 0x81,
	0x96, 0xcb, 0xe0, 0x09, 0xcd, 0x13, 0xa9, 0xff, 0x93, 0x99, 0x11, 0x7c, 0x1b, 0xf4, 0x2d, 0xe3,
	0xb6, 0x9d, 0xbd, 0x49, 0xcb, 0x54, 0x43, 0x97, 0x68, 0xba, 0x9d, 0x65, 0x67, 0x20, 0x49, 0x97,
	0x48, 0xa2, 0xbf, 0xb6, 0x17, 0x8e, 0x4f, 0x49, 0xb5, 0x69, 0xcf, 0xc7, 0x50, 0xe6, 0xa2, 0xd0,
	0x82, 0x10, 0xa4, 0x07, 0xda, 0x7b, 0x75, 0xb4, 0xca, 0x8a, 0x9e, 0x8b, 0x62, 0x04, 0x52, 0xce,
	0xd7, 0x68, 0x5e, 0xef, 0xca, 0x86, 0xf6, 0x23, 0x11, 0xf3, 0x24, 0x2a, 0x7f, 0xbf, 0xd5, 0x90,
	0xe7, 0xaa, 0x73, 0xe0, 0xa3, 0x1c, 0xa8, 0x7c, 0xd3, 0xc0, 0x80, 0xe6, 0xcc, 0x7a, 0xd1, 0x83,
	0x0d, 0xda, 0xae, 0xaa, 0x75, 0x19, 0x9b, 0xb3, 0xe4, 0x65, 0xef, 0x62, 0xbe, 0xa2, 0x47, 0x4e,
	0xfc, 0x69, 0x22, 0x24, 0x5e, 0xf7, 0xb7, 0xa7, 0xf4, 0x49, 0xb6, 0x71, 0x89, 0x66, 0x86, 0x63,
	0xb5, 0xfd, 0x9a, 0xb7, 0x2b, 0xc7, 0x7d, 0x7c, 0xf3, 0x27, 0xe8, 0xbe, 0x99, 0xb1, 0x2b, 0x86,
	0x2b, 0x70, 0xb5, 0x6e, 0xed, 0x16, 0xbd, 0xba, 0x7a, 0xb1, 0x17, 0xe8, 0x61, 0x3b, 0x96, 0x49,
	0x4e, 0x24, 0x68, 0x09, 0x97, 0xe6, 0x6c, 0x58, 0xb3, 0x96, 0xcb, 0x41, 0xc6, 0x8c, 0xf9, 0x21,
	0x10, 0xc7, 0xd8, 0x1d, 0xf3, 0x92, 0xea, 0x19, 0xf3, 0x51, 0x2a, 0x4b, 0x07, 0xfb, 0xdb, 0x5f,
	0x36, 0x0d, 0x04, 0xf1, 0x75, 0x4b, 0x3f, 0xb6, 0xf2, 0xdd, 0x56, 0x8f, 0xb5, 0xb2, 0x9b, 0x5e,
	0xcb, 0xf9, 0xfd, 0x1e, 0xdd, 0xd3, 0x4f, 0x7b, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xd8,
	0x83, 0x4b, 0xd7, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProtocolServiceClient is the client API for ProtocolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProtocolServiceClient interface {
	// InstanceExportData exports instance data
	InstanceExportData(ctx context.Context, in *bertytypes.InstanceExportData_Request, opts ...grpc.CallOption) (*bertytypes.InstanceExportData_Reply, error)
	// InstanceGetConfiguration gets current configuration of this protocol instance
	InstanceGetConfiguration(ctx context.Context, in *bertytypes.InstanceGetConfiguration_Request, opts ...grpc.CallOption) (*bertytypes.InstanceGetConfiguration_Reply, error)
	// ContactRequestReference retrieves the information required to create a reference (types.ie. included in a shareable link) to the current account
	ContactRequestReference(ctx context.Context, in *bertytypes.ContactRequestReference_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestReference_Reply, error)
	// ContactRequestDisable disables incoming contact requests
	ContactRequestDisable(ctx context.Context, in *bertytypes.ContactRequestDisable_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestDisable_Reply, error)
	// ContactRequestEnable enables incoming contact requests
	ContactRequestEnable(ctx context.Context, in *bertytypes.ContactRequestEnable_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestEnable_Reply, error)
	// ContactRequestResetReference changes the contact request reference
	ContactRequestResetReference(ctx context.Context, in *bertytypes.ContactRequestResetReference_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestResetReference_Reply, error)
	// ContactRequestSend attempt to send a contact request
	ContactRequestSend(ctx context.Context, in *bertytypes.ContactRequestSend_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestSend_Reply, error)
	// ContactRequestAccept accepts a contact request
	ContactRequestAccept(ctx context.Context, in *bertytypes.ContactRequestAccept_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestAccept_Reply, error)
	// ContactRequestDiscard ignores a contact request, without informing the other user
	ContactRequestDiscard(ctx context.Context, in *bertytypes.ContactRequestDiscard_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestDiscard_Reply, error)
	// ContactBlock blocks a contact from sending requests
	ContactBlock(ctx context.Context, in *bertytypes.ContactBlock_Request, opts ...grpc.CallOption) (*bertytypes.ContactBlock_Reply, error)
	// ContactUnblock unblocks a contact from sending requests
	ContactUnblock(ctx context.Context, in *bertytypes.ContactUnblock_Request, opts ...grpc.CallOption) (*bertytypes.ContactUnblock_Reply, error)
	// ContactAliasKeySend send an alias key to a contact, the contact will be able to assert that your account is being present on a multi-member group
	ContactAliasKeySend(ctx context.Context, in *bertytypes.ContactAliasKeySend_Request, opts ...grpc.CallOption) (*bertytypes.ContactAliasKeySend_Reply, error)
	// MultiMemberGroupCreate creates a new multi-member group
	MultiMemberGroupCreate(ctx context.Context, in *bertytypes.MultiMemberGroupCreate_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupCreate_Reply, error)
	// MultiMemberGroupJoin joins a multi-member group
	MultiMemberGroupJoin(ctx context.Context, in *bertytypes.MultiMemberGroupJoin_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupJoin_Reply, error)
	// MultiMemberGroupLeave leaves a multi-member group
	MultiMemberGroupLeave(ctx context.Context, in *bertytypes.MultiMemberGroupLeave_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupLeave_Reply, error)
	// MultiMemberGroupAliasResolverDisclose discloses your alias resolver key
	MultiMemberGroupAliasResolverDisclose(ctx context.Context, in *bertytypes.MultiMemberGroupAliasResolverDisclose_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupAliasResolverDisclose_Reply, error)
	// MultiMemberGroupAdminRoleGrant grants an admin role to a group member
	MultiMemberGroupAdminRoleGrant(ctx context.Context, in *bertytypes.MultiMemberGroupAdminRoleGrant_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupAdminRoleGrant_Reply, error)
	// MultiMemberGroupInvitationCreate creates an invitation to a multi-member group
	MultiMemberGroupInvitationCreate(ctx context.Context, in *bertytypes.MultiMemberGroupInvitationCreate_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupInvitationCreate_Reply, error)
	// AppMetadataSend adds an app event to the metadata store, the message is encrypted using a symmetric key and readable by future group members
	AppMetadataSend(ctx context.Context, in *bertytypes.AppMetadataSend_Request, opts ...grpc.CallOption) (*bertytypes.AppMetadataSend_Reply, error)
	// AppMessageSend adds an app event to the message store, the message is encrypted using a derived key and readable by current group members
	AppMessageSend(ctx context.Context, in *bertytypes.AppMessageSend_Request, opts ...grpc.CallOption) (*bertytypes.AppMessageSend_Reply, error)
	// GroupMetadataSubscribe subscribes to a group metadata updates (types.or it can also retrieve the history)
	GroupMetadataSubscribe(ctx context.Context, in *bertytypes.GroupMetadataSubscribe_Request, opts ...grpc.CallOption) (ProtocolService_GroupMetadataSubscribeClient, error)
	// GroupMessageSubscribe subscribes to a group message updates (types.or it can also retrieve the history)
	GroupMessageSubscribe(ctx context.Context, in *bertytypes.GroupMessageSubscribe_Request, opts ...grpc.CallOption) (ProtocolService_GroupMessageSubscribeClient, error)
	// GroupMetadataList replays metadata events from the group
	GroupMetadataList(ctx context.Context, in *bertytypes.GroupMetadataList_Request, opts ...grpc.CallOption) (ProtocolService_GroupMetadataListClient, error)
	// GroupMessageList replays message  events from the group
	GroupMessageList(ctx context.Context, in *bertytypes.GroupMessageList_Request, opts ...grpc.CallOption) (ProtocolService_GroupMessageListClient, error)
	// GroupInfo retrieves information about a group
	GroupInfo(ctx context.Context, in *bertytypes.GroupInfo_Request, opts ...grpc.CallOption) (*bertytypes.GroupInfo_Reply, error)
	// ActivateGroup explicitly opens a group, groups are automatically enabled when actions are performed on them
	ActivateGroup(ctx context.Context, in *bertytypes.ActivateGroup_Request, opts ...grpc.CallOption) (*bertytypes.ActivateGroup_Reply, error)
	// DeactivateGroup closes a group
	DeactivateGroup(ctx context.Context, in *bertytypes.DeactivateGroup_Request, opts ...grpc.CallOption) (*bertytypes.DeactivateGroup_Reply, error)
}

type protocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewProtocolServiceClient(cc *grpc.ClientConn) ProtocolServiceClient {
	return &protocolServiceClient{cc}
}

func (c *protocolServiceClient) InstanceExportData(ctx context.Context, in *bertytypes.InstanceExportData_Request, opts ...grpc.CallOption) (*bertytypes.InstanceExportData_Reply, error) {
	out := new(bertytypes.InstanceExportData_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/InstanceExportData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) InstanceGetConfiguration(ctx context.Context, in *bertytypes.InstanceGetConfiguration_Request, opts ...grpc.CallOption) (*bertytypes.InstanceGetConfiguration_Reply, error) {
	out := new(bertytypes.InstanceGetConfiguration_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/InstanceGetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestReference(ctx context.Context, in *bertytypes.ContactRequestReference_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestReference_Reply, error) {
	out := new(bertytypes.ContactRequestReference_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/ContactRequestReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestDisable(ctx context.Context, in *bertytypes.ContactRequestDisable_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestDisable_Reply, error) {
	out := new(bertytypes.ContactRequestDisable_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/ContactRequestDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestEnable(ctx context.Context, in *bertytypes.ContactRequestEnable_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestEnable_Reply, error) {
	out := new(bertytypes.ContactRequestEnable_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/ContactRequestEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestResetReference(ctx context.Context, in *bertytypes.ContactRequestResetReference_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestResetReference_Reply, error) {
	out := new(bertytypes.ContactRequestResetReference_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/ContactRequestResetReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestSend(ctx context.Context, in *bertytypes.ContactRequestSend_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestSend_Reply, error) {
	out := new(bertytypes.ContactRequestSend_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/ContactRequestSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestAccept(ctx context.Context, in *bertytypes.ContactRequestAccept_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestAccept_Reply, error) {
	out := new(bertytypes.ContactRequestAccept_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/ContactRequestAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestDiscard(ctx context.Context, in *bertytypes.ContactRequestDiscard_Request, opts ...grpc.CallOption) (*bertytypes.ContactRequestDiscard_Reply, error) {
	out := new(bertytypes.ContactRequestDiscard_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/ContactRequestDiscard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactBlock(ctx context.Context, in *bertytypes.ContactBlock_Request, opts ...grpc.CallOption) (*bertytypes.ContactBlock_Reply, error) {
	out := new(bertytypes.ContactBlock_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/ContactBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactUnblock(ctx context.Context, in *bertytypes.ContactUnblock_Request, opts ...grpc.CallOption) (*bertytypes.ContactUnblock_Reply, error) {
	out := new(bertytypes.ContactUnblock_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/ContactUnblock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactAliasKeySend(ctx context.Context, in *bertytypes.ContactAliasKeySend_Request, opts ...grpc.CallOption) (*bertytypes.ContactAliasKeySend_Reply, error) {
	out := new(bertytypes.ContactAliasKeySend_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/ContactAliasKeySend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupCreate(ctx context.Context, in *bertytypes.MultiMemberGroupCreate_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupCreate_Reply, error) {
	out := new(bertytypes.MultiMemberGroupCreate_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/MultiMemberGroupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupJoin(ctx context.Context, in *bertytypes.MultiMemberGroupJoin_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupJoin_Reply, error) {
	out := new(bertytypes.MultiMemberGroupJoin_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/MultiMemberGroupJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupLeave(ctx context.Context, in *bertytypes.MultiMemberGroupLeave_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupLeave_Reply, error) {
	out := new(bertytypes.MultiMemberGroupLeave_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/MultiMemberGroupLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupAliasResolverDisclose(ctx context.Context, in *bertytypes.MultiMemberGroupAliasResolverDisclose_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupAliasResolverDisclose_Reply, error) {
	out := new(bertytypes.MultiMemberGroupAliasResolverDisclose_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/MultiMemberGroupAliasResolverDisclose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupAdminRoleGrant(ctx context.Context, in *bertytypes.MultiMemberGroupAdminRoleGrant_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupAdminRoleGrant_Reply, error) {
	out := new(bertytypes.MultiMemberGroupAdminRoleGrant_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/MultiMemberGroupAdminRoleGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupInvitationCreate(ctx context.Context, in *bertytypes.MultiMemberGroupInvitationCreate_Request, opts ...grpc.CallOption) (*bertytypes.MultiMemberGroupInvitationCreate_Reply, error) {
	out := new(bertytypes.MultiMemberGroupInvitationCreate_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/MultiMemberGroupInvitationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) AppMetadataSend(ctx context.Context, in *bertytypes.AppMetadataSend_Request, opts ...grpc.CallOption) (*bertytypes.AppMetadataSend_Reply, error) {
	out := new(bertytypes.AppMetadataSend_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/AppMetadataSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) AppMessageSend(ctx context.Context, in *bertytypes.AppMessageSend_Request, opts ...grpc.CallOption) (*bertytypes.AppMessageSend_Reply, error) {
	out := new(bertytypes.AppMessageSend_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/AppMessageSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GroupMetadataSubscribe(ctx context.Context, in *bertytypes.GroupMetadataSubscribe_Request, opts ...grpc.CallOption) (ProtocolService_GroupMetadataSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProtocolService_serviceDesc.Streams[0], "/berty.protocol.ProtocolService/GroupMetadataSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceGroupMetadataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_GroupMetadataSubscribeClient interface {
	Recv() (*bertytypes.GroupMetadataEvent, error)
	grpc.ClientStream
}

type protocolServiceGroupMetadataSubscribeClient struct {
	grpc.ClientStream
}

func (x *protocolServiceGroupMetadataSubscribeClient) Recv() (*bertytypes.GroupMetadataEvent, error) {
	m := new(bertytypes.GroupMetadataEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) GroupMessageSubscribe(ctx context.Context, in *bertytypes.GroupMessageSubscribe_Request, opts ...grpc.CallOption) (ProtocolService_GroupMessageSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProtocolService_serviceDesc.Streams[1], "/berty.protocol.ProtocolService/GroupMessageSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceGroupMessageSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_GroupMessageSubscribeClient interface {
	Recv() (*bertytypes.GroupMessageEvent, error)
	grpc.ClientStream
}

type protocolServiceGroupMessageSubscribeClient struct {
	grpc.ClientStream
}

func (x *protocolServiceGroupMessageSubscribeClient) Recv() (*bertytypes.GroupMessageEvent, error) {
	m := new(bertytypes.GroupMessageEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) GroupMetadataList(ctx context.Context, in *bertytypes.GroupMetadataList_Request, opts ...grpc.CallOption) (ProtocolService_GroupMetadataListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProtocolService_serviceDesc.Streams[2], "/berty.protocol.ProtocolService/GroupMetadataList", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceGroupMetadataListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_GroupMetadataListClient interface {
	Recv() (*bertytypes.GroupMetadataEvent, error)
	grpc.ClientStream
}

type protocolServiceGroupMetadataListClient struct {
	grpc.ClientStream
}

func (x *protocolServiceGroupMetadataListClient) Recv() (*bertytypes.GroupMetadataEvent, error) {
	m := new(bertytypes.GroupMetadataEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) GroupMessageList(ctx context.Context, in *bertytypes.GroupMessageList_Request, opts ...grpc.CallOption) (ProtocolService_GroupMessageListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProtocolService_serviceDesc.Streams[3], "/berty.protocol.ProtocolService/GroupMessageList", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceGroupMessageListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_GroupMessageListClient interface {
	Recv() (*bertytypes.GroupMessageEvent, error)
	grpc.ClientStream
}

type protocolServiceGroupMessageListClient struct {
	grpc.ClientStream
}

func (x *protocolServiceGroupMessageListClient) Recv() (*bertytypes.GroupMessageEvent, error) {
	m := new(bertytypes.GroupMessageEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) GroupInfo(ctx context.Context, in *bertytypes.GroupInfo_Request, opts ...grpc.CallOption) (*bertytypes.GroupInfo_Reply, error) {
	out := new(bertytypes.GroupInfo_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/GroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ActivateGroup(ctx context.Context, in *bertytypes.ActivateGroup_Request, opts ...grpc.CallOption) (*bertytypes.ActivateGroup_Reply, error) {
	out := new(bertytypes.ActivateGroup_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/ActivateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) DeactivateGroup(ctx context.Context, in *bertytypes.DeactivateGroup_Request, opts ...grpc.CallOption) (*bertytypes.DeactivateGroup_Reply, error) {
	out := new(bertytypes.DeactivateGroup_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.ProtocolService/DeactivateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtocolServiceServer is the server API for ProtocolService service.
type ProtocolServiceServer interface {
	// InstanceExportData exports instance data
	InstanceExportData(context.Context, *bertytypes.InstanceExportData_Request) (*bertytypes.InstanceExportData_Reply, error)
	// InstanceGetConfiguration gets current configuration of this protocol instance
	InstanceGetConfiguration(context.Context, *bertytypes.InstanceGetConfiguration_Request) (*bertytypes.InstanceGetConfiguration_Reply, error)
	// ContactRequestReference retrieves the information required to create a reference (types.ie. included in a shareable link) to the current account
	ContactRequestReference(context.Context, *bertytypes.ContactRequestReference_Request) (*bertytypes.ContactRequestReference_Reply, error)
	// ContactRequestDisable disables incoming contact requests
	ContactRequestDisable(context.Context, *bertytypes.ContactRequestDisable_Request) (*bertytypes.ContactRequestDisable_Reply, error)
	// ContactRequestEnable enables incoming contact requests
	ContactRequestEnable(context.Context, *bertytypes.ContactRequestEnable_Request) (*bertytypes.ContactRequestEnable_Reply, error)
	// ContactRequestResetReference changes the contact request reference
	ContactRequestResetReference(context.Context, *bertytypes.ContactRequestResetReference_Request) (*bertytypes.ContactRequestResetReference_Reply, error)
	// ContactRequestSend attempt to send a contact request
	ContactRequestSend(context.Context, *bertytypes.ContactRequestSend_Request) (*bertytypes.ContactRequestSend_Reply, error)
	// ContactRequestAccept accepts a contact request
	ContactRequestAccept(context.Context, *bertytypes.ContactRequestAccept_Request) (*bertytypes.ContactRequestAccept_Reply, error)
	// ContactRequestDiscard ignores a contact request, without informing the other user
	ContactRequestDiscard(context.Context, *bertytypes.ContactRequestDiscard_Request) (*bertytypes.ContactRequestDiscard_Reply, error)
	// ContactBlock blocks a contact from sending requests
	ContactBlock(context.Context, *bertytypes.ContactBlock_Request) (*bertytypes.ContactBlock_Reply, error)
	// ContactUnblock unblocks a contact from sending requests
	ContactUnblock(context.Context, *bertytypes.ContactUnblock_Request) (*bertytypes.ContactUnblock_Reply, error)
	// ContactAliasKeySend send an alias key to a contact, the contact will be able to assert that your account is being present on a multi-member group
	ContactAliasKeySend(context.Context, *bertytypes.ContactAliasKeySend_Request) (*bertytypes.ContactAliasKeySend_Reply, error)
	// MultiMemberGroupCreate creates a new multi-member group
	MultiMemberGroupCreate(context.Context, *bertytypes.MultiMemberGroupCreate_Request) (*bertytypes.MultiMemberGroupCreate_Reply, error)
	// MultiMemberGroupJoin joins a multi-member group
	MultiMemberGroupJoin(context.Context, *bertytypes.MultiMemberGroupJoin_Request) (*bertytypes.MultiMemberGroupJoin_Reply, error)
	// MultiMemberGroupLeave leaves a multi-member group
	MultiMemberGroupLeave(context.Context, *bertytypes.MultiMemberGroupLeave_Request) (*bertytypes.MultiMemberGroupLeave_Reply, error)
	// MultiMemberGroupAliasResolverDisclose discloses your alias resolver key
	MultiMemberGroupAliasResolverDisclose(context.Context, *bertytypes.MultiMemberGroupAliasResolverDisclose_Request) (*bertytypes.MultiMemberGroupAliasResolverDisclose_Reply, error)
	// MultiMemberGroupAdminRoleGrant grants an admin role to a group member
	MultiMemberGroupAdminRoleGrant(context.Context, *bertytypes.MultiMemberGroupAdminRoleGrant_Request) (*bertytypes.MultiMemberGroupAdminRoleGrant_Reply, error)
	// MultiMemberGroupInvitationCreate creates an invitation to a multi-member group
	MultiMemberGroupInvitationCreate(context.Context, *bertytypes.MultiMemberGroupInvitationCreate_Request) (*bertytypes.MultiMemberGroupInvitationCreate_Reply, error)
	// AppMetadataSend adds an app event to the metadata store, the message is encrypted using a symmetric key and readable by future group members
	AppMetadataSend(context.Context, *bertytypes.AppMetadataSend_Request) (*bertytypes.AppMetadataSend_Reply, error)
	// AppMessageSend adds an app event to the message store, the message is encrypted using a derived key and readable by current group members
	AppMessageSend(context.Context, *bertytypes.AppMessageSend_Request) (*bertytypes.AppMessageSend_Reply, error)
	// GroupMetadataSubscribe subscribes to a group metadata updates (types.or it can also retrieve the history)
	GroupMetadataSubscribe(*bertytypes.GroupMetadataSubscribe_Request, ProtocolService_GroupMetadataSubscribeServer) error
	// GroupMessageSubscribe subscribes to a group message updates (types.or it can also retrieve the history)
	GroupMessageSubscribe(*bertytypes.GroupMessageSubscribe_Request, ProtocolService_GroupMessageSubscribeServer) error
	// GroupMetadataList replays metadata events from the group
	GroupMetadataList(*bertytypes.GroupMetadataList_Request, ProtocolService_GroupMetadataListServer) error
	// GroupMessageList replays message  events from the group
	GroupMessageList(*bertytypes.GroupMessageList_Request, ProtocolService_GroupMessageListServer) error
	// GroupInfo retrieves information about a group
	GroupInfo(context.Context, *bertytypes.GroupInfo_Request) (*bertytypes.GroupInfo_Reply, error)
	// ActivateGroup explicitly opens a group, groups are automatically enabled when actions are performed on them
	ActivateGroup(context.Context, *bertytypes.ActivateGroup_Request) (*bertytypes.ActivateGroup_Reply, error)
	// DeactivateGroup closes a group
	DeactivateGroup(context.Context, *bertytypes.DeactivateGroup_Request) (*bertytypes.DeactivateGroup_Reply, error)
}

// UnimplementedProtocolServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProtocolServiceServer struct {
}

func (*UnimplementedProtocolServiceServer) InstanceExportData(ctx context.Context, req *bertytypes.InstanceExportData_Request) (*bertytypes.InstanceExportData_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceExportData not implemented")
}
func (*UnimplementedProtocolServiceServer) InstanceGetConfiguration(ctx context.Context, req *bertytypes.InstanceGetConfiguration_Request) (*bertytypes.InstanceGetConfiguration_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceGetConfiguration not implemented")
}
func (*UnimplementedProtocolServiceServer) ContactRequestReference(ctx context.Context, req *bertytypes.ContactRequestReference_Request) (*bertytypes.ContactRequestReference_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestReference not implemented")
}
func (*UnimplementedProtocolServiceServer) ContactRequestDisable(ctx context.Context, req *bertytypes.ContactRequestDisable_Request) (*bertytypes.ContactRequestDisable_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestDisable not implemented")
}
func (*UnimplementedProtocolServiceServer) ContactRequestEnable(ctx context.Context, req *bertytypes.ContactRequestEnable_Request) (*bertytypes.ContactRequestEnable_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestEnable not implemented")
}
func (*UnimplementedProtocolServiceServer) ContactRequestResetReference(ctx context.Context, req *bertytypes.ContactRequestResetReference_Request) (*bertytypes.ContactRequestResetReference_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestResetReference not implemented")
}
func (*UnimplementedProtocolServiceServer) ContactRequestSend(ctx context.Context, req *bertytypes.ContactRequestSend_Request) (*bertytypes.ContactRequestSend_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestSend not implemented")
}
func (*UnimplementedProtocolServiceServer) ContactRequestAccept(ctx context.Context, req *bertytypes.ContactRequestAccept_Request) (*bertytypes.ContactRequestAccept_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestAccept not implemented")
}
func (*UnimplementedProtocolServiceServer) ContactRequestDiscard(ctx context.Context, req *bertytypes.ContactRequestDiscard_Request) (*bertytypes.ContactRequestDiscard_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestDiscard not implemented")
}
func (*UnimplementedProtocolServiceServer) ContactBlock(ctx context.Context, req *bertytypes.ContactBlock_Request) (*bertytypes.ContactBlock_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactBlock not implemented")
}
func (*UnimplementedProtocolServiceServer) ContactUnblock(ctx context.Context, req *bertytypes.ContactUnblock_Request) (*bertytypes.ContactUnblock_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactUnblock not implemented")
}
func (*UnimplementedProtocolServiceServer) ContactAliasKeySend(ctx context.Context, req *bertytypes.ContactAliasKeySend_Request) (*bertytypes.ContactAliasKeySend_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactAliasKeySend not implemented")
}
func (*UnimplementedProtocolServiceServer) MultiMemberGroupCreate(ctx context.Context, req *bertytypes.MultiMemberGroupCreate_Request) (*bertytypes.MultiMemberGroupCreate_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupCreate not implemented")
}
func (*UnimplementedProtocolServiceServer) MultiMemberGroupJoin(ctx context.Context, req *bertytypes.MultiMemberGroupJoin_Request) (*bertytypes.MultiMemberGroupJoin_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupJoin not implemented")
}
func (*UnimplementedProtocolServiceServer) MultiMemberGroupLeave(ctx context.Context, req *bertytypes.MultiMemberGroupLeave_Request) (*bertytypes.MultiMemberGroupLeave_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupLeave not implemented")
}
func (*UnimplementedProtocolServiceServer) MultiMemberGroupAliasResolverDisclose(ctx context.Context, req *bertytypes.MultiMemberGroupAliasResolverDisclose_Request) (*bertytypes.MultiMemberGroupAliasResolverDisclose_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupAliasResolverDisclose not implemented")
}
func (*UnimplementedProtocolServiceServer) MultiMemberGroupAdminRoleGrant(ctx context.Context, req *bertytypes.MultiMemberGroupAdminRoleGrant_Request) (*bertytypes.MultiMemberGroupAdminRoleGrant_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupAdminRoleGrant not implemented")
}
func (*UnimplementedProtocolServiceServer) MultiMemberGroupInvitationCreate(ctx context.Context, req *bertytypes.MultiMemberGroupInvitationCreate_Request) (*bertytypes.MultiMemberGroupInvitationCreate_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupInvitationCreate not implemented")
}
func (*UnimplementedProtocolServiceServer) AppMetadataSend(ctx context.Context, req *bertytypes.AppMetadataSend_Request) (*bertytypes.AppMetadataSend_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppMetadataSend not implemented")
}
func (*UnimplementedProtocolServiceServer) AppMessageSend(ctx context.Context, req *bertytypes.AppMessageSend_Request) (*bertytypes.AppMessageSend_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppMessageSend not implemented")
}
func (*UnimplementedProtocolServiceServer) GroupMetadataSubscribe(req *bertytypes.GroupMetadataSubscribe_Request, srv ProtocolService_GroupMetadataSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method GroupMetadataSubscribe not implemented")
}
func (*UnimplementedProtocolServiceServer) GroupMessageSubscribe(req *bertytypes.GroupMessageSubscribe_Request, srv ProtocolService_GroupMessageSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method GroupMessageSubscribe not implemented")
}
func (*UnimplementedProtocolServiceServer) GroupMetadataList(req *bertytypes.GroupMetadataList_Request, srv ProtocolService_GroupMetadataListServer) error {
	return status.Errorf(codes.Unimplemented, "method GroupMetadataList not implemented")
}
func (*UnimplementedProtocolServiceServer) GroupMessageList(req *bertytypes.GroupMessageList_Request, srv ProtocolService_GroupMessageListServer) error {
	return status.Errorf(codes.Unimplemented, "method GroupMessageList not implemented")
}
func (*UnimplementedProtocolServiceServer) GroupInfo(ctx context.Context, req *bertytypes.GroupInfo_Request) (*bertytypes.GroupInfo_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfo not implemented")
}
func (*UnimplementedProtocolServiceServer) ActivateGroup(ctx context.Context, req *bertytypes.ActivateGroup_Request) (*bertytypes.ActivateGroup_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateGroup not implemented")
}
func (*UnimplementedProtocolServiceServer) DeactivateGroup(ctx context.Context, req *bertytypes.DeactivateGroup_Request) (*bertytypes.DeactivateGroup_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateGroup not implemented")
}

func RegisterProtocolServiceServer(s *grpc.Server, srv ProtocolServiceServer) {
	s.RegisterService(&_ProtocolService_serviceDesc, srv)
}

func _ProtocolService_InstanceExportData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.InstanceExportData_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).InstanceExportData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/InstanceExportData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).InstanceExportData(ctx, req.(*bertytypes.InstanceExportData_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_InstanceGetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.InstanceGetConfiguration_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).InstanceGetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/InstanceGetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).InstanceGetConfiguration(ctx, req.(*bertytypes.InstanceGetConfiguration_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.ContactRequestReference_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/ContactRequestReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestReference(ctx, req.(*bertytypes.ContactRequestReference_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.ContactRequestDisable_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/ContactRequestDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestDisable(ctx, req.(*bertytypes.ContactRequestDisable_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.ContactRequestEnable_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/ContactRequestEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestEnable(ctx, req.(*bertytypes.ContactRequestEnable_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestResetReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.ContactRequestResetReference_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestResetReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/ContactRequestResetReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestResetReference(ctx, req.(*bertytypes.ContactRequestResetReference_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.ContactRequestSend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/ContactRequestSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestSend(ctx, req.(*bertytypes.ContactRequestSend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.ContactRequestAccept_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/ContactRequestAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestAccept(ctx, req.(*bertytypes.ContactRequestAccept_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestDiscard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.ContactRequestDiscard_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestDiscard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/ContactRequestDiscard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestDiscard(ctx, req.(*bertytypes.ContactRequestDiscard_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.ContactBlock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/ContactBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactBlock(ctx, req.(*bertytypes.ContactBlock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactUnblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.ContactUnblock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactUnblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/ContactUnblock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactUnblock(ctx, req.(*bertytypes.ContactUnblock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactAliasKeySend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.ContactAliasKeySend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactAliasKeySend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/ContactAliasKeySend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactAliasKeySend(ctx, req.(*bertytypes.ContactAliasKeySend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.MultiMemberGroupCreate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/MultiMemberGroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupCreate(ctx, req.(*bertytypes.MultiMemberGroupCreate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.MultiMemberGroupJoin_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/MultiMemberGroupJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupJoin(ctx, req.(*bertytypes.MultiMemberGroupJoin_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.MultiMemberGroupLeave_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/MultiMemberGroupLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupLeave(ctx, req.(*bertytypes.MultiMemberGroupLeave_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupAliasResolverDisclose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.MultiMemberGroupAliasResolverDisclose_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupAliasResolverDisclose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/MultiMemberGroupAliasResolverDisclose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupAliasResolverDisclose(ctx, req.(*bertytypes.MultiMemberGroupAliasResolverDisclose_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupAdminRoleGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.MultiMemberGroupAdminRoleGrant_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupAdminRoleGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/MultiMemberGroupAdminRoleGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupAdminRoleGrant(ctx, req.(*bertytypes.MultiMemberGroupAdminRoleGrant_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupInvitationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.MultiMemberGroupInvitationCreate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupInvitationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/MultiMemberGroupInvitationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupInvitationCreate(ctx, req.(*bertytypes.MultiMemberGroupInvitationCreate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_AppMetadataSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.AppMetadataSend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).AppMetadataSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/AppMetadataSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).AppMetadataSend(ctx, req.(*bertytypes.AppMetadataSend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_AppMessageSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.AppMessageSend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).AppMessageSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/AppMessageSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).AppMessageSend(ctx, req.(*bertytypes.AppMessageSend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GroupMetadataSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bertytypes.GroupMetadataSubscribe_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).GroupMetadataSubscribe(m, &protocolServiceGroupMetadataSubscribeServer{stream})
}

type ProtocolService_GroupMetadataSubscribeServer interface {
	Send(*bertytypes.GroupMetadataEvent) error
	grpc.ServerStream
}

type protocolServiceGroupMetadataSubscribeServer struct {
	grpc.ServerStream
}

func (x *protocolServiceGroupMetadataSubscribeServer) Send(m *bertytypes.GroupMetadataEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_GroupMessageSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bertytypes.GroupMessageSubscribe_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).GroupMessageSubscribe(m, &protocolServiceGroupMessageSubscribeServer{stream})
}

type ProtocolService_GroupMessageSubscribeServer interface {
	Send(*bertytypes.GroupMessageEvent) error
	grpc.ServerStream
}

type protocolServiceGroupMessageSubscribeServer struct {
	grpc.ServerStream
}

func (x *protocolServiceGroupMessageSubscribeServer) Send(m *bertytypes.GroupMessageEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_GroupMetadataList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bertytypes.GroupMetadataList_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).GroupMetadataList(m, &protocolServiceGroupMetadataListServer{stream})
}

type ProtocolService_GroupMetadataListServer interface {
	Send(*bertytypes.GroupMetadataEvent) error
	grpc.ServerStream
}

type protocolServiceGroupMetadataListServer struct {
	grpc.ServerStream
}

func (x *protocolServiceGroupMetadataListServer) Send(m *bertytypes.GroupMetadataEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_GroupMessageList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bertytypes.GroupMessageList_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).GroupMessageList(m, &protocolServiceGroupMessageListServer{stream})
}

type ProtocolService_GroupMessageListServer interface {
	Send(*bertytypes.GroupMessageEvent) error
	grpc.ServerStream
}

type protocolServiceGroupMessageListServer struct {
	grpc.ServerStream
}

func (x *protocolServiceGroupMessageListServer) Send(m *bertytypes.GroupMessageEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_GroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.GroupInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/GroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GroupInfo(ctx, req.(*bertytypes.GroupInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ActivateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.ActivateGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ActivateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/ActivateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ActivateGroup(ctx, req.(*bertytypes.ActivateGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_DeactivateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bertytypes.DeactivateGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).DeactivateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.ProtocolService/DeactivateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).DeactivateGroup(ctx, req.(*bertytypes.DeactivateGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "berty.protocol.ProtocolService",
	HandlerType: (*ProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstanceExportData",
			Handler:    _ProtocolService_InstanceExportData_Handler,
		},
		{
			MethodName: "InstanceGetConfiguration",
			Handler:    _ProtocolService_InstanceGetConfiguration_Handler,
		},
		{
			MethodName: "ContactRequestReference",
			Handler:    _ProtocolService_ContactRequestReference_Handler,
		},
		{
			MethodName: "ContactRequestDisable",
			Handler:    _ProtocolService_ContactRequestDisable_Handler,
		},
		{
			MethodName: "ContactRequestEnable",
			Handler:    _ProtocolService_ContactRequestEnable_Handler,
		},
		{
			MethodName: "ContactRequestResetReference",
			Handler:    _ProtocolService_ContactRequestResetReference_Handler,
		},
		{
			MethodName: "ContactRequestSend",
			Handler:    _ProtocolService_ContactRequestSend_Handler,
		},
		{
			MethodName: "ContactRequestAccept",
			Handler:    _ProtocolService_ContactRequestAccept_Handler,
		},
		{
			MethodName: "ContactRequestDiscard",
			Handler:    _ProtocolService_ContactRequestDiscard_Handler,
		},
		{
			MethodName: "ContactBlock",
			Handler:    _ProtocolService_ContactBlock_Handler,
		},
		{
			MethodName: "ContactUnblock",
			Handler:    _ProtocolService_ContactUnblock_Handler,
		},
		{
			MethodName: "ContactAliasKeySend",
			Handler:    _ProtocolService_ContactAliasKeySend_Handler,
		},
		{
			MethodName: "MultiMemberGroupCreate",
			Handler:    _ProtocolService_MultiMemberGroupCreate_Handler,
		},
		{
			MethodName: "MultiMemberGroupJoin",
			Handler:    _ProtocolService_MultiMemberGroupJoin_Handler,
		},
		{
			MethodName: "MultiMemberGroupLeave",
			Handler:    _ProtocolService_MultiMemberGroupLeave_Handler,
		},
		{
			MethodName: "MultiMemberGroupAliasResolverDisclose",
			Handler:    _ProtocolService_MultiMemberGroupAliasResolverDisclose_Handler,
		},
		{
			MethodName: "MultiMemberGroupAdminRoleGrant",
			Handler:    _ProtocolService_MultiMemberGroupAdminRoleGrant_Handler,
		},
		{
			MethodName: "MultiMemberGroupInvitationCreate",
			Handler:    _ProtocolService_MultiMemberGroupInvitationCreate_Handler,
		},
		{
			MethodName: "AppMetadataSend",
			Handler:    _ProtocolService_AppMetadataSend_Handler,
		},
		{
			MethodName: "AppMessageSend",
			Handler:    _ProtocolService_AppMessageSend_Handler,
		},
		{
			MethodName: "GroupInfo",
			Handler:    _ProtocolService_GroupInfo_Handler,
		},
		{
			MethodName: "ActivateGroup",
			Handler:    _ProtocolService_ActivateGroup_Handler,
		},
		{
			MethodName: "DeactivateGroup",
			Handler:    _ProtocolService_DeactivateGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GroupMetadataSubscribe",
			Handler:       _ProtocolService_GroupMetadataSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GroupMessageSubscribe",
			Handler:       _ProtocolService_GroupMessageSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GroupMetadataList",
			Handler:       _ProtocolService_GroupMetadataList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GroupMessageList",
			Handler:       _ProtocolService_GroupMessageList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bertyprotocol.proto",
}
