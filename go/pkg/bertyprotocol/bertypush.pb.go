// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bertypush.proto

package bertyprotocol

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	protocoltypes "berty.tech/berty/v2/go/pkg/protocoltypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("bertypush.proto", fileDescriptor_8f7d65522aea41f1) }

var fileDescriptor_8f7d65522aea41f1 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4a, 0x2d, 0x2a,
	0xa9, 0x2c, 0x28, 0x2d, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x04, 0x0b, 0x40,
	0x38, 0xc9, 0xf9, 0x39, 0x7a, 0x65, 0x86, 0x52, 0xc2, 0x30, 0x4e, 0x49, 0x65, 0x41, 0x6a, 0x31,
	0x44, 0xca, 0xe8, 0x36, 0x23, 0x17, 0x77, 0x40, 0x69, 0x71, 0x46, 0x70, 0x6a, 0x51, 0x59, 0x66,
	0x72, 0xaa, 0x50, 0x1e, 0x17, 0x17, 0x88, 0x99, 0x5a, 0xe4, 0x99, 0x97, 0x96, 0x2f, 0x64, 0xa0,
	0x87, 0x61, 0x8c, 0x1e, 0x92, 0x6a, 0x84, 0x4a, 0xbd, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12,
	0x29, 0x3d, 0x12, 0x74, 0x14, 0xe4, 0x54, 0x0a, 0xc5, 0x70, 0xb1, 0x04, 0xa7, 0xe6, 0xa5, 0x08,
	0x69, 0x11, 0xd2, 0x97, 0x97, 0x02, 0xb7, 0x43, 0x83, 0x28, 0xb5, 0x05, 0x39, 0x95, 0x4e, 0xea,
	0x51, 0xaa, 0x10, 0xa5, 0x25, 0xa9, 0xc9, 0x19, 0xfa, 0x60, 0xa6, 0x7e, 0x7a, 0xbe, 0x7e, 0x41,
	0x76, 0x3a, 0x84, 0x03, 0x33, 0x21, 0x89, 0x0d, 0xcc, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x37, 0xcd, 0x91, 0x48, 0x48, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PushServiceClient is the client API for PushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushServiceClient interface {
	// ServerInfo retrieves metadata about the current push service
	ServerInfo(ctx context.Context, in *protocoltypes.PushServiceServerInfo_Request, opts ...grpc.CallOption) (*protocoltypes.PushServiceServerInfo_Reply, error)
	// Send dispatch a push payload to one or multiple recipients
	Send(ctx context.Context, in *protocoltypes.PushServiceSend_Request, opts ...grpc.CallOption) (*protocoltypes.PushServiceSend_Reply, error)
}

type pushServiceClient struct {
	cc *grpc.ClientConn
}

func NewPushServiceClient(cc *grpc.ClientConn) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) ServerInfo(ctx context.Context, in *protocoltypes.PushServiceServerInfo_Request, opts ...grpc.CallOption) (*protocoltypes.PushServiceServerInfo_Reply, error) {
	out := new(protocoltypes.PushServiceServerInfo_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.v1.PushService/ServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) Send(ctx context.Context, in *protocoltypes.PushServiceSend_Request, opts ...grpc.CallOption) (*protocoltypes.PushServiceSend_Reply, error) {
	out := new(protocoltypes.PushServiceSend_Reply)
	err := c.cc.Invoke(ctx, "/berty.protocol.v1.PushService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushServiceServer is the server API for PushService service.
type PushServiceServer interface {
	// ServerInfo retrieves metadata about the current push service
	ServerInfo(context.Context, *protocoltypes.PushServiceServerInfo_Request) (*protocoltypes.PushServiceServerInfo_Reply, error)
	// Send dispatch a push payload to one or multiple recipients
	Send(context.Context, *protocoltypes.PushServiceSend_Request) (*protocoltypes.PushServiceSend_Reply, error)
}

// UnimplementedPushServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPushServiceServer struct {
}

func (*UnimplementedPushServiceServer) ServerInfo(ctx context.Context, req *protocoltypes.PushServiceServerInfo_Request) (*protocoltypes.PushServiceServerInfo_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerInfo not implemented")
}

func (*UnimplementedPushServiceServer) Send(ctx context.Context, req *protocoltypes.PushServiceSend_Request) (*protocoltypes.PushServiceSend_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterPushServiceServer(s *grpc.Server, srv PushServiceServer) {
	s.RegisterService(&_PushService_serviceDesc, srv)
}

func _PushService_ServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocoltypes.PushServiceServerInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).ServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.v1.PushService/ServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).ServerInfo(ctx, req.(*protocoltypes.PushServiceServerInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocoltypes.PushServiceSend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berty.protocol.v1.PushService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).Send(ctx, req.(*protocoltypes.PushServiceSend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _PushService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "berty.protocol.v1.PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerInfo",
			Handler:    _PushService_ServerInfo_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _PushService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bertypush.proto",
}
