// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bertytypes.proto

package bertytypes

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GroupType int32

const (
	// GroupTypeUndefined indicates that the value has not been set. Should not happen.
	GroupTypeUndefined GroupType = 0
	// GroupTypeAccount is the group managing an account, available to all its devices.
	GroupTypeAccount GroupType = 1
	// GroupTypeContact is the group created between two accounts, available to all their devices.
	GroupTypeContact GroupType = 2
	// GroupTypeMultiMember is a group containing an undefined number of members.
	GroupTypeMultiMember GroupType = 3
)

var GroupType_name = map[int32]string{
	0: "GroupTypeUndefined",
	1: "GroupTypeAccount",
	2: "GroupTypeContact",
	3: "GroupTypeMultiMember",
}

var GroupType_value = map[string]int32{
	"GroupTypeUndefined":   0,
	"GroupTypeAccount":     1,
	"GroupTypeContact":     2,
	"GroupTypeMultiMember": 3,
}

func (x GroupType) String() string {
	return proto.EnumName(GroupType_name, int32(x))
}

func (GroupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{0}
}

type EventType int32

const (
	// EventTypeUndefined indicates that the value has not been set. Should not happen.
	EventTypeUndefined EventType = 0
	// EventTypeGroupMemberDeviceAdded indicates the payload includes that a member has added their device to the group
	EventTypeGroupMemberDeviceAdded EventType = 1
	// EventTypeGroupDeviceSecretAdded indicates the payload includes that a member has sent their device secret to another member
	EventTypeGroupDeviceSecretAdded EventType = 2
	// EventTypeAccountGroupJoined indicates the payload includes that the account has joined a group
	EventTypeAccountGroupJoined EventType = 101
	// EventTypeAccountGroupLeft indicates the payload includes that the account has left a group
	EventTypeAccountGroupLeft EventType = 102
	// EventTypeAccountContactRequestDisabled indicates the payload includes that the account has disabled incoming contact requests
	EventTypeAccountContactRequestDisabled EventType = 103
	// EventTypeAccountContactRequestEnabled indicates the payload includes that the account has enabled incoming contact requests
	EventTypeAccountContactRequestEnabled EventType = 104
	// EventTypeAccountContactRequestReferenceReset indicates the payload includes that the account has a new contact request rendezvous seed
	EventTypeAccountContactRequestReferenceReset EventType = 105
	// EventTypeAccountContactRequestEnqueued indicates the payload includes that the account will attempt to send a new contact request
	EventTypeAccountContactRequestOutgoingEnqueued EventType = 106
	// EventTypeAccountContactRequestSent indicates the payload includes that the account has sent a contact request
	EventTypeAccountContactRequestOutgoingSent EventType = 107
	// EventTypeAccountContactRequestReceived indicates the payload includes that the account has received a contact request
	EventTypeAccountContactRequestIncomingReceived EventType = 108
	// EventTypeAccountContactRequestIncomingDiscarded indicates the payload includes that the account has ignored a contact request
	EventTypeAccountContactRequestIncomingDiscarded EventType = 109
	// EventTypeAccountContactRequestAccepted indicates the payload includes that the account has accepted a contact request
	EventTypeAccountContactRequestIncomingAccepted EventType = 110
	// EventTypeAccountContactBlocked indicates the payload includes that the account has blocked a contact
	EventTypeAccountContactBlocked EventType = 111
	// EventTypeAccountContactUnblocked indicates the payload includes that the account has unblocked a contact
	EventTypeAccountContactUnblocked EventType = 112
	// EventTypeContactAliasKeyAdded indicates the payload includes that the contact group has received an alias key
	EventTypeContactAliasKeyAdded EventType = 201
	// EventTypeMultiMemberGroupAliasResolverAdded indicates the payload includes that a member of the group sent their alias proof
	EventTypeMultiMemberGroupAliasResolverAdded EventType = 301
	// EventTypeMultiMemberGroupInitialMemberAnnounced indicates the payload includes that a member has authenticated themselves as the group owner
	EventTypeMultiMemberGroupInitialMemberAnnounced EventType = 302
	// EventTypeMultiMemberGroupAdminRoleGranted indicates the payload includes that an admin of the group granted another member as an admin
	EventTypeMultiMemberGroupAdminRoleGranted EventType = 303
	// EventTypeGroupMetadataPayloadSent indicates the payload includes an app specific event, unlike messages stored on the message store it is encrypted using a static key
	EventTypeGroupMetadataPayloadSent EventType = 1001
)

var EventType_name = map[int32]string{
	0:    "EventTypeUndefined",
	1:    "EventTypeGroupMemberDeviceAdded",
	2:    "EventTypeGroupDeviceSecretAdded",
	101:  "EventTypeAccountGroupJoined",
	102:  "EventTypeAccountGroupLeft",
	103:  "EventTypeAccountContactRequestDisabled",
	104:  "EventTypeAccountContactRequestEnabled",
	105:  "EventTypeAccountContactRequestReferenceReset",
	106:  "EventTypeAccountContactRequestOutgoingEnqueued",
	107:  "EventTypeAccountContactRequestOutgoingSent",
	108:  "EventTypeAccountContactRequestIncomingReceived",
	109:  "EventTypeAccountContactRequestIncomingDiscarded",
	110:  "EventTypeAccountContactRequestIncomingAccepted",
	111:  "EventTypeAccountContactBlocked",
	112:  "EventTypeAccountContactUnblocked",
	201:  "EventTypeContactAliasKeyAdded",
	301:  "EventTypeMultiMemberGroupAliasResolverAdded",
	302:  "EventTypeMultiMemberGroupInitialMemberAnnounced",
	303:  "EventTypeMultiMemberGroupAdminRoleGranted",
	1001: "EventTypeGroupMetadataPayloadSent",
}

var EventType_value = map[string]int32{
	"EventTypeUndefined":                              0,
	"EventTypeGroupMemberDeviceAdded":                 1,
	"EventTypeGroupDeviceSecretAdded":                 2,
	"EventTypeAccountGroupJoined":                     101,
	"EventTypeAccountGroupLeft":                       102,
	"EventTypeAccountContactRequestDisabled":          103,
	"EventTypeAccountContactRequestEnabled":           104,
	"EventTypeAccountContactRequestReferenceReset":    105,
	"EventTypeAccountContactRequestOutgoingEnqueued":  106,
	"EventTypeAccountContactRequestOutgoingSent":      107,
	"EventTypeAccountContactRequestIncomingReceived":  108,
	"EventTypeAccountContactRequestIncomingDiscarded": 109,
	"EventTypeAccountContactRequestIncomingAccepted":  110,
	"EventTypeAccountContactBlocked":                  111,
	"EventTypeAccountContactUnblocked":                112,
	"EventTypeContactAliasKeyAdded":                   201,
	"EventTypeMultiMemberGroupAliasResolverAdded":     301,
	"EventTypeMultiMemberGroupInitialMemberAnnounced": 302,
	"EventTypeMultiMemberGroupAdminRoleGranted":       303,
	"EventTypeGroupMetadataPayloadSent":               1001,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{1}
}

type DebugInspectGroupLogType int32

const (
	DebugInspectGroupLogTypeUndefined DebugInspectGroupLogType = 0
	DebugInspectGroupLogTypeMessage   DebugInspectGroupLogType = 1
	DebugInspectGroupLogTypeMetadata  DebugInspectGroupLogType = 2
)

var DebugInspectGroupLogType_name = map[int32]string{
	0: "DebugInspectGroupLogTypeUndefined",
	1: "DebugInspectGroupLogTypeMessage",
	2: "DebugInspectGroupLogTypeMetadata",
}

var DebugInspectGroupLogType_value = map[string]int32{
	"DebugInspectGroupLogTypeUndefined": 0,
	"DebugInspectGroupLogTypeMessage":   1,
	"DebugInspectGroupLogTypeMetadata":  2,
}

func (x DebugInspectGroupLogType) String() string {
	return proto.EnumName(DebugInspectGroupLogType_name, int32(x))
}

func (DebugInspectGroupLogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{2}
}

type ContactState int32

const (
	ContactStateUndefined ContactState = 0
	ContactStateToRequest ContactState = 1
	ContactStateReceived  ContactState = 2
	ContactStateAdded     ContactState = 3
	ContactStateRemoved   ContactState = 4
	ContactStateDiscarded ContactState = 5
	ContactStateBlocked   ContactState = 6
)

var ContactState_name = map[int32]string{
	0: "ContactStateUndefined",
	1: "ContactStateToRequest",
	2: "ContactStateReceived",
	3: "ContactStateAdded",
	4: "ContactStateRemoved",
	5: "ContactStateDiscarded",
	6: "ContactStateBlocked",
}

var ContactState_value = map[string]int32{
	"ContactStateUndefined": 0,
	"ContactStateToRequest": 1,
	"ContactStateReceived":  2,
	"ContactStateAdded":     3,
	"ContactStateRemoved":   4,
	"ContactStateDiscarded": 5,
	"ContactStateBlocked":   6,
}

func (x ContactState) String() string {
	return proto.EnumName(ContactState_name, int32(x))
}

func (ContactState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{3}
}

type InstanceGetConfiguration_SettingState int32

const (
	Unknown     InstanceGetConfiguration_SettingState = 0
	Enabled     InstanceGetConfiguration_SettingState = 1
	Disabled    InstanceGetConfiguration_SettingState = 2
	Unavailable InstanceGetConfiguration_SettingState = 3
)

var InstanceGetConfiguration_SettingState_name = map[int32]string{
	0: "Unknown",
	1: "Enabled",
	2: "Disabled",
	3: "Unavailable",
}

var InstanceGetConfiguration_SettingState_value = map[string]int32{
	"Unknown":     0,
	"Enabled":     1,
	"Disabled":    2,
	"Unavailable": 3,
}

func (x InstanceGetConfiguration_SettingState) String() string {
	return proto.EnumName(InstanceGetConfiguration_SettingState_name, int32(x))
}

func (InstanceGetConfiguration_SettingState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{30, 0}
}

// Account describes all the secrets that identifies an Account
type Account struct {
	// group specifies which group is used to manage the account
	Group *Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// account_private_key, private part is used to signs handshake, signs device, create contacts group keys via ECDH -- public part is used to have a shareable identity
	AccountPrivateKey []byte `protobuf:"bytes,2,opt,name=account_private_key,json=accountPrivateKey,proto3" json:"account_private_key,omitempty"`
	// alias_private_key, private part is use to derive group members private keys, signs alias proofs, public part can be shared to contacts to prove identity
	AliasPrivateKey []byte `protobuf:"bytes,3,opt,name=alias_private_key,json=aliasPrivateKey,proto3" json:"alias_private_key,omitempty"`
	// public_rendezvous_seed, rendezvous seed used for direct communication
	PublicRendezvousSeed []byte   `protobuf:"bytes,4,opt,name=public_rendezvous_seed,json=publicRendezvousSeed,proto3" json:"public_rendezvous_seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{0}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *Account) GetAccountPrivateKey() []byte {
	if m != nil {
		return m.AccountPrivateKey
	}
	return nil
}

func (m *Account) GetAliasPrivateKey() []byte {
	if m != nil {
		return m.AliasPrivateKey
	}
	return nil
}

func (m *Account) GetPublicRendezvousSeed() []byte {
	if m != nil {
		return m.PublicRendezvousSeed
	}
	return nil
}

// Group define a group and is enough to invite someone to it
type Group struct {
	// public_key is the identifier of the group, it signs the group secret and the initial member of a multi-member group
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// secret is the symmetric secret of the group, which is used to encrypt the metadata
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// secret_sig is the signature of the secret used to ensure the validity of the group
	SecretSig []byte `protobuf:"bytes,3,opt,name=secret_sig,json=secretSig,proto3" json:"secret_sig,omitempty"`
	// group_type specifies the type of the group
	GroupType            GroupType `protobuf:"varint,4,opt,name=group_type,json=groupType,proto3,enum=berty.types.GroupType" json:"group_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{1}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Group) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *Group) GetSecretSig() []byte {
	if m != nil {
		return m.SecretSig
	}
	return nil
}

func (m *Group) GetGroupType() GroupType {
	if m != nil {
		return m.GroupType
	}
	return GroupTypeUndefined
}

// GroupMetadata is used in GroupEnvelope and only readable by invited group members
type GroupMetadata struct {
	// event_type defines which event type is used
	EventType EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=berty.types.EventType" json:"event_type,omitempty"`
	// the serialization depends on event_type, event is symmetrically encrypted
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// sig is the signature of the payload, it depends on the event_type for the used key
	Sig                  []byte   `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMetadata) Reset()         { *m = GroupMetadata{} }
func (m *GroupMetadata) String() string { return proto.CompactTextString(m) }
func (*GroupMetadata) ProtoMessage()    {}
func (*GroupMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{2}
}
func (m *GroupMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMetadata.Merge(m, src)
}
func (m *GroupMetadata) XXX_Size() int {
	return m.Size()
}
func (m *GroupMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMetadata proto.InternalMessageInfo

func (m *GroupMetadata) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventTypeUndefined
}

func (m *GroupMetadata) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GroupMetadata) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

// GroupEnvelope is a publicly exposed structure containing a group metadata event
type GroupEnvelope struct {
	// nonce is used to encrypt the message
	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// event is encrypted using a symmetric key shared among group members
	Event                []byte   `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupEnvelope) Reset()         { *m = GroupEnvelope{} }
func (m *GroupEnvelope) String() string { return proto.CompactTextString(m) }
func (*GroupEnvelope) ProtoMessage()    {}
func (*GroupEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{3}
}
func (m *GroupEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupEnvelope.Merge(m, src)
}
func (m *GroupEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *GroupEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_GroupEnvelope proto.InternalMessageInfo

func (m *GroupEnvelope) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *GroupEnvelope) GetEvent() []byte {
	if m != nil {
		return m.Event
	}
	return nil
}

// MessageHeaders is used in MessageEnvelope and only readable by invited group members
type MessageHeaders struct {
	// counter is the current counter value for the specified device
	Counter uint64 `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"`
	// device_pk is the public key of the device sending the message
	DevicePK []byte `protobuf:"bytes,2,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// sig is the signature of the encrypted message using the device's private key
	Sig []byte `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
	// metadata allow to pass custom informations
	Metadata             map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MessageHeaders) Reset()         { *m = MessageHeaders{} }
func (m *MessageHeaders) String() string { return proto.CompactTextString(m) }
func (*MessageHeaders) ProtoMessage()    {}
func (*MessageHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{4}
}
func (m *MessageHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageHeaders.Merge(m, src)
}
func (m *MessageHeaders) XXX_Size() int {
	return m.Size()
}
func (m *MessageHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_MessageHeaders proto.InternalMessageInfo

func (m *MessageHeaders) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *MessageHeaders) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *MessageHeaders) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *MessageHeaders) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// MessageEnvelope is a publicly exposed structure containing a group secure message
type MessageEnvelope struct {
	// message_headers is an encrypted serialization using a symmetric key of a MessageHeaders message
	MessageHeaders []byte `protobuf:"bytes,1,opt,name=message_headers,json=messageHeaders,proto3" json:"message_headers,omitempty"`
	// message is an encrypted message, only readable by group members who previously received the appropriate chain key
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// nonce is a nonce for message headers
	Nonce                []byte   `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageEnvelope) Reset()         { *m = MessageEnvelope{} }
func (m *MessageEnvelope) String() string { return proto.CompactTextString(m) }
func (*MessageEnvelope) ProtoMessage()    {}
func (*MessageEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{5}
}
func (m *MessageEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageEnvelope.Merge(m, src)
}
func (m *MessageEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *MessageEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_MessageEnvelope proto.InternalMessageInfo

func (m *MessageEnvelope) GetMessageHeaders() []byte {
	if m != nil {
		return m.MessageHeaders
	}
	return nil
}

func (m *MessageEnvelope) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *MessageEnvelope) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

// EventContext adds context (its id and its parents) to an event
type EventContext struct {
	// id is the CID of the underlying OrbitDB event
	ID []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// id are the the CIDs of the underlying parents of the OrbitDB event
	ParentIDs [][]byte `protobuf:"bytes,2,rep,name=parent_ids,json=parentIds,proto3" json:"parent_ids,omitempty"`
	// group_pk receiving the event
	GroupPK              []byte   `protobuf:"bytes,3,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventContext) Reset()         { *m = EventContext{} }
func (m *EventContext) String() string { return proto.CompactTextString(m) }
func (*EventContext) ProtoMessage()    {}
func (*EventContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{6}
}
func (m *EventContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventContext.Merge(m, src)
}
func (m *EventContext) XXX_Size() int {
	return m.Size()
}
func (m *EventContext) XXX_DiscardUnknown() {
	xxx_messageInfo_EventContext.DiscardUnknown(m)
}

var xxx_messageInfo_EventContext proto.InternalMessageInfo

func (m *EventContext) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *EventContext) GetParentIDs() [][]byte {
	if m != nil {
		return m.ParentIDs
	}
	return nil
}

func (m *EventContext) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

// AppMetadata is an app defined message, accessible to future group members
type AppMetadata struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// message is the payload
	Message              []byte   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppMetadata) Reset()         { *m = AppMetadata{} }
func (m *AppMetadata) String() string { return proto.CompactTextString(m) }
func (*AppMetadata) ProtoMessage()    {}
func (*AppMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{7}
}
func (m *AppMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMetadata.Merge(m, src)
}
func (m *AppMetadata) XXX_Size() int {
	return m.Size()
}
func (m *AppMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AppMetadata proto.InternalMessageInfo

func (m *AppMetadata) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *AppMetadata) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// ContactAddAliasKey is an event type where ones shares their alias public key
type ContactAddAliasKey struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// alias_pk is the alias key which will be used to verify a contact identity
	AliasPK              []byte   `protobuf:"bytes,2,opt,name=alias_pk,json=aliasPk,proto3" json:"alias_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactAddAliasKey) Reset()         { *m = ContactAddAliasKey{} }
func (m *ContactAddAliasKey) String() string { return proto.CompactTextString(m) }
func (*ContactAddAliasKey) ProtoMessage()    {}
func (*ContactAddAliasKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{8}
}
func (m *ContactAddAliasKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactAddAliasKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactAddAliasKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactAddAliasKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactAddAliasKey.Merge(m, src)
}
func (m *ContactAddAliasKey) XXX_Size() int {
	return m.Size()
}
func (m *ContactAddAliasKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactAddAliasKey.DiscardUnknown(m)
}

var xxx_messageInfo_ContactAddAliasKey proto.InternalMessageInfo

func (m *ContactAddAliasKey) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *ContactAddAliasKey) GetAliasPK() []byte {
	if m != nil {
		return m.AliasPK
	}
	return nil
}

// GroupAddMemberDevice is an event which indicates to a group a new device (and eventually a new member) is joining it
// When added on AccountGroup, this event should be followed by appropriate GroupAddMemberDevice and GroupAddDeviceSecret events
type GroupAddMemberDevice struct {
	// member_pk is the member sending the event
	MemberPK []byte `protobuf:"bytes,1,opt,name=member_pk,json=memberPk,proto3" json:"member_pk,omitempty"`
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,2,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// member_sig is used to prove the ownership of the member pk
	MemberSig            []byte   `protobuf:"bytes,3,opt,name=member_sig,json=memberSig,proto3" json:"member_sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupAddMemberDevice) Reset()         { *m = GroupAddMemberDevice{} }
func (m *GroupAddMemberDevice) String() string { return proto.CompactTextString(m) }
func (*GroupAddMemberDevice) ProtoMessage()    {}
func (*GroupAddMemberDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{9}
}
func (m *GroupAddMemberDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupAddMemberDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupAddMemberDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupAddMemberDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupAddMemberDevice.Merge(m, src)
}
func (m *GroupAddMemberDevice) XXX_Size() int {
	return m.Size()
}
func (m *GroupAddMemberDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupAddMemberDevice.DiscardUnknown(m)
}

var xxx_messageInfo_GroupAddMemberDevice proto.InternalMessageInfo

func (m *GroupAddMemberDevice) GetMemberPK() []byte {
	if m != nil {
		return m.MemberPK
	}
	return nil
}

func (m *GroupAddMemberDevice) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *GroupAddMemberDevice) GetMemberSig() []byte {
	if m != nil {
		return m.MemberSig
	}
	return nil
}

// DeviceSecret is encrypted for a specific member of the group
type DeviceSecret struct {
	// chain_key is the current value of the chain key of the group device
	ChainKey []byte `protobuf:"bytes,1,opt,name=chain_key,json=chainKey,proto3" json:"chain_key,omitempty"`
	// counter is the current value of the counter of the group device
	Counter              uint64   `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceSecret) Reset()         { *m = DeviceSecret{} }
func (m *DeviceSecret) String() string { return proto.CompactTextString(m) }
func (*DeviceSecret) ProtoMessage()    {}
func (*DeviceSecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{10}
}
func (m *DeviceSecret) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceSecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceSecret.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceSecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceSecret.Merge(m, src)
}
func (m *DeviceSecret) XXX_Size() int {
	return m.Size()
}
func (m *DeviceSecret) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceSecret.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceSecret proto.InternalMessageInfo

func (m *DeviceSecret) GetChainKey() []byte {
	if m != nil {
		return m.ChainKey
	}
	return nil
}

func (m *DeviceSecret) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

// GroupAddDeviceSecret is an event which indicates to a group member a device secret
type GroupAddDeviceSecret struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// dest_member_pk is the member who should receive the secret
	DestMemberPK []byte `protobuf:"bytes,2,opt,name=dest_member_pk,json=destMemberPk,proto3" json:"dest_member_pk,omitempty"`
	// payload is the serialization of Payload encrypted for the specified member
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupAddDeviceSecret) Reset()         { *m = GroupAddDeviceSecret{} }
func (m *GroupAddDeviceSecret) String() string { return proto.CompactTextString(m) }
func (*GroupAddDeviceSecret) ProtoMessage()    {}
func (*GroupAddDeviceSecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{11}
}
func (m *GroupAddDeviceSecret) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupAddDeviceSecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupAddDeviceSecret.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupAddDeviceSecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupAddDeviceSecret.Merge(m, src)
}
func (m *GroupAddDeviceSecret) XXX_Size() int {
	return m.Size()
}
func (m *GroupAddDeviceSecret) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupAddDeviceSecret.DiscardUnknown(m)
}

var xxx_messageInfo_GroupAddDeviceSecret proto.InternalMessageInfo

func (m *GroupAddDeviceSecret) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *GroupAddDeviceSecret) GetDestMemberPK() []byte {
	if m != nil {
		return m.DestMemberPK
	}
	return nil
}

func (m *GroupAddDeviceSecret) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// MultiMemberGroupAddAliasResolver indicates that a group member want to disclose their presence in the group to their contacts
type MultiMemberGroupAddAliasResolver struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// alias_resolver allows contact of an account to resolve the real identity behind an alias (Multi-Member Group Member)
	// Generated by both contacts and account independently using: hmac(aliasPK, GroupID)
	AliasResolver []byte `protobuf:"bytes,2,opt,name=alias_resolver,json=aliasResolver,proto3" json:"alias_resolver,omitempty"`
	// alias_proof ensures that the associated alias_resolver has been issued by the right account
	// Generated using aliasSKSig(GroupID)
	AliasProof           []byte   `protobuf:"bytes,3,opt,name=alias_proof,json=aliasProof,proto3" json:"alias_proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupAddAliasResolver) Reset()         { *m = MultiMemberGroupAddAliasResolver{} }
func (m *MultiMemberGroupAddAliasResolver) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupAddAliasResolver) ProtoMessage()    {}
func (*MultiMemberGroupAddAliasResolver) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{12}
}
func (m *MultiMemberGroupAddAliasResolver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupAddAliasResolver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupAddAliasResolver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupAddAliasResolver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupAddAliasResolver.Merge(m, src)
}
func (m *MultiMemberGroupAddAliasResolver) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupAddAliasResolver) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupAddAliasResolver.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupAddAliasResolver proto.InternalMessageInfo

func (m *MultiMemberGroupAddAliasResolver) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *MultiMemberGroupAddAliasResolver) GetAliasResolver() []byte {
	if m != nil {
		return m.AliasResolver
	}
	return nil
}

func (m *MultiMemberGroupAddAliasResolver) GetAliasProof() []byte {
	if m != nil {
		return m.AliasProof
	}
	return nil
}

// MultiMemberGrantAdminRole indicates that a group admin allows another group member to act as an admin
type MultiMemberGrantAdminRole struct {
	// device_pk is the device sending the event, signs the message, must be the device of an admin of the group
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// grantee_member_pk is the member public key of the member granted of the admin role
	GranteeMemberPK      []byte   `protobuf:"bytes,2,opt,name=grantee_member_pk,json=granteeMemberPk,proto3" json:"grantee_member_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGrantAdminRole) Reset()         { *m = MultiMemberGrantAdminRole{} }
func (m *MultiMemberGrantAdminRole) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGrantAdminRole) ProtoMessage()    {}
func (*MultiMemberGrantAdminRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{13}
}
func (m *MultiMemberGrantAdminRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGrantAdminRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGrantAdminRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGrantAdminRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGrantAdminRole.Merge(m, src)
}
func (m *MultiMemberGrantAdminRole) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGrantAdminRole) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGrantAdminRole.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGrantAdminRole proto.InternalMessageInfo

func (m *MultiMemberGrantAdminRole) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *MultiMemberGrantAdminRole) GetGranteeMemberPK() []byte {
	if m != nil {
		return m.GranteeMemberPK
	}
	return nil
}

// MultiMemberInitialMember indicates that a member is the group creator, this event is signed using the group ID private key
type MultiMemberInitialMember struct {
	// member_pk is the public key of the member who is the group creator
	MemberPK             []byte   `protobuf:"bytes,1,opt,name=member_pk,json=memberPk,proto3" json:"member_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberInitialMember) Reset()         { *m = MultiMemberInitialMember{} }
func (m *MultiMemberInitialMember) String() string { return proto.CompactTextString(m) }
func (*MultiMemberInitialMember) ProtoMessage()    {}
func (*MultiMemberInitialMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{14}
}
func (m *MultiMemberInitialMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberInitialMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberInitialMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberInitialMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberInitialMember.Merge(m, src)
}
func (m *MultiMemberInitialMember) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberInitialMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberInitialMember.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberInitialMember proto.InternalMessageInfo

func (m *MultiMemberInitialMember) GetMemberPK() []byte {
	if m != nil {
		return m.MemberPK
	}
	return nil
}

// GroupAddAdditionalRendezvousSeed indicates that an additional rendezvous point should be used for data synchronization
type GroupAddAdditionalRendezvousSeed struct {
	// device_pk is the device sending the event, signs the message, must be the device of an admin of the group
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// seed is the additional rendezvous point seed which should be used
	Seed                 []byte   `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupAddAdditionalRendezvousSeed) Reset()         { *m = GroupAddAdditionalRendezvousSeed{} }
func (m *GroupAddAdditionalRendezvousSeed) String() string { return proto.CompactTextString(m) }
func (*GroupAddAdditionalRendezvousSeed) ProtoMessage()    {}
func (*GroupAddAdditionalRendezvousSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{15}
}
func (m *GroupAddAdditionalRendezvousSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupAddAdditionalRendezvousSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupAddAdditionalRendezvousSeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupAddAdditionalRendezvousSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupAddAdditionalRendezvousSeed.Merge(m, src)
}
func (m *GroupAddAdditionalRendezvousSeed) XXX_Size() int {
	return m.Size()
}
func (m *GroupAddAdditionalRendezvousSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupAddAdditionalRendezvousSeed.DiscardUnknown(m)
}

var xxx_messageInfo_GroupAddAdditionalRendezvousSeed proto.InternalMessageInfo

func (m *GroupAddAdditionalRendezvousSeed) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *GroupAddAdditionalRendezvousSeed) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

// GroupRemoveAdditionalRendezvousSeed indicates that a previously added rendezvous point should be removed
type GroupRemoveAdditionalRendezvousSeed struct {
	// device_pk is the device sending the event, signs the message, must be the device of an admin of the group
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// seed is the additional rendezvous point seed which should be removed
	Seed                 []byte   `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupRemoveAdditionalRendezvousSeed) Reset()         { *m = GroupRemoveAdditionalRendezvousSeed{} }
func (m *GroupRemoveAdditionalRendezvousSeed) String() string { return proto.CompactTextString(m) }
func (*GroupRemoveAdditionalRendezvousSeed) ProtoMessage()    {}
func (*GroupRemoveAdditionalRendezvousSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{16}
}
func (m *GroupRemoveAdditionalRendezvousSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupRemoveAdditionalRendezvousSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupRemoveAdditionalRendezvousSeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupRemoveAdditionalRendezvousSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupRemoveAdditionalRendezvousSeed.Merge(m, src)
}
func (m *GroupRemoveAdditionalRendezvousSeed) XXX_Size() int {
	return m.Size()
}
func (m *GroupRemoveAdditionalRendezvousSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupRemoveAdditionalRendezvousSeed.DiscardUnknown(m)
}

var xxx_messageInfo_GroupRemoveAdditionalRendezvousSeed proto.InternalMessageInfo

func (m *GroupRemoveAdditionalRendezvousSeed) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *GroupRemoveAdditionalRendezvousSeed) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

// AccountGroupJoined indicates that the account is now part of a new group
type AccountGroupJoined struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// group describe the joined group
	Group                *Group   `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountGroupJoined) Reset()         { *m = AccountGroupJoined{} }
func (m *AccountGroupJoined) String() string { return proto.CompactTextString(m) }
func (*AccountGroupJoined) ProtoMessage()    {}
func (*AccountGroupJoined) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{17}
}
func (m *AccountGroupJoined) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountGroupJoined) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountGroupJoined.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountGroupJoined) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountGroupJoined.Merge(m, src)
}
func (m *AccountGroupJoined) XXX_Size() int {
	return m.Size()
}
func (m *AccountGroupJoined) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountGroupJoined.DiscardUnknown(m)
}

var xxx_messageInfo_AccountGroupJoined proto.InternalMessageInfo

func (m *AccountGroupJoined) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *AccountGroupJoined) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

// AccountGroupJoined indicates that the account has left a group
type AccountGroupLeft struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// group_pk references the group left
	GroupPK              []byte   `protobuf:"bytes,2,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountGroupLeft) Reset()         { *m = AccountGroupLeft{} }
func (m *AccountGroupLeft) String() string { return proto.CompactTextString(m) }
func (*AccountGroupLeft) ProtoMessage()    {}
func (*AccountGroupLeft) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{18}
}
func (m *AccountGroupLeft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountGroupLeft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountGroupLeft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountGroupLeft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountGroupLeft.Merge(m, src)
}
func (m *AccountGroupLeft) XXX_Size() int {
	return m.Size()
}
func (m *AccountGroupLeft) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountGroupLeft.DiscardUnknown(m)
}

var xxx_messageInfo_AccountGroupLeft proto.InternalMessageInfo

func (m *AccountGroupLeft) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *AccountGroupLeft) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

// AccountContactRequestDisabled indicates that the account should not be advertised on a public rendezvous point
type AccountContactRequestDisabled struct {
	// device_pk is the device sending the event, signs the message
	DevicePK             []byte   `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountContactRequestDisabled) Reset()         { *m = AccountContactRequestDisabled{} }
func (m *AccountContactRequestDisabled) String() string { return proto.CompactTextString(m) }
func (*AccountContactRequestDisabled) ProtoMessage()    {}
func (*AccountContactRequestDisabled) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{19}
}
func (m *AccountContactRequestDisabled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountContactRequestDisabled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountContactRequestDisabled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountContactRequestDisabled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountContactRequestDisabled.Merge(m, src)
}
func (m *AccountContactRequestDisabled) XXX_Size() int {
	return m.Size()
}
func (m *AccountContactRequestDisabled) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountContactRequestDisabled.DiscardUnknown(m)
}

var xxx_messageInfo_AccountContactRequestDisabled proto.InternalMessageInfo

func (m *AccountContactRequestDisabled) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

// AccountContactRequestDisabled indicates that the account should be advertised on a public rendezvous point
type AccountContactRequestEnabled struct {
	// device_pk is the device sending the event, signs the message
	DevicePK             []byte   `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountContactRequestEnabled) Reset()         { *m = AccountContactRequestEnabled{} }
func (m *AccountContactRequestEnabled) String() string { return proto.CompactTextString(m) }
func (*AccountContactRequestEnabled) ProtoMessage()    {}
func (*AccountContactRequestEnabled) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{20}
}
func (m *AccountContactRequestEnabled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountContactRequestEnabled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountContactRequestEnabled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountContactRequestEnabled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountContactRequestEnabled.Merge(m, src)
}
func (m *AccountContactRequestEnabled) XXX_Size() int {
	return m.Size()
}
func (m *AccountContactRequestEnabled) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountContactRequestEnabled.DiscardUnknown(m)
}

var xxx_messageInfo_AccountContactRequestEnabled proto.InternalMessageInfo

func (m *AccountContactRequestEnabled) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

// AccountContactRequestDisabled indicates that the account should be advertised on different public rendezvous points
type AccountContactRequestReferenceReset struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// public_rendezvous_seed is the new rendezvous point seed
	PublicRendezvousSeed []byte   `protobuf:"bytes,2,opt,name=public_rendezvous_seed,json=publicRendezvousSeed,proto3" json:"public_rendezvous_seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountContactRequestReferenceReset) Reset()         { *m = AccountContactRequestReferenceReset{} }
func (m *AccountContactRequestReferenceReset) String() string { return proto.CompactTextString(m) }
func (*AccountContactRequestReferenceReset) ProtoMessage()    {}
func (*AccountContactRequestReferenceReset) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{21}
}
func (m *AccountContactRequestReferenceReset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountContactRequestReferenceReset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountContactRequestReferenceReset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountContactRequestReferenceReset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountContactRequestReferenceReset.Merge(m, src)
}
func (m *AccountContactRequestReferenceReset) XXX_Size() int {
	return m.Size()
}
func (m *AccountContactRequestReferenceReset) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountContactRequestReferenceReset.DiscardUnknown(m)
}

var xxx_messageInfo_AccountContactRequestReferenceReset proto.InternalMessageInfo

func (m *AccountContactRequestReferenceReset) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *AccountContactRequestReferenceReset) GetPublicRendezvousSeed() []byte {
	if m != nil {
		return m.PublicRendezvousSeed
	}
	return nil
}

// This event should be followed by an AccountGroupJoined event
// This event should be followed by a GroupAddMemberDevice event within the AccountGroup
// This event should be followed by a GroupAddDeviceSecret event within the AccountGroup
// AccountContactRequestEnqueued indicates that the account will attempt to send a contact request when a matching peer is discovered
type AccountContactRequestEnqueued struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// group_pk is the 1to1 group with the requested user
	GroupPK []byte `protobuf:"bytes,2,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	// contact is a message describing how to connect to the other account
	Contact *ShareableContact `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
	// own_metadata is the identifying metadata that will be shared to the other account
	OwnMetadata          []byte   `protobuf:"bytes,4,opt,name=own_metadata,json=ownMetadata,proto3" json:"own_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountContactRequestEnqueued) Reset()         { *m = AccountContactRequestEnqueued{} }
func (m *AccountContactRequestEnqueued) String() string { return proto.CompactTextString(m) }
func (*AccountContactRequestEnqueued) ProtoMessage()    {}
func (*AccountContactRequestEnqueued) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{22}
}
func (m *AccountContactRequestEnqueued) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountContactRequestEnqueued) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountContactRequestEnqueued.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountContactRequestEnqueued) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountContactRequestEnqueued.Merge(m, src)
}
func (m *AccountContactRequestEnqueued) XXX_Size() int {
	return m.Size()
}
func (m *AccountContactRequestEnqueued) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountContactRequestEnqueued.DiscardUnknown(m)
}

var xxx_messageInfo_AccountContactRequestEnqueued proto.InternalMessageInfo

func (m *AccountContactRequestEnqueued) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *AccountContactRequestEnqueued) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *AccountContactRequestEnqueued) GetContact() *ShareableContact {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *AccountContactRequestEnqueued) GetOwnMetadata() []byte {
	if m != nil {
		return m.OwnMetadata
	}
	return nil
}

// AccountContactRequestSent indicates that the account has sent a contact request
type AccountContactRequestSent struct {
	// device_pk is the device sending the account event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// contact_pk is the contacted account
	ContactPK            []byte   `protobuf:"bytes,2,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountContactRequestSent) Reset()         { *m = AccountContactRequestSent{} }
func (m *AccountContactRequestSent) String() string { return proto.CompactTextString(m) }
func (*AccountContactRequestSent) ProtoMessage()    {}
func (*AccountContactRequestSent) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{23}
}
func (m *AccountContactRequestSent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountContactRequestSent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountContactRequestSent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountContactRequestSent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountContactRequestSent.Merge(m, src)
}
func (m *AccountContactRequestSent) XXX_Size() int {
	return m.Size()
}
func (m *AccountContactRequestSent) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountContactRequestSent.DiscardUnknown(m)
}

var xxx_messageInfo_AccountContactRequestSent proto.InternalMessageInfo

func (m *AccountContactRequestSent) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *AccountContactRequestSent) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

// AccountContactRequestReceived indicates that the account has received a new contact request
type AccountContactRequestReceived struct {
	// device_pk is the device sending the account event (which received the contact request), signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// contact_pk is the account sending the request
	ContactPK []byte `protobuf:"bytes,2,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	// TODO: is this necessary?
	// contact_rendezvous_seed is the rendezvous seed of the contact sending the request
	ContactRendezvousSeed []byte `protobuf:"bytes,3,opt,name=contact_rendezvous_seed,json=contactRendezvousSeed,proto3" json:"contact_rendezvous_seed,omitempty"`
	// TODO: is this necessary?
	// contact_metadata is the metadata specific to the app to identify the contact for the request
	ContactMetadata      []byte   `protobuf:"bytes,4,opt,name=contact_metadata,json=contactMetadata,proto3" json:"contact_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountContactRequestReceived) Reset()         { *m = AccountContactRequestReceived{} }
func (m *AccountContactRequestReceived) String() string { return proto.CompactTextString(m) }
func (*AccountContactRequestReceived) ProtoMessage()    {}
func (*AccountContactRequestReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{24}
}
func (m *AccountContactRequestReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountContactRequestReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountContactRequestReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountContactRequestReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountContactRequestReceived.Merge(m, src)
}
func (m *AccountContactRequestReceived) XXX_Size() int {
	return m.Size()
}
func (m *AccountContactRequestReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountContactRequestReceived.DiscardUnknown(m)
}

var xxx_messageInfo_AccountContactRequestReceived proto.InternalMessageInfo

func (m *AccountContactRequestReceived) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *AccountContactRequestReceived) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

func (m *AccountContactRequestReceived) GetContactRendezvousSeed() []byte {
	if m != nil {
		return m.ContactRendezvousSeed
	}
	return nil
}

func (m *AccountContactRequestReceived) GetContactMetadata() []byte {
	if m != nil {
		return m.ContactMetadata
	}
	return nil
}

// AccountContactRequestDiscarded indicates that a contact request has been refused
type AccountContactRequestDiscarded struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// contact_pk is the contact whom request is refused
	ContactPK            []byte   `protobuf:"bytes,2,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountContactRequestDiscarded) Reset()         { *m = AccountContactRequestDiscarded{} }
func (m *AccountContactRequestDiscarded) String() string { return proto.CompactTextString(m) }
func (*AccountContactRequestDiscarded) ProtoMessage()    {}
func (*AccountContactRequestDiscarded) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{25}
}
func (m *AccountContactRequestDiscarded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountContactRequestDiscarded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountContactRequestDiscarded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountContactRequestDiscarded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountContactRequestDiscarded.Merge(m, src)
}
func (m *AccountContactRequestDiscarded) XXX_Size() int {
	return m.Size()
}
func (m *AccountContactRequestDiscarded) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountContactRequestDiscarded.DiscardUnknown(m)
}

var xxx_messageInfo_AccountContactRequestDiscarded proto.InternalMessageInfo

func (m *AccountContactRequestDiscarded) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *AccountContactRequestDiscarded) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

// This event should be followed by an AccountGroupJoined event
// This event should be followed by GroupAddMemberDevice and GroupAddDeviceSecret events within the AccountGroup
// AccountContactRequestAccepted indicates that a contact request has been accepted
type AccountContactRequestAccepted struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// contact_pk is the contact whom request is accepted
	ContactPK []byte `protobuf:"bytes,2,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	// group_pk is the 1to1 group with the requester user
	GroupPK              []byte   `protobuf:"bytes,3,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountContactRequestAccepted) Reset()         { *m = AccountContactRequestAccepted{} }
func (m *AccountContactRequestAccepted) String() string { return proto.CompactTextString(m) }
func (*AccountContactRequestAccepted) ProtoMessage()    {}
func (*AccountContactRequestAccepted) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{26}
}
func (m *AccountContactRequestAccepted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountContactRequestAccepted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountContactRequestAccepted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountContactRequestAccepted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountContactRequestAccepted.Merge(m, src)
}
func (m *AccountContactRequestAccepted) XXX_Size() int {
	return m.Size()
}
func (m *AccountContactRequestAccepted) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountContactRequestAccepted.DiscardUnknown(m)
}

var xxx_messageInfo_AccountContactRequestAccepted proto.InternalMessageInfo

func (m *AccountContactRequestAccepted) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *AccountContactRequestAccepted) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

func (m *AccountContactRequestAccepted) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

// AccountContactBlocked indicates that a contact is blocked
type AccountContactBlocked struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// contact_pk is the contact blocked
	ContactPK            []byte   `protobuf:"bytes,2,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountContactBlocked) Reset()         { *m = AccountContactBlocked{} }
func (m *AccountContactBlocked) String() string { return proto.CompactTextString(m) }
func (*AccountContactBlocked) ProtoMessage()    {}
func (*AccountContactBlocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{27}
}
func (m *AccountContactBlocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountContactBlocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountContactBlocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountContactBlocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountContactBlocked.Merge(m, src)
}
func (m *AccountContactBlocked) XXX_Size() int {
	return m.Size()
}
func (m *AccountContactBlocked) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountContactBlocked.DiscardUnknown(m)
}

var xxx_messageInfo_AccountContactBlocked proto.InternalMessageInfo

func (m *AccountContactBlocked) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *AccountContactBlocked) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

// AccountContactUnblocked indicates that a contact is unblocked
type AccountContactUnblocked struct {
	// device_pk is the device sending the event, signs the message
	DevicePK []byte `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// contact_pk is the contact unblocked
	ContactPK            []byte   `protobuf:"bytes,2,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountContactUnblocked) Reset()         { *m = AccountContactUnblocked{} }
func (m *AccountContactUnblocked) String() string { return proto.CompactTextString(m) }
func (*AccountContactUnblocked) ProtoMessage()    {}
func (*AccountContactUnblocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{28}
}
func (m *AccountContactUnblocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountContactUnblocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountContactUnblocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountContactUnblocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountContactUnblocked.Merge(m, src)
}
func (m *AccountContactUnblocked) XXX_Size() int {
	return m.Size()
}
func (m *AccountContactUnblocked) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountContactUnblocked.DiscardUnknown(m)
}

var xxx_messageInfo_AccountContactUnblocked proto.InternalMessageInfo

func (m *AccountContactUnblocked) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *AccountContactUnblocked) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

type InstanceExportData struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceExportData) Reset()         { *m = InstanceExportData{} }
func (m *InstanceExportData) String() string { return proto.CompactTextString(m) }
func (*InstanceExportData) ProtoMessage()    {}
func (*InstanceExportData) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{29}
}
func (m *InstanceExportData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceExportData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceExportData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceExportData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceExportData.Merge(m, src)
}
func (m *InstanceExportData) XXX_Size() int {
	return m.Size()
}
func (m *InstanceExportData) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceExportData.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceExportData proto.InternalMessageInfo

type InstanceExportData_Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceExportData_Request) Reset()         { *m = InstanceExportData_Request{} }
func (m *InstanceExportData_Request) String() string { return proto.CompactTextString(m) }
func (*InstanceExportData_Request) ProtoMessage()    {}
func (*InstanceExportData_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{29, 0}
}
func (m *InstanceExportData_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceExportData_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceExportData_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceExportData_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceExportData_Request.Merge(m, src)
}
func (m *InstanceExportData_Request) XXX_Size() int {
	return m.Size()
}
func (m *InstanceExportData_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceExportData_Request.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceExportData_Request proto.InternalMessageInfo

type InstanceExportData_Reply struct {
	ExportedData         []byte   `protobuf:"bytes,1,opt,name=exported_data,json=exportedData,proto3" json:"exported_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceExportData_Reply) Reset()         { *m = InstanceExportData_Reply{} }
func (m *InstanceExportData_Reply) String() string { return proto.CompactTextString(m) }
func (*InstanceExportData_Reply) ProtoMessage()    {}
func (*InstanceExportData_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{29, 1}
}
func (m *InstanceExportData_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceExportData_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceExportData_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceExportData_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceExportData_Reply.Merge(m, src)
}
func (m *InstanceExportData_Reply) XXX_Size() int {
	return m.Size()
}
func (m *InstanceExportData_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceExportData_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceExportData_Reply proto.InternalMessageInfo

func (m *InstanceExportData_Reply) GetExportedData() []byte {
	if m != nil {
		return m.ExportedData
	}
	return nil
}

type InstanceGetConfiguration struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceGetConfiguration) Reset()         { *m = InstanceGetConfiguration{} }
func (m *InstanceGetConfiguration) String() string { return proto.CompactTextString(m) }
func (*InstanceGetConfiguration) ProtoMessage()    {}
func (*InstanceGetConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{30}
}
func (m *InstanceGetConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceGetConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceGetConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceGetConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceGetConfiguration.Merge(m, src)
}
func (m *InstanceGetConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *InstanceGetConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceGetConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceGetConfiguration proto.InternalMessageInfo

type InstanceGetConfiguration_Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceGetConfiguration_Request) Reset()         { *m = InstanceGetConfiguration_Request{} }
func (m *InstanceGetConfiguration_Request) String() string { return proto.CompactTextString(m) }
func (*InstanceGetConfiguration_Request) ProtoMessage()    {}
func (*InstanceGetConfiguration_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{30, 0}
}
func (m *InstanceGetConfiguration_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceGetConfiguration_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceGetConfiguration_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceGetConfiguration_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceGetConfiguration_Request.Merge(m, src)
}
func (m *InstanceGetConfiguration_Request) XXX_Size() int {
	return m.Size()
}
func (m *InstanceGetConfiguration_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceGetConfiguration_Request.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceGetConfiguration_Request proto.InternalMessageInfo

type InstanceGetConfiguration_Reply struct {
	// account_pk is the public key of the current account
	AccountPK []byte `protobuf:"bytes,1,opt,name=account_pk,json=accountPk,proto3" json:"account_pk,omitempty"`
	// device_pk is the public key of the current device
	DevicePK []byte `protobuf:"bytes,2,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// account_group_pk is the public key of the account group
	AccountGroupPK       []byte                                `protobuf:"bytes,3,opt,name=account_group_pk,json=accountGroupPk,proto3" json:"account_group_pk,omitempty"`
	PeerID               string                                `protobuf:"bytes,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Listeners            []string                              `protobuf:"bytes,5,rep,name=listeners,proto3" json:"listeners,omitempty"`
	BleEnabled           InstanceGetConfiguration_SettingState `protobuf:"varint,6,opt,name=ble_enabled,json=bleEnabled,proto3,enum=berty.types.InstanceGetConfiguration_SettingState" json:"ble_enabled,omitempty"`
	WifiP2PEnabled       InstanceGetConfiguration_SettingState `protobuf:"varint,7,opt,name=wifi_p2p_enabled,json=wifiP2pEnabled,proto3,enum=berty.types.InstanceGetConfiguration_SettingState" json:"wifi_p2p_enabled,omitempty"`
	MdnsEnabled          InstanceGetConfiguration_SettingState `protobuf:"varint,8,opt,name=mdns_enabled,json=mdnsEnabled,proto3,enum=berty.types.InstanceGetConfiguration_SettingState" json:"mdns_enabled,omitempty"`
	RelayEnabled         InstanceGetConfiguration_SettingState `protobuf:"varint,9,opt,name=relay_enabled,json=relayEnabled,proto3,enum=berty.types.InstanceGetConfiguration_SettingState" json:"relay_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *InstanceGetConfiguration_Reply) Reset()         { *m = InstanceGetConfiguration_Reply{} }
func (m *InstanceGetConfiguration_Reply) String() string { return proto.CompactTextString(m) }
func (*InstanceGetConfiguration_Reply) ProtoMessage()    {}
func (*InstanceGetConfiguration_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{30, 1}
}
func (m *InstanceGetConfiguration_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceGetConfiguration_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceGetConfiguration_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceGetConfiguration_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceGetConfiguration_Reply.Merge(m, src)
}
func (m *InstanceGetConfiguration_Reply) XXX_Size() int {
	return m.Size()
}
func (m *InstanceGetConfiguration_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceGetConfiguration_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceGetConfiguration_Reply proto.InternalMessageInfo

func (m *InstanceGetConfiguration_Reply) GetAccountPK() []byte {
	if m != nil {
		return m.AccountPK
	}
	return nil
}

func (m *InstanceGetConfiguration_Reply) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *InstanceGetConfiguration_Reply) GetAccountGroupPK() []byte {
	if m != nil {
		return m.AccountGroupPK
	}
	return nil
}

func (m *InstanceGetConfiguration_Reply) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *InstanceGetConfiguration_Reply) GetListeners() []string {
	if m != nil {
		return m.Listeners
	}
	return nil
}

func (m *InstanceGetConfiguration_Reply) GetBleEnabled() InstanceGetConfiguration_SettingState {
	if m != nil {
		return m.BleEnabled
	}
	return Unknown
}

func (m *InstanceGetConfiguration_Reply) GetWifiP2PEnabled() InstanceGetConfiguration_SettingState {
	if m != nil {
		return m.WifiP2PEnabled
	}
	return Unknown
}

func (m *InstanceGetConfiguration_Reply) GetMdnsEnabled() InstanceGetConfiguration_SettingState {
	if m != nil {
		return m.MdnsEnabled
	}
	return Unknown
}

func (m *InstanceGetConfiguration_Reply) GetRelayEnabled() InstanceGetConfiguration_SettingState {
	if m != nil {
		return m.RelayEnabled
	}
	return Unknown
}

type ContactRequestReference struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestReference) Reset()         { *m = ContactRequestReference{} }
func (m *ContactRequestReference) String() string { return proto.CompactTextString(m) }
func (*ContactRequestReference) ProtoMessage()    {}
func (*ContactRequestReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{31}
}
func (m *ContactRequestReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestReference.Merge(m, src)
}
func (m *ContactRequestReference) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestReference.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestReference proto.InternalMessageInfo

type ContactRequestReference_Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestReference_Request) Reset()         { *m = ContactRequestReference_Request{} }
func (m *ContactRequestReference_Request) String() string { return proto.CompactTextString(m) }
func (*ContactRequestReference_Request) ProtoMessage()    {}
func (*ContactRequestReference_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{31, 0}
}
func (m *ContactRequestReference_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestReference_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestReference_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestReference_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestReference_Request.Merge(m, src)
}
func (m *ContactRequestReference_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestReference_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestReference_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestReference_Request proto.InternalMessageInfo

type ContactRequestReference_Reply struct {
	// public_rendezvous_seed is the rendezvous seed used by the current account
	PublicRendezvousSeed []byte `protobuf:"bytes,1,opt,name=public_rendezvous_seed,json=publicRendezvousSeed,proto3" json:"public_rendezvous_seed,omitempty"`
	// enabled indicates if incoming contact requests are enabled
	Enabled              bool     `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestReference_Reply) Reset()         { *m = ContactRequestReference_Reply{} }
func (m *ContactRequestReference_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactRequestReference_Reply) ProtoMessage()    {}
func (*ContactRequestReference_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{31, 1}
}
func (m *ContactRequestReference_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestReference_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestReference_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestReference_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestReference_Reply.Merge(m, src)
}
func (m *ContactRequestReference_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestReference_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestReference_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestReference_Reply proto.InternalMessageInfo

func (m *ContactRequestReference_Reply) GetPublicRendezvousSeed() []byte {
	if m != nil {
		return m.PublicRendezvousSeed
	}
	return nil
}

func (m *ContactRequestReference_Reply) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type ContactRequestDisable struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestDisable) Reset()         { *m = ContactRequestDisable{} }
func (m *ContactRequestDisable) String() string { return proto.CompactTextString(m) }
func (*ContactRequestDisable) ProtoMessage()    {}
func (*ContactRequestDisable) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{32}
}
func (m *ContactRequestDisable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestDisable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestDisable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestDisable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestDisable.Merge(m, src)
}
func (m *ContactRequestDisable) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestDisable) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestDisable.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestDisable proto.InternalMessageInfo

type ContactRequestDisable_Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestDisable_Request) Reset()         { *m = ContactRequestDisable_Request{} }
func (m *ContactRequestDisable_Request) String() string { return proto.CompactTextString(m) }
func (*ContactRequestDisable_Request) ProtoMessage()    {}
func (*ContactRequestDisable_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{32, 0}
}
func (m *ContactRequestDisable_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestDisable_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestDisable_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestDisable_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestDisable_Request.Merge(m, src)
}
func (m *ContactRequestDisable_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestDisable_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestDisable_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestDisable_Request proto.InternalMessageInfo

type ContactRequestDisable_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestDisable_Reply) Reset()         { *m = ContactRequestDisable_Reply{} }
func (m *ContactRequestDisable_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactRequestDisable_Reply) ProtoMessage()    {}
func (*ContactRequestDisable_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{32, 1}
}
func (m *ContactRequestDisable_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestDisable_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestDisable_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestDisable_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestDisable_Reply.Merge(m, src)
}
func (m *ContactRequestDisable_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestDisable_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestDisable_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestDisable_Reply proto.InternalMessageInfo

type ContactRequestEnable struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestEnable) Reset()         { *m = ContactRequestEnable{} }
func (m *ContactRequestEnable) String() string { return proto.CompactTextString(m) }
func (*ContactRequestEnable) ProtoMessage()    {}
func (*ContactRequestEnable) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{33}
}
func (m *ContactRequestEnable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestEnable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestEnable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestEnable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestEnable.Merge(m, src)
}
func (m *ContactRequestEnable) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestEnable) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestEnable.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestEnable proto.InternalMessageInfo

type ContactRequestEnable_Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestEnable_Request) Reset()         { *m = ContactRequestEnable_Request{} }
func (m *ContactRequestEnable_Request) String() string { return proto.CompactTextString(m) }
func (*ContactRequestEnable_Request) ProtoMessage()    {}
func (*ContactRequestEnable_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{33, 0}
}
func (m *ContactRequestEnable_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestEnable_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestEnable_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestEnable_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestEnable_Request.Merge(m, src)
}
func (m *ContactRequestEnable_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestEnable_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestEnable_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestEnable_Request proto.InternalMessageInfo

type ContactRequestEnable_Reply struct {
	// public_rendezvous_seed is the rendezvous seed used by the current account
	PublicRendezvousSeed []byte   `protobuf:"bytes,1,opt,name=public_rendezvous_seed,json=publicRendezvousSeed,proto3" json:"public_rendezvous_seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestEnable_Reply) Reset()         { *m = ContactRequestEnable_Reply{} }
func (m *ContactRequestEnable_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactRequestEnable_Reply) ProtoMessage()    {}
func (*ContactRequestEnable_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{33, 1}
}
func (m *ContactRequestEnable_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestEnable_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestEnable_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestEnable_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestEnable_Reply.Merge(m, src)
}
func (m *ContactRequestEnable_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestEnable_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestEnable_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestEnable_Reply proto.InternalMessageInfo

func (m *ContactRequestEnable_Reply) GetPublicRendezvousSeed() []byte {
	if m != nil {
		return m.PublicRendezvousSeed
	}
	return nil
}

type ContactRequestResetReference struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestResetReference) Reset()         { *m = ContactRequestResetReference{} }
func (m *ContactRequestResetReference) String() string { return proto.CompactTextString(m) }
func (*ContactRequestResetReference) ProtoMessage()    {}
func (*ContactRequestResetReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{34}
}
func (m *ContactRequestResetReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestResetReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestResetReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestResetReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestResetReference.Merge(m, src)
}
func (m *ContactRequestResetReference) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestResetReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestResetReference.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestResetReference proto.InternalMessageInfo

type ContactRequestResetReference_Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestResetReference_Request) Reset()         { *m = ContactRequestResetReference_Request{} }
func (m *ContactRequestResetReference_Request) String() string { return proto.CompactTextString(m) }
func (*ContactRequestResetReference_Request) ProtoMessage()    {}
func (*ContactRequestResetReference_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{34, 0}
}
func (m *ContactRequestResetReference_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestResetReference_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestResetReference_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestResetReference_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestResetReference_Request.Merge(m, src)
}
func (m *ContactRequestResetReference_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestResetReference_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestResetReference_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestResetReference_Request proto.InternalMessageInfo

type ContactRequestResetReference_Reply struct {
	// public_rendezvous_seed is the rendezvous seed used by the current account
	PublicRendezvousSeed []byte   `protobuf:"bytes,1,opt,name=public_rendezvous_seed,json=publicRendezvousSeed,proto3" json:"public_rendezvous_seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestResetReference_Reply) Reset()         { *m = ContactRequestResetReference_Reply{} }
func (m *ContactRequestResetReference_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactRequestResetReference_Reply) ProtoMessage()    {}
func (*ContactRequestResetReference_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{34, 1}
}
func (m *ContactRequestResetReference_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestResetReference_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestResetReference_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestResetReference_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestResetReference_Reply.Merge(m, src)
}
func (m *ContactRequestResetReference_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestResetReference_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestResetReference_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestResetReference_Reply proto.InternalMessageInfo

func (m *ContactRequestResetReference_Reply) GetPublicRendezvousSeed() []byte {
	if m != nil {
		return m.PublicRendezvousSeed
	}
	return nil
}

type ContactRequestSend struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestSend) Reset()         { *m = ContactRequestSend{} }
func (m *ContactRequestSend) String() string { return proto.CompactTextString(m) }
func (*ContactRequestSend) ProtoMessage()    {}
func (*ContactRequestSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{35}
}
func (m *ContactRequestSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestSend.Merge(m, src)
}
func (m *ContactRequestSend) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestSend) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestSend.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestSend proto.InternalMessageInfo

type ContactRequestSend_Request struct {
	// contact is a message describing how to connect to the other account
	Contact *ShareableContact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
	// own_metadata is the identifying metadata that will be shared to the other account
	OwnMetadata          []byte   `protobuf:"bytes,2,opt,name=own_metadata,json=ownMetadata,proto3" json:"own_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestSend_Request) Reset()         { *m = ContactRequestSend_Request{} }
func (m *ContactRequestSend_Request) String() string { return proto.CompactTextString(m) }
func (*ContactRequestSend_Request) ProtoMessage()    {}
func (*ContactRequestSend_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{35, 0}
}
func (m *ContactRequestSend_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestSend_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestSend_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestSend_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestSend_Request.Merge(m, src)
}
func (m *ContactRequestSend_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestSend_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestSend_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestSend_Request proto.InternalMessageInfo

func (m *ContactRequestSend_Request) GetContact() *ShareableContact {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *ContactRequestSend_Request) GetOwnMetadata() []byte {
	if m != nil {
		return m.OwnMetadata
	}
	return nil
}

type ContactRequestSend_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestSend_Reply) Reset()         { *m = ContactRequestSend_Reply{} }
func (m *ContactRequestSend_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactRequestSend_Reply) ProtoMessage()    {}
func (*ContactRequestSend_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{35, 1}
}
func (m *ContactRequestSend_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestSend_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestSend_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestSend_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestSend_Reply.Merge(m, src)
}
func (m *ContactRequestSend_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestSend_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestSend_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestSend_Reply proto.InternalMessageInfo

type ContactRequestAccept struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestAccept) Reset()         { *m = ContactRequestAccept{} }
func (m *ContactRequestAccept) String() string { return proto.CompactTextString(m) }
func (*ContactRequestAccept) ProtoMessage()    {}
func (*ContactRequestAccept) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{36}
}
func (m *ContactRequestAccept) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestAccept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestAccept.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestAccept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestAccept.Merge(m, src)
}
func (m *ContactRequestAccept) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestAccept) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestAccept.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestAccept proto.InternalMessageInfo

type ContactRequestAccept_Request struct {
	// contact_pk is the identifier of the contact to accept the request from
	ContactPK            []byte   `protobuf:"bytes,1,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestAccept_Request) Reset()         { *m = ContactRequestAccept_Request{} }
func (m *ContactRequestAccept_Request) String() string { return proto.CompactTextString(m) }
func (*ContactRequestAccept_Request) ProtoMessage()    {}
func (*ContactRequestAccept_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{36, 0}
}
func (m *ContactRequestAccept_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestAccept_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestAccept_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestAccept_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestAccept_Request.Merge(m, src)
}
func (m *ContactRequestAccept_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestAccept_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestAccept_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestAccept_Request proto.InternalMessageInfo

func (m *ContactRequestAccept_Request) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

type ContactRequestAccept_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestAccept_Reply) Reset()         { *m = ContactRequestAccept_Reply{} }
func (m *ContactRequestAccept_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactRequestAccept_Reply) ProtoMessage()    {}
func (*ContactRequestAccept_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{36, 1}
}
func (m *ContactRequestAccept_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestAccept_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestAccept_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestAccept_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestAccept_Reply.Merge(m, src)
}
func (m *ContactRequestAccept_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestAccept_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestAccept_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestAccept_Reply proto.InternalMessageInfo

type ContactRequestDiscard struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestDiscard) Reset()         { *m = ContactRequestDiscard{} }
func (m *ContactRequestDiscard) String() string { return proto.CompactTextString(m) }
func (*ContactRequestDiscard) ProtoMessage()    {}
func (*ContactRequestDiscard) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{37}
}
func (m *ContactRequestDiscard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestDiscard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestDiscard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestDiscard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestDiscard.Merge(m, src)
}
func (m *ContactRequestDiscard) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestDiscard) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestDiscard.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestDiscard proto.InternalMessageInfo

type ContactRequestDiscard_Request struct {
	// contact_pk is the identifier of the contact to ignore the request from
	ContactPK            []byte   `protobuf:"bytes,1,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestDiscard_Request) Reset()         { *m = ContactRequestDiscard_Request{} }
func (m *ContactRequestDiscard_Request) String() string { return proto.CompactTextString(m) }
func (*ContactRequestDiscard_Request) ProtoMessage()    {}
func (*ContactRequestDiscard_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{37, 0}
}
func (m *ContactRequestDiscard_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestDiscard_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestDiscard_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestDiscard_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestDiscard_Request.Merge(m, src)
}
func (m *ContactRequestDiscard_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestDiscard_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestDiscard_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestDiscard_Request proto.InternalMessageInfo

func (m *ContactRequestDiscard_Request) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

type ContactRequestDiscard_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequestDiscard_Reply) Reset()         { *m = ContactRequestDiscard_Reply{} }
func (m *ContactRequestDiscard_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactRequestDiscard_Reply) ProtoMessage()    {}
func (*ContactRequestDiscard_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{37, 1}
}
func (m *ContactRequestDiscard_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequestDiscard_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequestDiscard_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequestDiscard_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequestDiscard_Reply.Merge(m, src)
}
func (m *ContactRequestDiscard_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequestDiscard_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequestDiscard_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequestDiscard_Reply proto.InternalMessageInfo

type ContactBlock struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactBlock) Reset()         { *m = ContactBlock{} }
func (m *ContactBlock) String() string { return proto.CompactTextString(m) }
func (*ContactBlock) ProtoMessage()    {}
func (*ContactBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{38}
}
func (m *ContactBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactBlock.Merge(m, src)
}
func (m *ContactBlock) XXX_Size() int {
	return m.Size()
}
func (m *ContactBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ContactBlock proto.InternalMessageInfo

type ContactBlock_Request struct {
	// contact_pk is the identifier of the contact to block
	ContactPK            []byte   `protobuf:"bytes,1,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactBlock_Request) Reset()         { *m = ContactBlock_Request{} }
func (m *ContactBlock_Request) String() string { return proto.CompactTextString(m) }
func (*ContactBlock_Request) ProtoMessage()    {}
func (*ContactBlock_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{38, 0}
}
func (m *ContactBlock_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactBlock_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactBlock_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactBlock_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactBlock_Request.Merge(m, src)
}
func (m *ContactBlock_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactBlock_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactBlock_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactBlock_Request proto.InternalMessageInfo

func (m *ContactBlock_Request) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

type ContactBlock_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactBlock_Reply) Reset()         { *m = ContactBlock_Reply{} }
func (m *ContactBlock_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactBlock_Reply) ProtoMessage()    {}
func (*ContactBlock_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{38, 1}
}
func (m *ContactBlock_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactBlock_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactBlock_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactBlock_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactBlock_Reply.Merge(m, src)
}
func (m *ContactBlock_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactBlock_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactBlock_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactBlock_Reply proto.InternalMessageInfo

type ContactUnblock struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactUnblock) Reset()         { *m = ContactUnblock{} }
func (m *ContactUnblock) String() string { return proto.CompactTextString(m) }
func (*ContactUnblock) ProtoMessage()    {}
func (*ContactUnblock) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{39}
}
func (m *ContactUnblock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactUnblock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactUnblock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactUnblock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactUnblock.Merge(m, src)
}
func (m *ContactUnblock) XXX_Size() int {
	return m.Size()
}
func (m *ContactUnblock) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactUnblock.DiscardUnknown(m)
}

var xxx_messageInfo_ContactUnblock proto.InternalMessageInfo

type ContactUnblock_Request struct {
	// contact_pk is the identifier of the contact to unblock
	ContactPK            []byte   `protobuf:"bytes,1,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactUnblock_Request) Reset()         { *m = ContactUnblock_Request{} }
func (m *ContactUnblock_Request) String() string { return proto.CompactTextString(m) }
func (*ContactUnblock_Request) ProtoMessage()    {}
func (*ContactUnblock_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{39, 0}
}
func (m *ContactUnblock_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactUnblock_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactUnblock_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactUnblock_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactUnblock_Request.Merge(m, src)
}
func (m *ContactUnblock_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactUnblock_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactUnblock_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactUnblock_Request proto.InternalMessageInfo

func (m *ContactUnblock_Request) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

type ContactUnblock_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactUnblock_Reply) Reset()         { *m = ContactUnblock_Reply{} }
func (m *ContactUnblock_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactUnblock_Reply) ProtoMessage()    {}
func (*ContactUnblock_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{39, 1}
}
func (m *ContactUnblock_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactUnblock_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactUnblock_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactUnblock_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactUnblock_Reply.Merge(m, src)
}
func (m *ContactUnblock_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactUnblock_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactUnblock_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactUnblock_Reply proto.InternalMessageInfo

type ContactAliasKeySend struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactAliasKeySend) Reset()         { *m = ContactAliasKeySend{} }
func (m *ContactAliasKeySend) String() string { return proto.CompactTextString(m) }
func (*ContactAliasKeySend) ProtoMessage()    {}
func (*ContactAliasKeySend) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{40}
}
func (m *ContactAliasKeySend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactAliasKeySend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactAliasKeySend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactAliasKeySend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactAliasKeySend.Merge(m, src)
}
func (m *ContactAliasKeySend) XXX_Size() int {
	return m.Size()
}
func (m *ContactAliasKeySend) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactAliasKeySend.DiscardUnknown(m)
}

var xxx_messageInfo_ContactAliasKeySend proto.InternalMessageInfo

type ContactAliasKeySend_Request struct {
	// contact_pk is the identifier of the contact to send the alias public key to
	GroupPK              []byte   `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactAliasKeySend_Request) Reset()         { *m = ContactAliasKeySend_Request{} }
func (m *ContactAliasKeySend_Request) String() string { return proto.CompactTextString(m) }
func (*ContactAliasKeySend_Request) ProtoMessage()    {}
func (*ContactAliasKeySend_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{40, 0}
}
func (m *ContactAliasKeySend_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactAliasKeySend_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactAliasKeySend_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactAliasKeySend_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactAliasKeySend_Request.Merge(m, src)
}
func (m *ContactAliasKeySend_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactAliasKeySend_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactAliasKeySend_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactAliasKeySend_Request proto.InternalMessageInfo

func (m *ContactAliasKeySend_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

type ContactAliasKeySend_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactAliasKeySend_Reply) Reset()         { *m = ContactAliasKeySend_Reply{} }
func (m *ContactAliasKeySend_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactAliasKeySend_Reply) ProtoMessage()    {}
func (*ContactAliasKeySend_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{40, 1}
}
func (m *ContactAliasKeySend_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactAliasKeySend_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactAliasKeySend_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactAliasKeySend_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactAliasKeySend_Reply.Merge(m, src)
}
func (m *ContactAliasKeySend_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactAliasKeySend_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactAliasKeySend_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactAliasKeySend_Reply proto.InternalMessageInfo

type MultiMemberGroupCreate struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupCreate) Reset()         { *m = MultiMemberGroupCreate{} }
func (m *MultiMemberGroupCreate) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupCreate) ProtoMessage()    {}
func (*MultiMemberGroupCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{41}
}
func (m *MultiMemberGroupCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupCreate.Merge(m, src)
}
func (m *MultiMemberGroupCreate) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupCreate.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupCreate proto.InternalMessageInfo

type MultiMemberGroupCreate_Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupCreate_Request) Reset()         { *m = MultiMemberGroupCreate_Request{} }
func (m *MultiMemberGroupCreate_Request) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupCreate_Request) ProtoMessage()    {}
func (*MultiMemberGroupCreate_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{41, 0}
}
func (m *MultiMemberGroupCreate_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupCreate_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupCreate_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupCreate_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupCreate_Request.Merge(m, src)
}
func (m *MultiMemberGroupCreate_Request) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupCreate_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupCreate_Request.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupCreate_Request proto.InternalMessageInfo

type MultiMemberGroupCreate_Reply struct {
	// group_pk is the identifier of the newly created group
	GroupPK              []byte   `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupCreate_Reply) Reset()         { *m = MultiMemberGroupCreate_Reply{} }
func (m *MultiMemberGroupCreate_Reply) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupCreate_Reply) ProtoMessage()    {}
func (*MultiMemberGroupCreate_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{41, 1}
}
func (m *MultiMemberGroupCreate_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupCreate_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupCreate_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupCreate_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupCreate_Reply.Merge(m, src)
}
func (m *MultiMemberGroupCreate_Reply) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupCreate_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupCreate_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupCreate_Reply proto.InternalMessageInfo

func (m *MultiMemberGroupCreate_Reply) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

type MultiMemberGroupJoin struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupJoin) Reset()         { *m = MultiMemberGroupJoin{} }
func (m *MultiMemberGroupJoin) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupJoin) ProtoMessage()    {}
func (*MultiMemberGroupJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{42}
}
func (m *MultiMemberGroupJoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupJoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupJoin.Merge(m, src)
}
func (m *MultiMemberGroupJoin) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupJoin.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupJoin proto.InternalMessageInfo

type MultiMemberGroupJoin_Request struct {
	// group is the information of the group to join
	Group                *Group   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupJoin_Request) Reset()         { *m = MultiMemberGroupJoin_Request{} }
func (m *MultiMemberGroupJoin_Request) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupJoin_Request) ProtoMessage()    {}
func (*MultiMemberGroupJoin_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{42, 0}
}
func (m *MultiMemberGroupJoin_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupJoin_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupJoin_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupJoin_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupJoin_Request.Merge(m, src)
}
func (m *MultiMemberGroupJoin_Request) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupJoin_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupJoin_Request.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupJoin_Request proto.InternalMessageInfo

func (m *MultiMemberGroupJoin_Request) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type MultiMemberGroupJoin_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupJoin_Reply) Reset()         { *m = MultiMemberGroupJoin_Reply{} }
func (m *MultiMemberGroupJoin_Reply) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupJoin_Reply) ProtoMessage()    {}
func (*MultiMemberGroupJoin_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{42, 1}
}
func (m *MultiMemberGroupJoin_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupJoin_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupJoin_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupJoin_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupJoin_Reply.Merge(m, src)
}
func (m *MultiMemberGroupJoin_Reply) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupJoin_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupJoin_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupJoin_Reply proto.InternalMessageInfo

type MultiMemberGroupLeave struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupLeave) Reset()         { *m = MultiMemberGroupLeave{} }
func (m *MultiMemberGroupLeave) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupLeave) ProtoMessage()    {}
func (*MultiMemberGroupLeave) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{43}
}
func (m *MultiMemberGroupLeave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupLeave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupLeave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupLeave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupLeave.Merge(m, src)
}
func (m *MultiMemberGroupLeave) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupLeave) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupLeave.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupLeave proto.InternalMessageInfo

type MultiMemberGroupLeave_Request struct {
	GroupPK              []byte   `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupLeave_Request) Reset()         { *m = MultiMemberGroupLeave_Request{} }
func (m *MultiMemberGroupLeave_Request) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupLeave_Request) ProtoMessage()    {}
func (*MultiMemberGroupLeave_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{43, 0}
}
func (m *MultiMemberGroupLeave_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupLeave_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupLeave_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupLeave_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupLeave_Request.Merge(m, src)
}
func (m *MultiMemberGroupLeave_Request) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupLeave_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupLeave_Request.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupLeave_Request proto.InternalMessageInfo

func (m *MultiMemberGroupLeave_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

type MultiMemberGroupLeave_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupLeave_Reply) Reset()         { *m = MultiMemberGroupLeave_Reply{} }
func (m *MultiMemberGroupLeave_Reply) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupLeave_Reply) ProtoMessage()    {}
func (*MultiMemberGroupLeave_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{43, 1}
}
func (m *MultiMemberGroupLeave_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupLeave_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupLeave_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupLeave_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupLeave_Reply.Merge(m, src)
}
func (m *MultiMemberGroupLeave_Reply) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupLeave_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupLeave_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupLeave_Reply proto.InternalMessageInfo

type MultiMemberGroupAliasResolverDisclose struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupAliasResolverDisclose) Reset()         { *m = MultiMemberGroupAliasResolverDisclose{} }
func (m *MultiMemberGroupAliasResolverDisclose) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupAliasResolverDisclose) ProtoMessage()    {}
func (*MultiMemberGroupAliasResolverDisclose) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{44}
}
func (m *MultiMemberGroupAliasResolverDisclose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupAliasResolverDisclose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupAliasResolverDisclose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupAliasResolverDisclose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupAliasResolverDisclose.Merge(m, src)
}
func (m *MultiMemberGroupAliasResolverDisclose) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupAliasResolverDisclose) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupAliasResolverDisclose.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupAliasResolverDisclose proto.InternalMessageInfo

type MultiMemberGroupAliasResolverDisclose_Request struct {
	// group_pk is the identifier of the group
	GroupPK              []byte   `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupAliasResolverDisclose_Request) Reset() {
	*m = MultiMemberGroupAliasResolverDisclose_Request{}
}
func (m *MultiMemberGroupAliasResolverDisclose_Request) String() string {
	return proto.CompactTextString(m)
}
func (*MultiMemberGroupAliasResolverDisclose_Request) ProtoMessage() {}
func (*MultiMemberGroupAliasResolverDisclose_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{44, 0}
}
func (m *MultiMemberGroupAliasResolverDisclose_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupAliasResolverDisclose_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupAliasResolverDisclose_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupAliasResolverDisclose_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupAliasResolverDisclose_Request.Merge(m, src)
}
func (m *MultiMemberGroupAliasResolverDisclose_Request) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupAliasResolverDisclose_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupAliasResolverDisclose_Request.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupAliasResolverDisclose_Request proto.InternalMessageInfo

func (m *MultiMemberGroupAliasResolverDisclose_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

type MultiMemberGroupAliasResolverDisclose_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupAliasResolverDisclose_Reply) Reset() {
	*m = MultiMemberGroupAliasResolverDisclose_Reply{}
}
func (m *MultiMemberGroupAliasResolverDisclose_Reply) String() string {
	return proto.CompactTextString(m)
}
func (*MultiMemberGroupAliasResolverDisclose_Reply) ProtoMessage() {}
func (*MultiMemberGroupAliasResolverDisclose_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{44, 1}
}
func (m *MultiMemberGroupAliasResolverDisclose_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupAliasResolverDisclose_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupAliasResolverDisclose_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupAliasResolverDisclose_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupAliasResolverDisclose_Reply.Merge(m, src)
}
func (m *MultiMemberGroupAliasResolverDisclose_Reply) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupAliasResolverDisclose_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupAliasResolverDisclose_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupAliasResolverDisclose_Reply proto.InternalMessageInfo

type MultiMemberGroupAdminRoleGrant struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupAdminRoleGrant) Reset()         { *m = MultiMemberGroupAdminRoleGrant{} }
func (m *MultiMemberGroupAdminRoleGrant) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupAdminRoleGrant) ProtoMessage()    {}
func (*MultiMemberGroupAdminRoleGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{45}
}
func (m *MultiMemberGroupAdminRoleGrant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupAdminRoleGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupAdminRoleGrant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupAdminRoleGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupAdminRoleGrant.Merge(m, src)
}
func (m *MultiMemberGroupAdminRoleGrant) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupAdminRoleGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupAdminRoleGrant.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupAdminRoleGrant proto.InternalMessageInfo

type MultiMemberGroupAdminRoleGrant_Request struct {
	// group_pk is the identifier of the group
	GroupPK []byte `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	// member_pk is the identifier of the member which will be granted the admin role
	MemberPK             []byte   `protobuf:"bytes,2,opt,name=member_pk,json=memberPk,proto3" json:"member_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupAdminRoleGrant_Request) Reset() {
	*m = MultiMemberGroupAdminRoleGrant_Request{}
}
func (m *MultiMemberGroupAdminRoleGrant_Request) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupAdminRoleGrant_Request) ProtoMessage()    {}
func (*MultiMemberGroupAdminRoleGrant_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{45, 0}
}
func (m *MultiMemberGroupAdminRoleGrant_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupAdminRoleGrant_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupAdminRoleGrant_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupAdminRoleGrant_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupAdminRoleGrant_Request.Merge(m, src)
}
func (m *MultiMemberGroupAdminRoleGrant_Request) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupAdminRoleGrant_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupAdminRoleGrant_Request.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupAdminRoleGrant_Request proto.InternalMessageInfo

func (m *MultiMemberGroupAdminRoleGrant_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *MultiMemberGroupAdminRoleGrant_Request) GetMemberPK() []byte {
	if m != nil {
		return m.MemberPK
	}
	return nil
}

type MultiMemberGroupAdminRoleGrant_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupAdminRoleGrant_Reply) Reset()         { *m = MultiMemberGroupAdminRoleGrant_Reply{} }
func (m *MultiMemberGroupAdminRoleGrant_Reply) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupAdminRoleGrant_Reply) ProtoMessage()    {}
func (*MultiMemberGroupAdminRoleGrant_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{45, 1}
}
func (m *MultiMemberGroupAdminRoleGrant_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupAdminRoleGrant_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupAdminRoleGrant_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupAdminRoleGrant_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupAdminRoleGrant_Reply.Merge(m, src)
}
func (m *MultiMemberGroupAdminRoleGrant_Reply) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupAdminRoleGrant_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupAdminRoleGrant_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupAdminRoleGrant_Reply proto.InternalMessageInfo

type MultiMemberGroupInvitationCreate struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupInvitationCreate) Reset()         { *m = MultiMemberGroupInvitationCreate{} }
func (m *MultiMemberGroupInvitationCreate) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupInvitationCreate) ProtoMessage()    {}
func (*MultiMemberGroupInvitationCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{46}
}
func (m *MultiMemberGroupInvitationCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupInvitationCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupInvitationCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupInvitationCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupInvitationCreate.Merge(m, src)
}
func (m *MultiMemberGroupInvitationCreate) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupInvitationCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupInvitationCreate.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupInvitationCreate proto.InternalMessageInfo

type MultiMemberGroupInvitationCreate_Request struct {
	// group_pk is the identifier of the group
	GroupPK              []byte   `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupInvitationCreate_Request) Reset() {
	*m = MultiMemberGroupInvitationCreate_Request{}
}
func (m *MultiMemberGroupInvitationCreate_Request) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupInvitationCreate_Request) ProtoMessage()    {}
func (*MultiMemberGroupInvitationCreate_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{46, 0}
}
func (m *MultiMemberGroupInvitationCreate_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupInvitationCreate_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupInvitationCreate_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupInvitationCreate_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupInvitationCreate_Request.Merge(m, src)
}
func (m *MultiMemberGroupInvitationCreate_Request) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupInvitationCreate_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupInvitationCreate_Request.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupInvitationCreate_Request proto.InternalMessageInfo

func (m *MultiMemberGroupInvitationCreate_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

type MultiMemberGroupInvitationCreate_Reply struct {
	// group is the invitation to the group
	Group                *Group   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiMemberGroupInvitationCreate_Reply) Reset() {
	*m = MultiMemberGroupInvitationCreate_Reply{}
}
func (m *MultiMemberGroupInvitationCreate_Reply) String() string { return proto.CompactTextString(m) }
func (*MultiMemberGroupInvitationCreate_Reply) ProtoMessage()    {}
func (*MultiMemberGroupInvitationCreate_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{46, 1}
}
func (m *MultiMemberGroupInvitationCreate_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMemberGroupInvitationCreate_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMemberGroupInvitationCreate_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiMemberGroupInvitationCreate_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMemberGroupInvitationCreate_Reply.Merge(m, src)
}
func (m *MultiMemberGroupInvitationCreate_Reply) XXX_Size() int {
	return m.Size()
}
func (m *MultiMemberGroupInvitationCreate_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMemberGroupInvitationCreate_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMemberGroupInvitationCreate_Reply proto.InternalMessageInfo

func (m *MultiMemberGroupInvitationCreate_Reply) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type AppMetadataSend struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppMetadataSend) Reset()         { *m = AppMetadataSend{} }
func (m *AppMetadataSend) String() string { return proto.CompactTextString(m) }
func (*AppMetadataSend) ProtoMessage()    {}
func (*AppMetadataSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{47}
}
func (m *AppMetadataSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMetadataSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMetadataSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMetadataSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMetadataSend.Merge(m, src)
}
func (m *AppMetadataSend) XXX_Size() int {
	return m.Size()
}
func (m *AppMetadataSend) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMetadataSend.DiscardUnknown(m)
}

var xxx_messageInfo_AppMetadataSend proto.InternalMessageInfo

type AppMetadataSend_Request struct {
	// group_pk is the identifier of the group
	GroupPK []byte `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	// payload is the payload to send
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppMetadataSend_Request) Reset()         { *m = AppMetadataSend_Request{} }
func (m *AppMetadataSend_Request) String() string { return proto.CompactTextString(m) }
func (*AppMetadataSend_Request) ProtoMessage()    {}
func (*AppMetadataSend_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{47, 0}
}
func (m *AppMetadataSend_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMetadataSend_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMetadataSend_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMetadataSend_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMetadataSend_Request.Merge(m, src)
}
func (m *AppMetadataSend_Request) XXX_Size() int {
	return m.Size()
}
func (m *AppMetadataSend_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMetadataSend_Request.DiscardUnknown(m)
}

var xxx_messageInfo_AppMetadataSend_Request proto.InternalMessageInfo

func (m *AppMetadataSend_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *AppMetadataSend_Request) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type AppMetadataSend_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppMetadataSend_Reply) Reset()         { *m = AppMetadataSend_Reply{} }
func (m *AppMetadataSend_Reply) String() string { return proto.CompactTextString(m) }
func (*AppMetadataSend_Reply) ProtoMessage()    {}
func (*AppMetadataSend_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{47, 1}
}
func (m *AppMetadataSend_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMetadataSend_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMetadataSend_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMetadataSend_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMetadataSend_Reply.Merge(m, src)
}
func (m *AppMetadataSend_Reply) XXX_Size() int {
	return m.Size()
}
func (m *AppMetadataSend_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMetadataSend_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_AppMetadataSend_Reply proto.InternalMessageInfo

type AppMessageSend struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppMessageSend) Reset()         { *m = AppMessageSend{} }
func (m *AppMessageSend) String() string { return proto.CompactTextString(m) }
func (*AppMessageSend) ProtoMessage()    {}
func (*AppMessageSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{48}
}
func (m *AppMessageSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessageSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessageSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessageSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessageSend.Merge(m, src)
}
func (m *AppMessageSend) XXX_Size() int {
	return m.Size()
}
func (m *AppMessageSend) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessageSend.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessageSend proto.InternalMessageInfo

type AppMessageSend_Request struct {
	// group_pk is the identifier of the group
	GroupPK []byte `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	// payload is the payload to send
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppMessageSend_Request) Reset()         { *m = AppMessageSend_Request{} }
func (m *AppMessageSend_Request) String() string { return proto.CompactTextString(m) }
func (*AppMessageSend_Request) ProtoMessage()    {}
func (*AppMessageSend_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{48, 0}
}
func (m *AppMessageSend_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessageSend_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessageSend_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessageSend_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessageSend_Request.Merge(m, src)
}
func (m *AppMessageSend_Request) XXX_Size() int {
	return m.Size()
}
func (m *AppMessageSend_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessageSend_Request.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessageSend_Request proto.InternalMessageInfo

func (m *AppMessageSend_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *AppMessageSend_Request) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type AppMessageSend_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppMessageSend_Reply) Reset()         { *m = AppMessageSend_Reply{} }
func (m *AppMessageSend_Reply) String() string { return proto.CompactTextString(m) }
func (*AppMessageSend_Reply) ProtoMessage()    {}
func (*AppMessageSend_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{48, 1}
}
func (m *AppMessageSend_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessageSend_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessageSend_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessageSend_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessageSend_Reply.Merge(m, src)
}
func (m *AppMessageSend_Reply) XXX_Size() int {
	return m.Size()
}
func (m *AppMessageSend_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessageSend_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessageSend_Reply proto.InternalMessageInfo

type GroupMetadataEvent struct {
	// event_context contains context information about the event
	EventContext *EventContext `protobuf:"bytes,1,opt,name=event_context,json=eventContext,proto3" json:"event_context,omitempty"`
	// metadata contains the newly available metadata
	Metadata *GroupMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// event_clear clear bytes for the event
	Event                []byte   `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMetadataEvent) Reset()         { *m = GroupMetadataEvent{} }
func (m *GroupMetadataEvent) String() string { return proto.CompactTextString(m) }
func (*GroupMetadataEvent) ProtoMessage()    {}
func (*GroupMetadataEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{49}
}
func (m *GroupMetadataEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMetadataEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMetadataEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMetadataEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMetadataEvent.Merge(m, src)
}
func (m *GroupMetadataEvent) XXX_Size() int {
	return m.Size()
}
func (m *GroupMetadataEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMetadataEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMetadataEvent proto.InternalMessageInfo

func (m *GroupMetadataEvent) GetEventContext() *EventContext {
	if m != nil {
		return m.EventContext
	}
	return nil
}

func (m *GroupMetadataEvent) GetMetadata() *GroupMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GroupMetadataEvent) GetEvent() []byte {
	if m != nil {
		return m.Event
	}
	return nil
}

type GroupMessageEvent struct {
	// event_context contains context information about the event
	EventContext *EventContext `protobuf:"bytes,1,opt,name=event_context,json=eventContext,proto3" json:"event_context,omitempty"`
	// headers contains headers of the secure message
	Headers *MessageHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	// message contains the secure message payload
	Message              []byte   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMessageEvent) Reset()         { *m = GroupMessageEvent{} }
func (m *GroupMessageEvent) String() string { return proto.CompactTextString(m) }
func (*GroupMessageEvent) ProtoMessage()    {}
func (*GroupMessageEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{50}
}
func (m *GroupMessageEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMessageEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMessageEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMessageEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMessageEvent.Merge(m, src)
}
func (m *GroupMessageEvent) XXX_Size() int {
	return m.Size()
}
func (m *GroupMessageEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMessageEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMessageEvent proto.InternalMessageInfo

func (m *GroupMessageEvent) GetEventContext() *EventContext {
	if m != nil {
		return m.EventContext
	}
	return nil
}

func (m *GroupMessageEvent) GetHeaders() *MessageHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GroupMessageEvent) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type GroupMetadataSubscribe struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMetadataSubscribe) Reset()         { *m = GroupMetadataSubscribe{} }
func (m *GroupMetadataSubscribe) String() string { return proto.CompactTextString(m) }
func (*GroupMetadataSubscribe) ProtoMessage()    {}
func (*GroupMetadataSubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{51}
}
func (m *GroupMetadataSubscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMetadataSubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMetadataSubscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMetadataSubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMetadataSubscribe.Merge(m, src)
}
func (m *GroupMetadataSubscribe) XXX_Size() int {
	return m.Size()
}
func (m *GroupMetadataSubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMetadataSubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMetadataSubscribe proto.InternalMessageInfo

type GroupMetadataSubscribe_Request struct {
	// group_pk is the identifier of the group
	GroupPK []byte `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	// since is the lower ID bound used to filter events
	Since []byte `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
	// until is the upper ID bound used to filter events
	Until []byte `protobuf:"bytes,3,opt,name=until,proto3" json:"until,omitempty"`
	// go_backwards indicates whether the events should be returned in reverse order
	GoBackwards          bool     `protobuf:"varint,4,opt,name=go_backwards,json=goBackwards,proto3" json:"go_backwards,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMetadataSubscribe_Request) Reset()         { *m = GroupMetadataSubscribe_Request{} }
func (m *GroupMetadataSubscribe_Request) String() string { return proto.CompactTextString(m) }
func (*GroupMetadataSubscribe_Request) ProtoMessage()    {}
func (*GroupMetadataSubscribe_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{51, 0}
}
func (m *GroupMetadataSubscribe_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMetadataSubscribe_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMetadataSubscribe_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMetadataSubscribe_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMetadataSubscribe_Request.Merge(m, src)
}
func (m *GroupMetadataSubscribe_Request) XXX_Size() int {
	return m.Size()
}
func (m *GroupMetadataSubscribe_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMetadataSubscribe_Request.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMetadataSubscribe_Request proto.InternalMessageInfo

func (m *GroupMetadataSubscribe_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *GroupMetadataSubscribe_Request) GetSince() []byte {
	if m != nil {
		return m.Since
	}
	return nil
}

func (m *GroupMetadataSubscribe_Request) GetUntil() []byte {
	if m != nil {
		return m.Until
	}
	return nil
}

func (m *GroupMetadataSubscribe_Request) GetGoBackwards() bool {
	if m != nil {
		return m.GoBackwards
	}
	return false
}

type GroupMetadataList struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMetadataList) Reset()         { *m = GroupMetadataList{} }
func (m *GroupMetadataList) String() string { return proto.CompactTextString(m) }
func (*GroupMetadataList) ProtoMessage()    {}
func (*GroupMetadataList) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{52}
}
func (m *GroupMetadataList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMetadataList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMetadataList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMetadataList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMetadataList.Merge(m, src)
}
func (m *GroupMetadataList) XXX_Size() int {
	return m.Size()
}
func (m *GroupMetadataList) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMetadataList.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMetadataList proto.InternalMessageInfo

type GroupMetadataList_Request struct {
	// group_pk is the identifier of the group
	GroupPK              []byte   `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMetadataList_Request) Reset()         { *m = GroupMetadataList_Request{} }
func (m *GroupMetadataList_Request) String() string { return proto.CompactTextString(m) }
func (*GroupMetadataList_Request) ProtoMessage()    {}
func (*GroupMetadataList_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{52, 0}
}
func (m *GroupMetadataList_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMetadataList_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMetadataList_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMetadataList_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMetadataList_Request.Merge(m, src)
}
func (m *GroupMetadataList_Request) XXX_Size() int {
	return m.Size()
}
func (m *GroupMetadataList_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMetadataList_Request.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMetadataList_Request proto.InternalMessageInfo

func (m *GroupMetadataList_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

type GroupMessageSubscribe struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMessageSubscribe) Reset()         { *m = GroupMessageSubscribe{} }
func (m *GroupMessageSubscribe) String() string { return proto.CompactTextString(m) }
func (*GroupMessageSubscribe) ProtoMessage()    {}
func (*GroupMessageSubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{53}
}
func (m *GroupMessageSubscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMessageSubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMessageSubscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMessageSubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMessageSubscribe.Merge(m, src)
}
func (m *GroupMessageSubscribe) XXX_Size() int {
	return m.Size()
}
func (m *GroupMessageSubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMessageSubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMessageSubscribe proto.InternalMessageInfo

type GroupMessageSubscribe_Request struct {
	// group_pk is the identifier of the group
	GroupPK []byte `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	// since is the lower ID bound used to filter events
	Since []byte `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
	// until is the upper ID bound used to filter events
	Until []byte `protobuf:"bytes,3,opt,name=until,proto3" json:"until,omitempty"`
	// go_backwards indicates whether the events should be returned in reverse order
	GoBackwards          bool     `protobuf:"varint,4,opt,name=go_backwards,json=goBackwards,proto3" json:"go_backwards,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMessageSubscribe_Request) Reset()         { *m = GroupMessageSubscribe_Request{} }
func (m *GroupMessageSubscribe_Request) String() string { return proto.CompactTextString(m) }
func (*GroupMessageSubscribe_Request) ProtoMessage()    {}
func (*GroupMessageSubscribe_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{53, 0}
}
func (m *GroupMessageSubscribe_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMessageSubscribe_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMessageSubscribe_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMessageSubscribe_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMessageSubscribe_Request.Merge(m, src)
}
func (m *GroupMessageSubscribe_Request) XXX_Size() int {
	return m.Size()
}
func (m *GroupMessageSubscribe_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMessageSubscribe_Request.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMessageSubscribe_Request proto.InternalMessageInfo

func (m *GroupMessageSubscribe_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *GroupMessageSubscribe_Request) GetSince() []byte {
	if m != nil {
		return m.Since
	}
	return nil
}

func (m *GroupMessageSubscribe_Request) GetUntil() []byte {
	if m != nil {
		return m.Until
	}
	return nil
}

func (m *GroupMessageSubscribe_Request) GetGoBackwards() bool {
	if m != nil {
		return m.GoBackwards
	}
	return false
}

type GroupMessageList struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMessageList) Reset()         { *m = GroupMessageList{} }
func (m *GroupMessageList) String() string { return proto.CompactTextString(m) }
func (*GroupMessageList) ProtoMessage()    {}
func (*GroupMessageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{54}
}
func (m *GroupMessageList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMessageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMessageList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMessageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMessageList.Merge(m, src)
}
func (m *GroupMessageList) XXX_Size() int {
	return m.Size()
}
func (m *GroupMessageList) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMessageList.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMessageList proto.InternalMessageInfo

type GroupMessageList_Request struct {
	// group_pk is the identifier of the group
	GroupPK              []byte   `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMessageList_Request) Reset()         { *m = GroupMessageList_Request{} }
func (m *GroupMessageList_Request) String() string { return proto.CompactTextString(m) }
func (*GroupMessageList_Request) ProtoMessage()    {}
func (*GroupMessageList_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{54, 0}
}
func (m *GroupMessageList_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMessageList_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMessageList_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMessageList_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMessageList_Request.Merge(m, src)
}
func (m *GroupMessageList_Request) XXX_Size() int {
	return m.Size()
}
func (m *GroupMessageList_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMessageList_Request.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMessageList_Request proto.InternalMessageInfo

func (m *GroupMessageList_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

type GroupInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupInfo) Reset()         { *m = GroupInfo{} }
func (m *GroupInfo) String() string { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()    {}
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{55}
}
func (m *GroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo.Merge(m, src)
}
func (m *GroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo proto.InternalMessageInfo

type GroupInfo_Request struct {
	// group_pk is the identifier of the group
	GroupPK []byte `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	// contact_pk is the identifier of the contact
	ContactPK            []byte   `protobuf:"bytes,2,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupInfo_Request) Reset()         { *m = GroupInfo_Request{} }
func (m *GroupInfo_Request) String() string { return proto.CompactTextString(m) }
func (*GroupInfo_Request) ProtoMessage()    {}
func (*GroupInfo_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{55, 0}
}
func (m *GroupInfo_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfo_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfo_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo_Request.Merge(m, src)
}
func (m *GroupInfo_Request) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfo_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo_Request proto.InternalMessageInfo

func (m *GroupInfo_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *GroupInfo_Request) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

type GroupInfo_Reply struct {
	// group is the group invitation, containing the group pk and its type
	Group *Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// member_pk is the identifier of the current member in the group
	MemberPK []byte `protobuf:"bytes,2,opt,name=member_pk,json=memberPk,proto3" json:"member_pk,omitempty"`
	// member_pk is the identifier of the current device in the group
	DevicePK             []byte   `protobuf:"bytes,3,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupInfo_Reply) Reset()         { *m = GroupInfo_Reply{} }
func (m *GroupInfo_Reply) String() string { return proto.CompactTextString(m) }
func (*GroupInfo_Reply) ProtoMessage()    {}
func (*GroupInfo_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{55, 1}
}
func (m *GroupInfo_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfo_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfo_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfo_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo_Reply.Merge(m, src)
}
func (m *GroupInfo_Reply) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfo_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo_Reply proto.InternalMessageInfo

func (m *GroupInfo_Reply) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GroupInfo_Reply) GetMemberPK() []byte {
	if m != nil {
		return m.MemberPK
	}
	return nil
}

func (m *GroupInfo_Reply) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

type ActivateGroup struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivateGroup) Reset()         { *m = ActivateGroup{} }
func (m *ActivateGroup) String() string { return proto.CompactTextString(m) }
func (*ActivateGroup) ProtoMessage()    {}
func (*ActivateGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{56}
}
func (m *ActivateGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivateGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivateGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivateGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivateGroup.Merge(m, src)
}
func (m *ActivateGroup) XXX_Size() int {
	return m.Size()
}
func (m *ActivateGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivateGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ActivateGroup proto.InternalMessageInfo

type ActivateGroup_Request struct {
	// group_pk is the identifier of the group
	GroupPK              []byte   `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivateGroup_Request) Reset()         { *m = ActivateGroup_Request{} }
func (m *ActivateGroup_Request) String() string { return proto.CompactTextString(m) }
func (*ActivateGroup_Request) ProtoMessage()    {}
func (*ActivateGroup_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{56, 0}
}
func (m *ActivateGroup_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivateGroup_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivateGroup_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivateGroup_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivateGroup_Request.Merge(m, src)
}
func (m *ActivateGroup_Request) XXX_Size() int {
	return m.Size()
}
func (m *ActivateGroup_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivateGroup_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ActivateGroup_Request proto.InternalMessageInfo

func (m *ActivateGroup_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

type ActivateGroup_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivateGroup_Reply) Reset()         { *m = ActivateGroup_Reply{} }
func (m *ActivateGroup_Reply) String() string { return proto.CompactTextString(m) }
func (*ActivateGroup_Reply) ProtoMessage()    {}
func (*ActivateGroup_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{56, 1}
}
func (m *ActivateGroup_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivateGroup_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivateGroup_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivateGroup_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivateGroup_Reply.Merge(m, src)
}
func (m *ActivateGroup_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ActivateGroup_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivateGroup_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ActivateGroup_Reply proto.InternalMessageInfo

type DeactivateGroup struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeactivateGroup) Reset()         { *m = DeactivateGroup{} }
func (m *DeactivateGroup) String() string { return proto.CompactTextString(m) }
func (*DeactivateGroup) ProtoMessage()    {}
func (*DeactivateGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{57}
}
func (m *DeactivateGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeactivateGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeactivateGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeactivateGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeactivateGroup.Merge(m, src)
}
func (m *DeactivateGroup) XXX_Size() int {
	return m.Size()
}
func (m *DeactivateGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_DeactivateGroup.DiscardUnknown(m)
}

var xxx_messageInfo_DeactivateGroup proto.InternalMessageInfo

type DeactivateGroup_Request struct {
	// group_pk is the identifier of the group
	GroupPK              []byte   `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeactivateGroup_Request) Reset()         { *m = DeactivateGroup_Request{} }
func (m *DeactivateGroup_Request) String() string { return proto.CompactTextString(m) }
func (*DeactivateGroup_Request) ProtoMessage()    {}
func (*DeactivateGroup_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{57, 0}
}
func (m *DeactivateGroup_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeactivateGroup_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeactivateGroup_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeactivateGroup_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeactivateGroup_Request.Merge(m, src)
}
func (m *DeactivateGroup_Request) XXX_Size() int {
	return m.Size()
}
func (m *DeactivateGroup_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DeactivateGroup_Request.DiscardUnknown(m)
}

var xxx_messageInfo_DeactivateGroup_Request proto.InternalMessageInfo

func (m *DeactivateGroup_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

type DeactivateGroup_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeactivateGroup_Reply) Reset()         { *m = DeactivateGroup_Reply{} }
func (m *DeactivateGroup_Reply) String() string { return proto.CompactTextString(m) }
func (*DeactivateGroup_Reply) ProtoMessage()    {}
func (*DeactivateGroup_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{57, 1}
}
func (m *DeactivateGroup_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeactivateGroup_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeactivateGroup_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeactivateGroup_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeactivateGroup_Reply.Merge(m, src)
}
func (m *DeactivateGroup_Reply) XXX_Size() int {
	return m.Size()
}
func (m *DeactivateGroup_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeactivateGroup_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_DeactivateGroup_Reply proto.InternalMessageInfo

type DebugListGroups struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugListGroups) Reset()         { *m = DebugListGroups{} }
func (m *DebugListGroups) String() string { return proto.CompactTextString(m) }
func (*DebugListGroups) ProtoMessage()    {}
func (*DebugListGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{58}
}
func (m *DebugListGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugListGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugListGroups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugListGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugListGroups.Merge(m, src)
}
func (m *DebugListGroups) XXX_Size() int {
	return m.Size()
}
func (m *DebugListGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugListGroups.DiscardUnknown(m)
}

var xxx_messageInfo_DebugListGroups proto.InternalMessageInfo

type DebugListGroups_Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugListGroups_Request) Reset()         { *m = DebugListGroups_Request{} }
func (m *DebugListGroups_Request) String() string { return proto.CompactTextString(m) }
func (*DebugListGroups_Request) ProtoMessage()    {}
func (*DebugListGroups_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{58, 0}
}
func (m *DebugListGroups_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugListGroups_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugListGroups_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugListGroups_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugListGroups_Request.Merge(m, src)
}
func (m *DebugListGroups_Request) XXX_Size() int {
	return m.Size()
}
func (m *DebugListGroups_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugListGroups_Request.DiscardUnknown(m)
}

var xxx_messageInfo_DebugListGroups_Request proto.InternalMessageInfo

type DebugListGroups_Reply struct {
	// group_pk is the public key of the group
	GroupPK []byte `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	// group_type is the type of the group
	GroupType GroupType `protobuf:"varint,2,opt,name=group_type,json=groupType,proto3,enum=berty.types.GroupType" json:"group_type,omitempty"`
	// contact_pk is the contact public key if appropriate
	ContactPK            []byte   `protobuf:"bytes,3,opt,name=contact_pk,json=contactPk,proto3" json:"contact_pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugListGroups_Reply) Reset()         { *m = DebugListGroups_Reply{} }
func (m *DebugListGroups_Reply) String() string { return proto.CompactTextString(m) }
func (*DebugListGroups_Reply) ProtoMessage()    {}
func (*DebugListGroups_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{58, 1}
}
func (m *DebugListGroups_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugListGroups_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugListGroups_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugListGroups_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugListGroups_Reply.Merge(m, src)
}
func (m *DebugListGroups_Reply) XXX_Size() int {
	return m.Size()
}
func (m *DebugListGroups_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugListGroups_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_DebugListGroups_Reply proto.InternalMessageInfo

func (m *DebugListGroups_Reply) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *DebugListGroups_Reply) GetGroupType() GroupType {
	if m != nil {
		return m.GroupType
	}
	return GroupTypeUndefined
}

func (m *DebugListGroups_Reply) GetContactPK() []byte {
	if m != nil {
		return m.ContactPK
	}
	return nil
}

type DebugInspectGroupStore struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugInspectGroupStore) Reset()         { *m = DebugInspectGroupStore{} }
func (m *DebugInspectGroupStore) String() string { return proto.CompactTextString(m) }
func (*DebugInspectGroupStore) ProtoMessage()    {}
func (*DebugInspectGroupStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{59}
}
func (m *DebugInspectGroupStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugInspectGroupStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugInspectGroupStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugInspectGroupStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugInspectGroupStore.Merge(m, src)
}
func (m *DebugInspectGroupStore) XXX_Size() int {
	return m.Size()
}
func (m *DebugInspectGroupStore) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugInspectGroupStore.DiscardUnknown(m)
}

var xxx_messageInfo_DebugInspectGroupStore proto.InternalMessageInfo

type DebugInspectGroupStore_Request struct {
	// group_pk is the identifier of the group
	GroupPK []byte `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	// log_type is the log to inspect
	LogType              DebugInspectGroupLogType `protobuf:"varint,2,opt,name=log_type,json=logType,proto3,enum=berty.types.DebugInspectGroupLogType" json:"log_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DebugInspectGroupStore_Request) Reset()         { *m = DebugInspectGroupStore_Request{} }
func (m *DebugInspectGroupStore_Request) String() string { return proto.CompactTextString(m) }
func (*DebugInspectGroupStore_Request) ProtoMessage()    {}
func (*DebugInspectGroupStore_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{59, 0}
}
func (m *DebugInspectGroupStore_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugInspectGroupStore_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugInspectGroupStore_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugInspectGroupStore_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugInspectGroupStore_Request.Merge(m, src)
}
func (m *DebugInspectGroupStore_Request) XXX_Size() int {
	return m.Size()
}
func (m *DebugInspectGroupStore_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugInspectGroupStore_Request.DiscardUnknown(m)
}

var xxx_messageInfo_DebugInspectGroupStore_Request proto.InternalMessageInfo

func (m *DebugInspectGroupStore_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *DebugInspectGroupStore_Request) GetLogType() DebugInspectGroupLogType {
	if m != nil {
		return m.LogType
	}
	return DebugInspectGroupLogTypeUndefined
}

type DebugInspectGroupStore_Reply struct {
	// cid is the CID of the IPFS log entry
	CID []byte `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// parent_cids is the list of the parent entries
	ParentCIDs [][]byte `protobuf:"bytes,2,rep,name=parent_cids,json=parentCids,proto3" json:"parent_cids,omitempty"`
	// event_type metadata event type if subscribed to metadata events
	MetadataEventType EventType `protobuf:"varint,3,opt,name=metadata_event_type,json=metadataEventType,proto3,enum=berty.types.EventType" json:"metadata_event_type,omitempty"`
	// device_pk is the public key of the device signing the entry
	DevicePK []byte `protobuf:"bytes,4,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// payload is the un encrypted entry payload if available
	Payload              []byte   `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugInspectGroupStore_Reply) Reset()         { *m = DebugInspectGroupStore_Reply{} }
func (m *DebugInspectGroupStore_Reply) String() string { return proto.CompactTextString(m) }
func (*DebugInspectGroupStore_Reply) ProtoMessage()    {}
func (*DebugInspectGroupStore_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{59, 1}
}
func (m *DebugInspectGroupStore_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugInspectGroupStore_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugInspectGroupStore_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugInspectGroupStore_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugInspectGroupStore_Reply.Merge(m, src)
}
func (m *DebugInspectGroupStore_Reply) XXX_Size() int {
	return m.Size()
}
func (m *DebugInspectGroupStore_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugInspectGroupStore_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_DebugInspectGroupStore_Reply proto.InternalMessageInfo

func (m *DebugInspectGroupStore_Reply) GetCID() []byte {
	if m != nil {
		return m.CID
	}
	return nil
}

func (m *DebugInspectGroupStore_Reply) GetParentCIDs() [][]byte {
	if m != nil {
		return m.ParentCIDs
	}
	return nil
}

func (m *DebugInspectGroupStore_Reply) GetMetadataEventType() EventType {
	if m != nil {
		return m.MetadataEventType
	}
	return EventTypeUndefined
}

func (m *DebugInspectGroupStore_Reply) GetDevicePK() []byte {
	if m != nil {
		return m.DevicePK
	}
	return nil
}

func (m *DebugInspectGroupStore_Reply) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ShareableContact struct {
	// pk is the account to send a contact request to
	PK []byte `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"`
	// public_rendezvous_seed is the rendezvous seed used by the account to send a contact request to
	PublicRendezvousSeed []byte `protobuf:"bytes,2,opt,name=public_rendezvous_seed,json=publicRendezvousSeed,proto3" json:"public_rendezvous_seed,omitempty"`
	// metadata is the metadata specific to the app to identify the contact for the request
	Metadata             []byte   `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareableContact) Reset()         { *m = ShareableContact{} }
func (m *ShareableContact) String() string { return proto.CompactTextString(m) }
func (*ShareableContact) ProtoMessage()    {}
func (*ShareableContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_66af3dd56d99377e, []int{60}
}
func (m *ShareableContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareableContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareableContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareableContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareableContact.Merge(m, src)
}
func (m *ShareableContact) XXX_Size() int {
	return m.Size()
}
func (m *ShareableContact) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareableContact.DiscardUnknown(m)
}

var xxx_messageInfo_ShareableContact proto.InternalMessageInfo

func (m *ShareableContact) GetPK() []byte {
	if m != nil {
		return m.PK
	}
	return nil
}

func (m *ShareableContact) GetPublicRendezvousSeed() []byte {
	if m != nil {
		return m.PublicRendezvousSeed
	}
	return nil
}

func (m *ShareableContact) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterEnum("berty.types.GroupType", GroupType_name, GroupType_value)
	proto.RegisterEnum("berty.types.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("berty.types.DebugInspectGroupLogType", DebugInspectGroupLogType_name, DebugInspectGroupLogType_value)
	proto.RegisterEnum("berty.types.ContactState", ContactState_name, ContactState_value)
	proto.RegisterEnum("berty.types.InstanceGetConfiguration_SettingState", InstanceGetConfiguration_SettingState_name, InstanceGetConfiguration_SettingState_value)
	proto.RegisterType((*Account)(nil), "berty.types.Account")
	proto.RegisterType((*Group)(nil), "berty.types.Group")
	proto.RegisterType((*GroupMetadata)(nil), "berty.types.GroupMetadata")
	proto.RegisterType((*GroupEnvelope)(nil), "berty.types.GroupEnvelope")
	proto.RegisterType((*MessageHeaders)(nil), "berty.types.MessageHeaders")
	proto.RegisterMapType((map[string]string)(nil), "berty.types.MessageHeaders.MetadataEntry")
	proto.RegisterType((*MessageEnvelope)(nil), "berty.types.MessageEnvelope")
	proto.RegisterType((*EventContext)(nil), "berty.types.EventContext")
	proto.RegisterType((*AppMetadata)(nil), "berty.types.AppMetadata")
	proto.RegisterType((*ContactAddAliasKey)(nil), "berty.types.ContactAddAliasKey")
	proto.RegisterType((*GroupAddMemberDevice)(nil), "berty.types.GroupAddMemberDevice")
	proto.RegisterType((*DeviceSecret)(nil), "berty.types.DeviceSecret")
	proto.RegisterType((*GroupAddDeviceSecret)(nil), "berty.types.GroupAddDeviceSecret")
	proto.RegisterType((*MultiMemberGroupAddAliasResolver)(nil), "berty.types.MultiMemberGroupAddAliasResolver")
	proto.RegisterType((*MultiMemberGrantAdminRole)(nil), "berty.types.MultiMemberGrantAdminRole")
	proto.RegisterType((*MultiMemberInitialMember)(nil), "berty.types.MultiMemberInitialMember")
	proto.RegisterType((*GroupAddAdditionalRendezvousSeed)(nil), "berty.types.GroupAddAdditionalRendezvousSeed")
	proto.RegisterType((*GroupRemoveAdditionalRendezvousSeed)(nil), "berty.types.GroupRemoveAdditionalRendezvousSeed")
	proto.RegisterType((*AccountGroupJoined)(nil), "berty.types.AccountGroupJoined")
	proto.RegisterType((*AccountGroupLeft)(nil), "berty.types.AccountGroupLeft")
	proto.RegisterType((*AccountContactRequestDisabled)(nil), "berty.types.AccountContactRequestDisabled")
	proto.RegisterType((*AccountContactRequestEnabled)(nil), "berty.types.AccountContactRequestEnabled")
	proto.RegisterType((*AccountContactRequestReferenceReset)(nil), "berty.types.AccountContactRequestReferenceReset")
	proto.RegisterType((*AccountContactRequestEnqueued)(nil), "berty.types.AccountContactRequestEnqueued")
	proto.RegisterType((*AccountContactRequestSent)(nil), "berty.types.AccountContactRequestSent")
	proto.RegisterType((*AccountContactRequestReceived)(nil), "berty.types.AccountContactRequestReceived")
	proto.RegisterType((*AccountContactRequestDiscarded)(nil), "berty.types.AccountContactRequestDiscarded")
	proto.RegisterType((*AccountContactRequestAccepted)(nil), "berty.types.AccountContactRequestAccepted")
	proto.RegisterType((*AccountContactBlocked)(nil), "berty.types.AccountContactBlocked")
	proto.RegisterType((*AccountContactUnblocked)(nil), "berty.types.AccountContactUnblocked")
	proto.RegisterType((*InstanceExportData)(nil), "berty.types.InstanceExportData")
	proto.RegisterType((*InstanceExportData_Request)(nil), "berty.types.InstanceExportData.Request")
	proto.RegisterType((*InstanceExportData_Reply)(nil), "berty.types.InstanceExportData.Reply")
	proto.RegisterType((*InstanceGetConfiguration)(nil), "berty.types.InstanceGetConfiguration")
	proto.RegisterType((*InstanceGetConfiguration_Request)(nil), "berty.types.InstanceGetConfiguration.Request")
	proto.RegisterType((*InstanceGetConfiguration_Reply)(nil), "berty.types.InstanceGetConfiguration.Reply")
	proto.RegisterType((*ContactRequestReference)(nil), "berty.types.ContactRequestReference")
	proto.RegisterType((*ContactRequestReference_Request)(nil), "berty.types.ContactRequestReference.Request")
	proto.RegisterType((*ContactRequestReference_Reply)(nil), "berty.types.ContactRequestReference.Reply")
	proto.RegisterType((*ContactRequestDisable)(nil), "berty.types.ContactRequestDisable")
	proto.RegisterType((*ContactRequestDisable_Request)(nil), "berty.types.ContactRequestDisable.Request")
	proto.RegisterType((*ContactRequestDisable_Reply)(nil), "berty.types.ContactRequestDisable.Reply")
	proto.RegisterType((*ContactRequestEnable)(nil), "berty.types.ContactRequestEnable")
	proto.RegisterType((*ContactRequestEnable_Request)(nil), "berty.types.ContactRequestEnable.Request")
	proto.RegisterType((*ContactRequestEnable_Reply)(nil), "berty.types.ContactRequestEnable.Reply")
	proto.RegisterType((*ContactRequestResetReference)(nil), "berty.types.ContactRequestResetReference")
	proto.RegisterType((*ContactRequestResetReference_Request)(nil), "berty.types.ContactRequestResetReference.Request")
	proto.RegisterType((*ContactRequestResetReference_Reply)(nil), "berty.types.ContactRequestResetReference.Reply")
	proto.RegisterType((*ContactRequestSend)(nil), "berty.types.ContactRequestSend")
	proto.RegisterType((*ContactRequestSend_Request)(nil), "berty.types.ContactRequestSend.Request")
	proto.RegisterType((*ContactRequestSend_Reply)(nil), "berty.types.ContactRequestSend.Reply")
	proto.RegisterType((*ContactRequestAccept)(nil), "berty.types.ContactRequestAccept")
	proto.RegisterType((*ContactRequestAccept_Request)(nil), "berty.types.ContactRequestAccept.Request")
	proto.RegisterType((*ContactRequestAccept_Reply)(nil), "berty.types.ContactRequestAccept.Reply")
	proto.RegisterType((*ContactRequestDiscard)(nil), "berty.types.ContactRequestDiscard")
	proto.RegisterType((*ContactRequestDiscard_Request)(nil), "berty.types.ContactRequestDiscard.Request")
	proto.RegisterType((*ContactRequestDiscard_Reply)(nil), "berty.types.ContactRequestDiscard.Reply")
	proto.RegisterType((*ContactBlock)(nil), "berty.types.ContactBlock")
	proto.RegisterType((*ContactBlock_Request)(nil), "berty.types.ContactBlock.Request")
	proto.RegisterType((*ContactBlock_Reply)(nil), "berty.types.ContactBlock.Reply")
	proto.RegisterType((*ContactUnblock)(nil), "berty.types.ContactUnblock")
	proto.RegisterType((*ContactUnblock_Request)(nil), "berty.types.ContactUnblock.Request")
	proto.RegisterType((*ContactUnblock_Reply)(nil), "berty.types.ContactUnblock.Reply")
	proto.RegisterType((*ContactAliasKeySend)(nil), "berty.types.ContactAliasKeySend")
	proto.RegisterType((*ContactAliasKeySend_Request)(nil), "berty.types.ContactAliasKeySend.Request")
	proto.RegisterType((*ContactAliasKeySend_Reply)(nil), "berty.types.ContactAliasKeySend.Reply")
	proto.RegisterType((*MultiMemberGroupCreate)(nil), "berty.types.MultiMemberGroupCreate")
	proto.RegisterType((*MultiMemberGroupCreate_Request)(nil), "berty.types.MultiMemberGroupCreate.Request")
	proto.RegisterType((*MultiMemberGroupCreate_Reply)(nil), "berty.types.MultiMemberGroupCreate.Reply")
	proto.RegisterType((*MultiMemberGroupJoin)(nil), "berty.types.MultiMemberGroupJoin")
	proto.RegisterType((*MultiMemberGroupJoin_Request)(nil), "berty.types.MultiMemberGroupJoin.Request")
	proto.RegisterType((*MultiMemberGroupJoin_Reply)(nil), "berty.types.MultiMemberGroupJoin.Reply")
	proto.RegisterType((*MultiMemberGroupLeave)(nil), "berty.types.MultiMemberGroupLeave")
	proto.RegisterType((*MultiMemberGroupLeave_Request)(nil), "berty.types.MultiMemberGroupLeave.Request")
	proto.RegisterType((*MultiMemberGroupLeave_Reply)(nil), "berty.types.MultiMemberGroupLeave.Reply")
	proto.RegisterType((*MultiMemberGroupAliasResolverDisclose)(nil), "berty.types.MultiMemberGroupAliasResolverDisclose")
	proto.RegisterType((*MultiMemberGroupAliasResolverDisclose_Request)(nil), "berty.types.MultiMemberGroupAliasResolverDisclose.Request")
	proto.RegisterType((*MultiMemberGroupAliasResolverDisclose_Reply)(nil), "berty.types.MultiMemberGroupAliasResolverDisclose.Reply")
	proto.RegisterType((*MultiMemberGroupAdminRoleGrant)(nil), "berty.types.MultiMemberGroupAdminRoleGrant")
	proto.RegisterType((*MultiMemberGroupAdminRoleGrant_Request)(nil), "berty.types.MultiMemberGroupAdminRoleGrant.Request")
	proto.RegisterType((*MultiMemberGroupAdminRoleGrant_Reply)(nil), "berty.types.MultiMemberGroupAdminRoleGrant.Reply")
	proto.RegisterType((*MultiMemberGroupInvitationCreate)(nil), "berty.types.MultiMemberGroupInvitationCreate")
	proto.RegisterType((*MultiMemberGroupInvitationCreate_Request)(nil), "berty.types.MultiMemberGroupInvitationCreate.Request")
	proto.RegisterType((*MultiMemberGroupInvitationCreate_Reply)(nil), "berty.types.MultiMemberGroupInvitationCreate.Reply")
	proto.RegisterType((*AppMetadataSend)(nil), "berty.types.AppMetadataSend")
	proto.RegisterType((*AppMetadataSend_Request)(nil), "berty.types.AppMetadataSend.Request")
	proto.RegisterType((*AppMetadataSend_Reply)(nil), "berty.types.AppMetadataSend.Reply")
	proto.RegisterType((*AppMessageSend)(nil), "berty.types.AppMessageSend")
	proto.RegisterType((*AppMessageSend_Request)(nil), "berty.types.AppMessageSend.Request")
	proto.RegisterType((*AppMessageSend_Reply)(nil), "berty.types.AppMessageSend.Reply")
	proto.RegisterType((*GroupMetadataEvent)(nil), "berty.types.GroupMetadataEvent")
	proto.RegisterType((*GroupMessageEvent)(nil), "berty.types.GroupMessageEvent")
	proto.RegisterType((*GroupMetadataSubscribe)(nil), "berty.types.GroupMetadataSubscribe")
	proto.RegisterType((*GroupMetadataSubscribe_Request)(nil), "berty.types.GroupMetadataSubscribe.Request")
	proto.RegisterType((*GroupMetadataList)(nil), "berty.types.GroupMetadataList")
	proto.RegisterType((*GroupMetadataList_Request)(nil), "berty.types.GroupMetadataList.Request")
	proto.RegisterType((*GroupMessageSubscribe)(nil), "berty.types.GroupMessageSubscribe")
	proto.RegisterType((*GroupMessageSubscribe_Request)(nil), "berty.types.GroupMessageSubscribe.Request")
	proto.RegisterType((*GroupMessageList)(nil), "berty.types.GroupMessageList")
	proto.RegisterType((*GroupMessageList_Request)(nil), "berty.types.GroupMessageList.Request")
	proto.RegisterType((*GroupInfo)(nil), "berty.types.GroupInfo")
	proto.RegisterType((*GroupInfo_Request)(nil), "berty.types.GroupInfo.Request")
	proto.RegisterType((*GroupInfo_Reply)(nil), "berty.types.GroupInfo.Reply")
	proto.RegisterType((*ActivateGroup)(nil), "berty.types.ActivateGroup")
	proto.RegisterType((*ActivateGroup_Request)(nil), "berty.types.ActivateGroup.Request")
	proto.RegisterType((*ActivateGroup_Reply)(nil), "berty.types.ActivateGroup.Reply")
	proto.RegisterType((*DeactivateGroup)(nil), "berty.types.DeactivateGroup")
	proto.RegisterType((*DeactivateGroup_Request)(nil), "berty.types.DeactivateGroup.Request")
	proto.RegisterType((*DeactivateGroup_Reply)(nil), "berty.types.DeactivateGroup.Reply")
	proto.RegisterType((*DebugListGroups)(nil), "berty.types.DebugListGroups")
	proto.RegisterType((*DebugListGroups_Request)(nil), "berty.types.DebugListGroups.Request")
	proto.RegisterType((*DebugListGroups_Reply)(nil), "berty.types.DebugListGroups.Reply")
	proto.RegisterType((*DebugInspectGroupStore)(nil), "berty.types.DebugInspectGroupStore")
	proto.RegisterType((*DebugInspectGroupStore_Request)(nil), "berty.types.DebugInspectGroupStore.Request")
	proto.RegisterType((*DebugInspectGroupStore_Reply)(nil), "berty.types.DebugInspectGroupStore.Reply")
	proto.RegisterType((*ShareableContact)(nil), "berty.types.ShareableContact")
}

func init() { proto.RegisterFile("bertytypes.proto", fileDescriptor_66af3dd56d99377e) }

var fileDescriptor_66af3dd56d99377e = []byte{
	// 2567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x6f, 0x24, 0x47,
	0x15, 0x4f, 0xf7, 0xd8, 0x1e, 0xcf, 0x9b, 0xb1, 0xdd, 0xae, 0xb5, 0xbd, 0xf6, 0x24, 0xf6, 0x38,
	0xbd, 0xec, 0xe2, 0x75, 0x56, 0x76, 0xe2, 0xdd, 0x6c, 0x10, 0xe1, 0x43, 0xf6, 0xda, 0x59, 0x26,
	0x5e, 0x8b, 0xa1, 0x67, 0x57, 0x01, 0x14, 0x69, 0xe8, 0xe9, 0x2e, 0xb7, 0x3b, 0xd3, 0xd3, 0xdd,
	0xe9, 0xee, 0x99, 0x8d, 0x51, 0x90, 0x38, 0x20, 0x16, 0x09, 0x6e, 0xc0, 0x05, 0x2e, 0x08, 0xb8,
	0x02, 0x27, 0xfe, 0x81, 0x08, 0x24, 0xb8, 0xa0, 0xdc, 0x91, 0xac, 0x30, 0x12, 0x07, 0xc4, 0x9d,
	0x23, 0x42, 0xf5, 0xd1, 0x5f, 0xf3, 0xb5, 0x6e, 0x7b, 0x2d, 0x71, 0x9b, 0x7a, 0xf5, 0xea, 0xf7,
	0x3e, 0xea, 0xf5, 0x7b, 0x55, 0xaf, 0x06, 0xa4, 0x26, 0xf6, 0x82, 0xd3, 0xe0, 0xd4, 0xc5, 0xfe,
	0x96, 0xeb, 0x39, 0x81, 0x83, 0x8a, 0x94, 0xb2, 0x45, 0x49, 0xe5, 0x05, 0xc3, 0x31, 0x1c, 0x4a,
	0xdf, 0x26, 0xbf, 0x18, 0x8b, 0xfc, 0x67, 0x01, 0xf2, 0xbb, 0x9a, 0xe6, 0x74, 0xec, 0x00, 0x6d,
	0xc0, 0xa4, 0xe1, 0x39, 0x1d, 0x77, 0x59, 0x58, 0x17, 0x36, 0x8a, 0x3b, 0x68, 0x2b, 0xb1, 0x7c,
	0xeb, 0x21, 0x99, 0x51, 0x18, 0x03, 0xda, 0x82, 0x6b, 0x2a, 0x5b, 0xd4, 0x70, 0x3d, 0xb3, 0xab,
	0x06, 0xb8, 0xd1, 0xc2, 0xa7, 0xcb, 0xe2, 0xba, 0xb0, 0x51, 0x52, 0xe6, 0xf9, 0x54, 0x8d, 0xcd,
	0x1c, 0xe2, 0x53, 0xb4, 0x09, 0xf3, 0xaa, 0x65, 0xaa, 0x7e, 0x8a, 0x3b, 0x47, 0xb9, 0xe7, 0xe8,
	0x44, 0x82, 0xf7, 0x1e, 0x2c, 0xb9, 0x9d, 0xa6, 0x65, 0x6a, 0x0d, 0x0f, 0xdb, 0x3a, 0xfe, 0x6e,
	0xd7, 0xe9, 0xf8, 0x0d, 0x1f, 0x63, 0x7d, 0x79, 0x82, 0x2e, 0x58, 0x60, 0xb3, 0x4a, 0x34, 0x59,
	0xc7, 0x58, 0x97, 0x7f, 0x26, 0xc0, 0x24, 0x55, 0x11, 0xad, 0x02, 0xf0, 0xf5, 0x44, 0x88, 0x40,
	0xd7, 0x14, 0x18, 0x85, 0xc0, 0x2f, 0xc1, 0x94, 0x8f, 0x35, 0x0f, 0x07, 0x5c, 0x5b, 0x3e, 0x22,
	0xcb, 0xd8, 0xaf, 0x86, 0x6f, 0x1a, 0x5c, 0xb7, 0x02, 0xa3, 0xd4, 0x4d, 0x03, 0xbd, 0x09, 0x40,
	0x4d, 0x6f, 0x10, 0x6f, 0x50, 0x4d, 0x66, 0x77, 0x96, 0x06, 0x1d, 0xf4, 0xf8, 0xd4, 0xc5, 0x4a,
	0xc1, 0x08, 0x7f, 0xca, 0x1e, 0xcc, 0x50, 0xfa, 0x11, 0x0e, 0x54, 0x5d, 0x0d, 0x54, 0x82, 0x83,
	0xbb, 0xd8, 0x0e, 0x18, 0x8e, 0x30, 0x04, 0xe7, 0x80, 0x4c, 0x33, 0x1c, 0x1c, 0xfe, 0x44, 0xcb,
	0x90, 0x77, 0xd5, 0x53, 0xcb, 0x51, 0x75, 0xae, 0x76, 0x38, 0x44, 0x12, 0xe4, 0x62, 0x85, 0xc9,
	0x4f, 0xf9, 0x6d, 0x2e, 0xf3, 0xc0, 0xee, 0x62, 0xcb, 0x71, 0x31, 0x5a, 0x80, 0x49, 0xdb, 0xb1,
	0x35, 0xcc, 0x9d, 0xc1, 0x06, 0x84, 0x4a, 0xf1, 0x39, 0x20, 0x1b, 0xc8, 0xff, 0x16, 0x60, 0xf6,
	0x08, 0xfb, 0xbe, 0x6a, 0xe0, 0xaf, 0x61, 0x55, 0xc7, 0x9e, 0x4f, 0x64, 0xd3, 0xfd, 0xc4, 0x1e,
	0x05, 0x98, 0x50, 0xc2, 0x21, 0xba, 0x0d, 0x05, 0x1d, 0x77, 0x4d, 0x0d, 0x37, 0xdc, 0x16, 0x83,
	0xd9, 0x2b, 0xf5, 0xce, 0x2a, 0xd3, 0xfb, 0x94, 0x58, 0x3b, 0x54, 0xa6, 0xd9, 0x74, 0xad, 0x35,
	0xa8, 0x26, 0x3a, 0x80, 0xe9, 0x36, 0xf7, 0xca, 0xf2, 0xc4, 0x7a, 0x6e, 0xa3, 0xb8, 0x73, 0x3b,
	0xe5, 0x87, 0xb4, 0x16, 0x5b, 0xa1, 0x07, 0x0f, 0xec, 0xc0, 0x3b, 0x55, 0xa2, 0xa5, 0xe5, 0xb7,
	0x61, 0x26, 0x35, 0x45, 0x24, 0x85, 0x1b, 0x5f, 0x50, 0xc8, 0x4f, 0x62, 0x69, 0x57, 0xb5, 0x3a,
	0x98, 0xaa, 0x58, 0x50, 0xd8, 0xe0, 0x8b, 0xe2, 0x17, 0x04, 0xf9, 0x03, 0x98, 0xe3, 0x62, 0x22,
	0x67, 0x7d, 0x1e, 0xe6, 0xda, 0x8c, 0xd4, 0x38, 0x61, 0xa2, 0xb9, 0xdb, 0x66, 0xdb, 0x03, 0x6e,
	0xe1, 0x94, 0x70, 0x4b, 0xf8, 0x30, 0xf6, 0x77, 0x2e, 0xe1, 0x6f, 0xf9, 0x63, 0x28, 0xd1, 0xad,
	0x7d, 0xe0, 0xd8, 0x01, 0xfe, 0x28, 0x40, 0x4b, 0x20, 0x9a, 0x3a, 0xc3, 0xde, 0x9b, 0xea, 0x9d,
	0x55, 0xc4, 0xea, 0xbe, 0x22, 0x9a, 0x3a, 0xba, 0x03, 0xe0, 0xaa, 0x1e, 0x09, 0x11, 0x53, 0xf7,
	0x97, 0xc5, 0xf5, 0xdc, 0x46, 0x69, 0x6f, 0xa6, 0x77, 0x56, 0x29, 0xd4, 0x28, 0xb5, 0xba, 0xef,
	0x2b, 0x05, 0xc6, 0x50, 0xd5, 0x7d, 0x74, 0x0b, 0xa6, 0x59, 0x5c, 0xba, 0x2d, 0x26, 0x6e, 0xaf,
	0xd8, 0x3b, 0xab, 0xe4, 0x69, 0x00, 0xd4, 0x0e, 0x95, 0x3c, 0x9d, 0xac, 0xb5, 0x64, 0x05, 0x8a,
	0xbb, 0x6e, 0x1c, 0x86, 0xa9, 0x9d, 0x13, 0xc6, 0xee, 0xdc, 0x48, 0x3b, 0x65, 0x03, 0x10, 0x31,
	0x46, 0xd5, 0x82, 0x5d, 0x5d, 0xdf, 0x25, 0x9f, 0x31, 0xf9, 0xc0, 0x32, 0x40, 0xdf, 0x82, 0x69,
	0x9e, 0x16, 0xc2, 0xf0, 0xa1, 0xca, 0x53, 0x28, 0xa2, 0x3c, 0x4b, 0x0d, 0x2d, 0xf9, 0xc7, 0x02,
	0x2c, 0x50, 0x8b, 0x76, 0x75, 0xfd, 0x08, 0xb7, 0x9b, 0xd8, 0x63, 0x60, 0x44, 0x56, 0x9b, 0x8e,
	0xfb, 0x64, 0x31, 0x26, 0x22, 0x8b, 0x4d, 0xd7, 0x5a, 0x59, 0x62, 0x75, 0x15, 0x80, 0xa3, 0x26,
	0x52, 0x01, 0xa3, 0xd4, 0x4d, 0x43, 0x3e, 0x80, 0x12, 0x5b, 0x54, 0x67, 0x99, 0xe3, 0x65, 0x28,
	0x68, 0x27, 0xaa, 0x69, 0x27, 0xf2, 0xcd, 0x34, 0x25, 0x10, 0x6f, 0x24, 0x3e, 0x1e, 0x31, 0xf5,
	0xf1, 0xc8, 0x3f, 0x4d, 0x18, 0x95, 0xc2, 0xcb, 0xe0, 0xc0, 0xfb, 0x30, 0xab, 0x63, 0x3f, 0x68,
	0xc4, 0x4e, 0x60, 0x96, 0x49, 0xbd, 0xb3, 0x4a, 0x69, 0x1f, 0xfb, 0x41, 0xe4, 0x88, 0x92, 0x1e,
	0x8f, 0x5a, 0xc9, 0x74, 0x92, 0x4b, 0xa5, 0x13, 0xf9, 0xe7, 0x02, 0xac, 0x1f, 0x75, 0xac, 0xc0,
	0x64, 0xbc, 0xa1, 0x82, 0x74, 0x4b, 0x14, 0xec, 0x3b, 0x56, 0xb7, 0xff, 0xbb, 0x1f, 0xaf, 0xe1,
	0x4d, 0x98, 0x65, 0x5b, 0xec, 0xf1, 0xc5, 0x3c, 0x88, 0x66, 0xd4, 0x14, 0x62, 0x05, 0x8a, 0x61,
	0x81, 0x70, 0x9c, 0x63, 0xae, 0x14, 0xf0, 0xd2, 0xe0, 0x38, 0xc7, 0xf2, 0x33, 0x01, 0x56, 0x52,
	0x7a, 0xa9, 0x76, 0xb0, 0xab, 0xb7, 0x4d, 0x5b, 0x71, 0x2c, 0x9c, 0x45, 0xa1, 0xaf, 0xc2, 0xbc,
	0x41, 0x16, 0x63, 0x3c, 0xe0, 0xb5, 0x6b, 0xbd, 0xb3, 0xca, 0xdc, 0x43, 0x36, 0x19, 0x39, 0x6e,
	0xce, 0x48, 0x11, 0x5a, 0xf2, 0x01, 0x2c, 0x27, 0x14, 0xa9, 0xda, 0x66, 0x60, 0xaa, 0x16, 0x1b,
	0x64, 0x88, 0x47, 0x59, 0x85, 0xf5, 0xc8, 0xb9, 0xba, 0x6e, 0x06, 0xa6, 0x63, 0xab, 0x56, 0xba,
	0xa8, 0x65, 0x31, 0x0b, 0xc1, 0x04, 0xad, 0x91, 0xcc, 0xbb, 0xf4, 0xb7, 0xac, 0xc3, 0x0d, 0x56,
	0xb5, 0x71, 0xdb, 0xe9, 0xe2, 0xab, 0x92, 0x62, 0x02, 0xe2, 0x07, 0x08, 0x2a, 0xec, 0x5d, 0xc7,
	0xb4, 0xb3, 0x81, 0x46, 0xc7, 0x0e, 0xf1, 0x39, 0xc7, 0x0e, 0x19, 0x83, 0x94, 0x14, 0xf5, 0x08,
	0x1f, 0x07, 0x19, 0xd3, 0x4d, 0x94, 0x2b, 0xc5, 0x31, 0xb9, 0xf2, 0x5d, 0x58, 0xe5, 0x62, 0x78,
	0x7a, 0x53, 0xf0, 0x87, 0x1d, 0xec, 0x07, 0xfb, 0xa6, 0xaf, 0x36, 0xad, 0x4c, 0xc6, 0xc9, 0x55,
	0x78, 0x65, 0x28, 0xd6, 0x81, 0x9d, 0x19, 0xea, 0x87, 0x02, 0xdc, 0x18, 0x8a, 0xa5, 0xe0, 0x63,
	0xec, 0x61, 0x5b, 0xc3, 0x0a, 0xf6, 0xb3, 0xe5, 0x8f, 0xd1, 0x67, 0x2d, 0x71, 0xcc, 0x59, 0xeb,
	0x6f, 0xc2, 0x08, 0x07, 0x1d, 0xd8, 0x1f, 0x76, 0x70, 0x27, 0xdb, 0xee, 0x9f, 0x73, 0x53, 0xd0,
	0x5b, 0x24, 0x91, 0x52, 0x61, 0x34, 0x3b, 0x14, 0x77, 0x56, 0x53, 0x71, 0x52, 0x3f, 0x51, 0x3d,
	0x4c, 0x5c, 0x1a, 0x6a, 0x14, 0x72, 0xa3, 0x57, 0xa1, 0xe4, 0x3c, 0xb5, 0x1b, 0x89, 0xb3, 0x06,
	0xb1, 0xac, 0xe8, 0x3c, 0xb5, 0xc3, 0x6a, 0x28, 0x07, 0xb0, 0x32, 0xd4, 0x9e, 0x3a, 0xb6, 0x33,
	0xb9, 0xf3, 0x0e, 0x00, 0x97, 0x1a, 0x5b, 0x43, 0x4b, 0x37, 0x87, 0xad, 0x1d, 0x2a, 0x05, 0xce,
	0x50, 0x6b, 0xc9, 0x7f, 0x1f, 0xe5, 0x46, 0x05, 0x6b, 0xd8, 0xec, 0x66, 0x73, 0x63, 0x26, 0xd1,
	0xe8, 0x3e, 0x5c, 0x0f, 0xb9, 0xfb, 0x37, 0x9e, 0xa5, 0xde, 0x45, 0x2d, 0xd4, 0xa8, 0x2f, 0x55,
	0x48, 0xe1, 0xba, 0x3e, 0x7f, 0xce, 0x71, 0x7a, 0xe4, 0xd3, 0x53, 0x58, 0x1b, 0xf5, 0x11, 0x69,
	0xaa, 0xa7, 0x5f, 0xa1, 0x75, 0xf2, 0xaf, 0x46, 0x39, 0x76, 0x57, 0xd3, 0xb0, 0x1b, 0x5c, 0xa5,
	0x63, 0xcf, 0x7b, 0x1c, 0x73, 0x61, 0x31, 0xad, 0xe1, 0x9e, 0xe5, 0x68, 0xad, 0xab, 0x74, 0x8a,
	0x07, 0xd7, 0xd3, 0x12, 0x9f, 0xd8, 0xcd, 0xab, 0x96, 0x79, 0x04, 0xa8, 0x6a, 0xfb, 0x81, 0x6a,
	0x6b, 0xf8, 0xe0, 0x23, 0xd7, 0xf1, 0x82, 0x7d, 0x72, 0x62, 0x2f, 0x40, 0x9e, 0xef, 0x47, 0xf9,
	0x0e, 0x4c, 0x2a, 0xd8, 0xb5, 0x4e, 0xd1, 0x0d, 0x98, 0xc1, 0x94, 0x03, 0xeb, 0x0d, 0x1a, 0x55,
	0xec, 0x1c, 0x55, 0x0a, 0x89, 0x64, 0xa1, 0xfc, 0xc7, 0x49, 0x58, 0x0e, 0xf1, 0x1e, 0x62, 0x62,
	0xc7, 0xb1, 0x69, 0x74, 0x3c, 0x95, 0x54, 0xb5, 0x24, 0xea, 0x9f, 0x26, 0x42, 0xd8, 0x3b, 0x00,
	0xd1, 0x3d, 0x35, 0x34, 0x8d, 0xaa, 0xcb, 0x5d, 0x41, 0xd4, 0x0d, 0x6f, 0xab, 0x99, 0x8e, 0x88,
	0x5f, 0x02, 0x29, 0x04, 0xee, 0xdb, 0x6f, 0xd4, 0x3b, 0xab, 0xcc, 0x26, 0xab, 0x54, 0xed, 0x50,
	0x99, 0x55, 0x93, 0xe3, 0x16, 0xba, 0x01, 0x79, 0x17, 0x63, 0xaf, 0x61, 0xb2, 0x3b, 0x6d, 0x61,
	0x0f, 0x7a, 0x67, 0x95, 0xa9, 0x1a, 0xc6, 0x5e, 0x75, 0x5f, 0x99, 0x22, 0x53, 0x55, 0x1d, 0xbd,
	0x02, 0x05, 0xcb, 0xf4, 0x03, 0x6c, 0x93, 0x2b, 0xc8, 0xe4, 0x7a, 0x6e, 0xa3, 0xa0, 0xc4, 0x04,
	0x54, 0x87, 0x62, 0xd3, 0xc2, 0x0d, 0xcc, 0xca, 0xc8, 0xf2, 0x14, 0xbd, 0x48, 0xee, 0xa4, 0x52,
	0xe2, 0x28, 0x57, 0x6d, 0xd5, 0x71, 0x10, 0x98, 0xb6, 0x51, 0x0f, 0xd4, 0x00, 0x2b, 0xd0, 0xb4,
	0x70, 0x58, 0x8c, 0xde, 0x07, 0xe9, 0xa9, 0x79, 0x6c, 0x36, 0xdc, 0x1d, 0x37, 0x42, 0xce, 0x5f,
	0x18, 0x79, 0x96, 0x60, 0xd5, 0x76, 0xdc, 0x10, 0xfd, 0x09, 0x94, 0xda, 0xba, 0xed, 0x47, 0xc8,
	0xd3, 0x17, 0x46, 0x2e, 0x12, 0x9c, 0x10, 0xf6, 0x3d, 0x98, 0xf1, 0xb0, 0xa5, 0x9e, 0x46, 0xb8,
	0x85, 0x0b, 0xe3, 0x96, 0x28, 0x10, 0x07, 0x96, 0x1f, 0x42, 0x29, 0x39, 0x8b, 0x8a, 0x90, 0x7f,
	0x62, 0xb7, 0x6c, 0xe7, 0xa9, 0x2d, 0xbd, 0x44, 0x06, 0x9c, 0x4f, 0x12, 0x50, 0x09, 0xa6, 0xc3,
	0xb3, 0x81, 0x24, 0xa2, 0x39, 0x28, 0x3e, 0xb1, 0xd5, 0xae, 0x6a, 0x5a, 0x84, 0x22, 0xe5, 0xe4,
	0xef, 0xc1, 0xf5, 0x11, 0x05, 0x3b, 0x19, 0xb5, 0xef, 0x85, 0x41, 0x3b, 0xba, 0x28, 0x0b, 0xa3,
	0x8b, 0x32, 0x39, 0xd2, 0x87, 0x0e, 0x20, 0xa1, 0x3b, 0xad, 0x84, 0x43, 0xf9, 0x35, 0x58, 0x1c,
	0x7a, 0x8e, 0x49, 0x0a, 0xcf, 0x73, 0xe1, 0xf2, 0x77, 0x60, 0x61, 0xd8, 0x41, 0x25, 0xc9, 0xfb,
	0xe5, 0x4b, 0x29, 0x2a, 0x9f, 0xc0, 0x2b, 0xfd, 0xde, 0xf0, 0xf1, 0x70, 0x97, 0x5c, 0x52, 0xd2,
	0x0f, 0x84, 0xe8, 0x82, 0x1a, 0x17, 0x74, 0xbd, 0x8c, 0x23, 0x01, 0xc9, 0x43, 0x85, 0x70, 0xa9,
	0x43, 0x85, 0x38, 0x70, 0xa8, 0x88, 0x5d, 0xfa, 0xcd, 0x7e, 0x97, 0xb2, 0x32, 0x54, 0x7e, 0x2b,
	0xd6, 0x23, 0x9d, 0x56, 0x85, 0xf1, 0x69, 0x35, 0x46, 0xfe, 0xd6, 0x90, 0x9d, 0x25, 0xc5, 0xf5,
	0x05, 0x40, 0xd7, 0xa0, 0x94, 0xac, 0x4c, 0x2f, 0x00, 0x51, 0x81, 0xd9, 0x74, 0xe5, 0x79, 0x01,
	0x98, 0xdf, 0x80, 0x6b, 0x61, 0x07, 0x82, 0xb7, 0x1f, 0xe8, 0x0e, 0xbf, 0x11, 0x03, 0x27, 0x0b,
	0xb2, 0x30, 0xba, 0x20, 0xc7, 0x90, 0x8f, 0x61, 0xa9, 0xff, 0xfe, 0xfb, 0xc0, 0xc3, 0x6a, 0x90,
	0x0a, 0xcc, 0xed, 0x30, 0x30, 0xcf, 0x09, 0x2f, 0x3f, 0x86, 0x85, 0x7e, 0x54, 0x72, 0x51, 0x2a,
	0xdf, 0x8d, 0x35, 0x3d, 0x77, 0xf7, 0x35, 0xd6, 0xb5, 0x0e, 0x8b, 0xfd, 0xa8, 0x8f, 0xb0, 0xda,
	0xc5, 0x97, 0x72, 0x80, 0x06, 0x37, 0x07, 0x1a, 0x00, 0xc9, 0xbb, 0x3a, 0x89, 0x31, 0xcb, 0xf1,
	0x2f, 0x27, 0xe4, 0x99, 0x00, 0x6b, 0x83, 0x6d, 0x06, 0x7e, 0x9d, 0xa7, 0x57, 0xf0, 0xf2, 0xfb,
	0x99, 0xe1, 0xd3, 0xd7, 0x6f, 0x71, 0xdc, 0xf5, 0x3b, 0xd6, 0xe4, 0x47, 0x43, 0x1a, 0x1e, 0x55,
	0xbb, 0x6b, 0x06, 0xb4, 0x3e, 0xf0, 0xad, 0xbf, 0x80, 0xa9, 0x6f, 0x84, 0x21, 0x72, 0xee, 0x7d,
	0x95, 0x0d, 0x98, 0x4b, 0xf4, 0xe8, 0x68, 0x24, 0x1f, 0x66, 0x77, 0xc2, 0xc8, 0x56, 0x71, 0x6c,
	0xf3, 0x31, 0xcc, 0x52, 0x41, 0xb4, 0x8d, 0x77, 0x85, 0x72, 0x7e, 0x2d, 0x00, 0x4a, 0xb5, 0xbf,
	0x69, 0x03, 0x14, 0x7d, 0x05, 0x66, 0x58, 0x0f, 0x5c, 0x63, 0xad, 0x50, 0xee, 0x99, 0x95, 0xc1,
	0x36, 0x38, 0xef, 0x95, 0x2a, 0x25, 0x9c, 0xec, 0x9c, 0xde, 0x4f, 0x74, 0x8e, 0x59, 0xcf, 0xa0,
	0x3c, 0xe8, 0xd4, 0x50, 0x64, 0xdc, 0x2a, 0x8e, 0x3b, 0xde, 0xb9, 0x64, 0xc7, 0xfb, 0xb7, 0x02,
	0xcc, 0xf3, 0x15, 0xac, 0x13, 0xfc, 0x42, 0x74, 0x7c, 0x13, 0xf2, 0x61, 0xfb, 0x98, 0xa9, 0xf8,
	0xf2, 0x98, 0xe6, 0xb6, 0x12, 0xf2, 0x26, 0x9b, 0xad, 0xb9, 0x74, 0xb3, 0xf5, 0x97, 0x02, 0x2c,
	0xa5, 0x0c, 0xab, 0x77, 0x9a, 0xbe, 0xe6, 0x99, 0x4d, 0x5c, 0xfe, 0xbe, 0x90, 0x7d, 0xf7, 0x16,
	0x60, 0xd2, 0x37, 0x6d, 0x2d, 0xec, 0xe9, 0xb2, 0x01, 0xa1, 0x76, 0xec, 0xc0, 0xb4, 0x42, 0x0f,
	0xd1, 0x01, 0x29, 0x76, 0x86, 0xd3, 0x68, 0xaa, 0x5a, 0xeb, 0xa9, 0xea, 0xe9, 0x3e, 0x3d, 0xb3,
	0x4e, 0x2b, 0x45, 0xc3, 0xd9, 0x0b, 0x49, 0xf2, 0x3b, 0x91, 0x0f, 0x99, 0x72, 0x8f, 0x4c, 0x3f,
	0xb8, 0xc0, 0x57, 0x23, 0xff, 0x42, 0x80, 0xc5, 0xe4, 0x66, 0xfc, 0x5f, 0x19, 0x79, 0x00, 0x52,
	0x52, 0xb7, 0x8b, 0xda, 0xf8, 0x1f, 0x01, 0x0a, 0x3c, 0xcd, 0x1c, 0x3b, 0xe5, 0x46, 0x76, 0xb3,
	0x32, 0x5d, 0xc2, 0xca, 0xcf, 0x84, 0xcc, 0x99, 0x28, 0x43, 0x22, 0x4d, 0x5f, 0x9a, 0x72, 0x63,
	0x1b, 0x58, 0x87, 0x30, 0xb3, 0xab, 0x05, 0xf4, 0xa1, 0x8f, 0x4a, 0xbb, 0x54, 0x05, 0x39, 0x82,
	0xb9, 0x7d, 0xac, 0xbe, 0x30, 0xb8, 0x4f, 0x04, 0x82, 0xd7, 0xec, 0x18, 0x64, 0x57, 0x29, 0x9b,
	0x9f, 0x2c, 0xf8, 0xbf, 0x11, 0x32, 0x56, 0x7c, 0xb4, 0x9f, 0x7a, 0x30, 0x14, 0xc7, 0x3d, 0x18,
	0xb2, 0xcd, 0x1b, 0xf6, 0x7e, 0xd8, 0xb7, 0xd5, 0xb9, 0xe7, 0xdc, 0xb7, 0xff, 0x2b, 0xc2, 0x12,
	0x35, 0xa2, 0x6a, 0xfb, 0x2e, 0xd6, 0x98, 0x1d, 0xf5, 0xc0, 0xf1, 0x2e, 0xf6, 0xf9, 0x1c, 0xc1,
	0xb4, 0xe5, 0x18, 0x49, 0x03, 0x6e, 0xa6, 0x0c, 0x18, 0x10, 0xf5, 0xc8, 0x31, 0xa8, 0x3d, 0x14,
	0x8e, 0x0f, 0x94, 0xbc, 0xc5, 0x7e, 0x94, 0x3f, 0x8b, 0x7c, 0xb8, 0x02, 0x39, 0x2d, 0x7a, 0xfb,
	0xca, 0xf7, 0xce, 0x2a, 0xb9, 0x07, 0xd5, 0x7d, 0x85, 0xd0, 0xd0, 0x36, 0x14, 0xf9, 0xeb, 0x97,
	0x16, 0x3f, 0x7f, 0xcd, 0xf6, 0xce, 0x2a, 0xc0, 0x9e, 0xbf, 0x1e, 0x54, 0xf7, 0x7d, 0x85, 0x3f,
	0x90, 0x3d, 0x30, 0x75, 0x1f, 0xbd, 0x03, 0xd7, 0xc2, 0x04, 0xdf, 0x48, 0xbc, 0xac, 0xe6, 0xc6,
	0xbe, 0xac, 0xce, 0xb7, 0x93, 0x05, 0x89, 0x7a, 0x3a, 0x15, 0xc7, 0x13, 0xcf, 0x7b, 0x11, 0x0b,
	0x2b, 0xdf, 0x54, 0xfa, 0xf5, 0xe4, 0x63, 0x90, 0xfa, 0xef, 0x0c, 0x68, 0x09, 0xc4, 0xc8, 0xcf,
	0xf4, 0x9d, 0xaf, 0x76, 0xa8, 0x88, 0xee, 0x05, 0x7b, 0xaf, 0xa8, 0x9c, 0xa8, 0x7d, 0x2c, 0x7f,
	0x45, 0xe3, 0x4d, 0x13, 0xe2, 0x20, 0x42, 0x4b, 0xbc, 0xf4, 0x92, 0xc1, 0x13, 0x5b, 0xc7, 0xc7,
	0xa6, 0x8d, 0x75, 0xe9, 0x25, 0xb4, 0xc0, 0x93, 0x18, 0xa1, 0xf3, 0x36, 0x85, 0x24, 0xa4, 0xa8,
	0x5c, 0x71, 0x49, 0x44, 0xcb, 0xfc, 0x85, 0x8a, 0x50, 0x13, 0x67, 0x24, 0x29, 0xb7, 0xf9, 0xcf,
	0x29, 0x28, 0xc4, 0xbe, 0x5b, 0x02, 0x14, 0x0d, 0x92, 0xb2, 0x6e, 0x40, 0x25, 0xa2, 0xf3, 0xcc,
	0x19, 0x3f, 0xde, 0xed, 0xea, 0x3a, 0xbd, 0x3c, 0x0f, 0x30, 0x25, 0x1f, 0xc3, 0x18, 0x93, 0x88,
	0x2a, 0xf0, 0x72, 0xc4, 0x34, 0xf8, 0xda, 0x20, 0x61, 0xb4, 0x0a, 0x2b, 0x43, 0x19, 0x1e, 0xe1,
	0xe3, 0x40, 0x3a, 0x46, 0x9b, 0x70, 0xab, 0x7f, 0x7a, 0x78, 0x6f, 0x5f, 0x32, 0xd0, 0x6d, 0xb8,
	0x39, 0x9e, 0x37, 0xbc, 0xf8, 0x9f, 0xa0, 0xd7, 0xe1, 0xce, 0x78, 0xd6, 0x74, 0x6b, 0x5e, 0x32,
	0xd1, 0x0e, 0x6c, 0x8d, 0x5f, 0xf1, 0xf5, 0x4e, 0x60, 0x38, 0xa6, 0x6d, 0x84, 0xbd, 0x74, 0xe9,
	0x03, 0xb4, 0x05, 0x9b, 0xe7, 0x5b, 0x53, 0xc7, 0x76, 0x20, 0xb5, 0x9e, 0x2f, 0xa3, 0x6a, 0x6b,
	0x4e, 0xdb, 0xb4, 0x8d, 0xb0, 0xd1, 0x2c, 0x59, 0xe8, 0x2e, 0x6c, 0x9f, 0x6f, 0x4d, 0xd4, 0xbf,
	0x95, 0xda, 0xe7, 0x17, 0x14, 0x36, 0x5e, 0x25, 0x1b, 0xc9, 0xb0, 0x36, 0x62, 0x0d, 0x6f, 0x81,
	0x4a, 0x0e, 0xfa, 0x1c, 0xac, 0x8f, 0xe0, 0x89, 0x9a, 0x96, 0x92, 0x8b, 0x64, 0x58, 0x8d, 0xb8,
	0xfa, 0x6e, 0x81, 0x2c, 0x6c, 0xfe, 0x2a, 0xa0, 0xd7, 0xe1, 0xb5, 0x88, 0x67, 0xec, 0xad, 0x86,
	0xad, 0xf8, 0x9d, 0x88, 0xee, 0x25, 0x1c, 0x31, 0x78, 0x2f, 0x48, 0x3c, 0xf6, 0xed, 0xda, 0xb6,
	0xd3, 0xb1, 0x35, 0xac, 0x4b, 0xbf, 0x17, 0xd1, 0x16, 0xdc, 0x1e, 0x2d, 0x27, 0x75, 0xaf, 0xc1,
	0xba, 0xf4, 0x07, 0x11, 0xdd, 0x82, 0x57, 0xfb, 0xbf, 0x0c, 0xf6, 0x11, 0xd7, 0x58, 0x26, 0xa1,
	0x3b, 0xf9, 0xaf, 0xfc, 0xe6, 0x4f, 0x04, 0x58, 0x1e, 0x95, 0x66, 0xd1, 0x4d, 0x78, 0x75, 0xd4,
	0x5c, 0xdf, 0x57, 0x38, 0x8a, 0x8d, 0x9f, 0x64, 0x24, 0x81, 0xb8, 0x7c, 0x34, 0x13, 0x53, 0x4d,
	0x12, 0x37, 0x3f, 0x11, 0xa2, 0xb6, 0x00, 0xeb, 0x89, 0xad, 0x44, 0x1d, 0x08, 0x3a, 0x4e, 0x8a,
	0xed, 0x9b, 0x7a, 0xec, 0xf0, 0x98, 0x90, 0x04, 0x92, 0x57, 0x92, 0x53, 0x51, 0x18, 0x8a, 0x68,
	0x11, 0xe6, 0x93, 0x33, 0x6c, 0x57, 0x72, 0xe8, 0x7a, 0x74, 0xcf, 0xe7, 0x0b, 0xda, 0x0e, 0xe1,
	0x9f, 0xe8, 0x17, 0x12, 0x07, 0xe7, 0x64, 0xff, 0x9a, 0x30, 0xba, 0xa6, 0xf6, 0xee, 0x7d, 0xfa,
	0x8f, 0xb5, 0x97, 0xfe, 0xd2, 0x5b, 0x13, 0x3e, 0xed, 0xad, 0x09, 0x9f, 0xf5, 0xd6, 0x84, 0x6f,
	0xcb, 0xbc, 0x4a, 0x60, 0xed, 0x64, 0x9b, 0xfe, 0xdc, 0x36, 0x9c, 0x6d, 0xb7, 0x65, 0x6c, 0xc7,
	0xff, 0xa8, 0x6a, 0x4e, 0xd1, 0xff, 0x4b, 0xdd, 0xfd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e,
	0x40, 0xaf, 0x15, 0x66, 0x25, 0x00, 0x00,
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicRendezvousSeed) > 0 {
		i -= len(m.PublicRendezvousSeed)
		copy(dAtA[i:], m.PublicRendezvousSeed)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.PublicRendezvousSeed)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AliasPrivateKey) > 0 {
		i -= len(m.AliasPrivateKey)
		copy(dAtA[i:], m.AliasPrivateKey)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.AliasPrivateKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountPrivateKey) > 0 {
		i -= len(m.AccountPrivateKey)
		copy(dAtA[i:], m.AccountPrivateKey)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.AccountPrivateKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBertytypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupType != 0 {
		i = encodeVarintBertytypes(dAtA, i, uint64(m.GroupType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SecretSig) > 0 {
		i -= len(m.SecretSig)
		copy(dAtA[i:], m.SecretSig)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.SecretSig)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventType != 0 {
		i = encodeVarintBertytypes(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBertytypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBertytypes(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBertytypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0x12
	}
	if m.Counter != 0 {
		i = encodeVarintBertytypes(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MessageEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MessageHeaders) > 0 {
		i -= len(m.MessageHeaders)
		copy(dAtA[i:], m.MessageHeaders)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.MessageHeaders)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentIDs) > 0 {
		for iNdEx := len(m.ParentIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ParentIDs[iNdEx])
			copy(dAtA[i:], m.ParentIDs[iNdEx])
			i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ParentIDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactAddAliasKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactAddAliasKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactAddAliasKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AliasPK) > 0 {
		i -= len(m.AliasPK)
		copy(dAtA[i:], m.AliasPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.AliasPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupAddMemberDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupAddMemberDevice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupAddMemberDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MemberSig) > 0 {
		i -= len(m.MemberSig)
		copy(dAtA[i:], m.MemberSig)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.MemberSig)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MemberPK) > 0 {
		i -= len(m.MemberPK)
		copy(dAtA[i:], m.MemberPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.MemberPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceSecret) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceSecret) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceSecret) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Counter != 0 {
		i = encodeVarintBertytypes(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainKey) > 0 {
		i -= len(m.ChainKey)
		copy(dAtA[i:], m.ChainKey)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ChainKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupAddDeviceSecret) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupAddDeviceSecret) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupAddDeviceSecret) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestMemberPK) > 0 {
		i -= len(m.DestMemberPK)
		copy(dAtA[i:], m.DestMemberPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DestMemberPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupAddAliasResolver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupAddAliasResolver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupAddAliasResolver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AliasProof) > 0 {
		i -= len(m.AliasProof)
		copy(dAtA[i:], m.AliasProof)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.AliasProof)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AliasResolver) > 0 {
		i -= len(m.AliasResolver)
		copy(dAtA[i:], m.AliasResolver)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.AliasResolver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGrantAdminRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGrantAdminRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGrantAdminRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GranteeMemberPK) > 0 {
		i -= len(m.GranteeMemberPK)
		copy(dAtA[i:], m.GranteeMemberPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GranteeMemberPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberInitialMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberInitialMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberInitialMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MemberPK) > 0 {
		i -= len(m.MemberPK)
		copy(dAtA[i:], m.MemberPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.MemberPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupAddAdditionalRendezvousSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupAddAdditionalRendezvousSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupAddAdditionalRendezvousSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Seed) > 0 {
		i -= len(m.Seed)
		copy(dAtA[i:], m.Seed)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Seed)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupRemoveAdditionalRendezvousSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupRemoveAdditionalRendezvousSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupRemoveAdditionalRendezvousSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Seed) > 0 {
		i -= len(m.Seed)
		copy(dAtA[i:], m.Seed)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Seed)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountGroupJoined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountGroupJoined) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountGroupJoined) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBertytypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountGroupLeft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountGroupLeft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountGroupLeft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountContactRequestDisabled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountContactRequestDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountContactRequestDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountContactRequestEnabled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountContactRequestEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountContactRequestEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountContactRequestReferenceReset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountContactRequestReferenceReset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountContactRequestReferenceReset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicRendezvousSeed) > 0 {
		i -= len(m.PublicRendezvousSeed)
		copy(dAtA[i:], m.PublicRendezvousSeed)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.PublicRendezvousSeed)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountContactRequestEnqueued) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountContactRequestEnqueued) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountContactRequestEnqueued) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OwnMetadata) > 0 {
		i -= len(m.OwnMetadata)
		copy(dAtA[i:], m.OwnMetadata)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.OwnMetadata)))
		i--
		dAtA[i] = 0x22
	}
	if m.Contact != nil {
		{
			size, err := m.Contact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBertytypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountContactRequestSent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountContactRequestSent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountContactRequestSent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountContactRequestReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountContactRequestReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountContactRequestReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactMetadata) > 0 {
		i -= len(m.ContactMetadata)
		copy(dAtA[i:], m.ContactMetadata)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactMetadata)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContactRendezvousSeed) > 0 {
		i -= len(m.ContactRendezvousSeed)
		copy(dAtA[i:], m.ContactRendezvousSeed)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactRendezvousSeed)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountContactRequestDiscarded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountContactRequestDiscarded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountContactRequestDiscarded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountContactRequestAccepted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountContactRequestAccepted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountContactRequestAccepted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountContactBlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountContactBlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountContactBlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountContactUnblocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountContactUnblocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountContactUnblocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstanceExportData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceExportData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceExportData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InstanceExportData_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceExportData_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceExportData_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InstanceExportData_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceExportData_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceExportData_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExportedData) > 0 {
		i -= len(m.ExportedData)
		copy(dAtA[i:], m.ExportedData)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ExportedData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstanceGetConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceGetConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceGetConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InstanceGetConfiguration_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceGetConfiguration_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceGetConfiguration_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InstanceGetConfiguration_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceGetConfiguration_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceGetConfiguration_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RelayEnabled != 0 {
		i = encodeVarintBertytypes(dAtA, i, uint64(m.RelayEnabled))
		i--
		dAtA[i] = 0x48
	}
	if m.MdnsEnabled != 0 {
		i = encodeVarintBertytypes(dAtA, i, uint64(m.MdnsEnabled))
		i--
		dAtA[i] = 0x40
	}
	if m.WifiP2PEnabled != 0 {
		i = encodeVarintBertytypes(dAtA, i, uint64(m.WifiP2PEnabled))
		i--
		dAtA[i] = 0x38
	}
	if m.BleEnabled != 0 {
		i = encodeVarintBertytypes(dAtA, i, uint64(m.BleEnabled))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Listeners) > 0 {
		for iNdEx := len(m.Listeners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Listeners[iNdEx])
			copy(dAtA[i:], m.Listeners[iNdEx])
			i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Listeners[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AccountGroupPK) > 0 {
		i -= len(m.AccountGroupPK)
		copy(dAtA[i:], m.AccountGroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.AccountGroupPK)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountPK) > 0 {
		i -= len(m.AccountPK)
		copy(dAtA[i:], m.AccountPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.AccountPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestReference_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestReference_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestReference_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestReference_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestReference_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestReference_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.PublicRendezvousSeed) > 0 {
		i -= len(m.PublicRendezvousSeed)
		copy(dAtA[i:], m.PublicRendezvousSeed)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.PublicRendezvousSeed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestDisable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestDisable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestDisable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestDisable_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestDisable_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestDisable_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestDisable_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestDisable_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestDisable_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestEnable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestEnable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestEnable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestEnable_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestEnable_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestEnable_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestEnable_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestEnable_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestEnable_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicRendezvousSeed) > 0 {
		i -= len(m.PublicRendezvousSeed)
		copy(dAtA[i:], m.PublicRendezvousSeed)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.PublicRendezvousSeed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestResetReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestResetReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestResetReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestResetReference_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestResetReference_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestResetReference_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestResetReference_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestResetReference_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestResetReference_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicRendezvousSeed) > 0 {
		i -= len(m.PublicRendezvousSeed)
		copy(dAtA[i:], m.PublicRendezvousSeed)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.PublicRendezvousSeed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestSend_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestSend_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestSend_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OwnMetadata) > 0 {
		i -= len(m.OwnMetadata)
		copy(dAtA[i:], m.OwnMetadata)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.OwnMetadata)))
		i--
		dAtA[i] = 0x12
	}
	if m.Contact != nil {
		{
			size, err := m.Contact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBertytypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestSend_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestSend_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestSend_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestAccept) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestAccept) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestAccept) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestAccept_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestAccept_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestAccept_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestAccept_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestAccept_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestAccept_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestDiscard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestDiscard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestDiscard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestDiscard_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestDiscard_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestDiscard_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequestDiscard_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequestDiscard_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequestDiscard_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactBlock_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactBlock_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactBlock_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactBlock_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactBlock_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactBlock_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactUnblock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactUnblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactUnblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactUnblock_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactUnblock_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactUnblock_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactUnblock_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactUnblock_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactUnblock_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactAliasKeySend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactAliasKeySend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactAliasKeySend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ContactAliasKeySend_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactAliasKeySend_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactAliasKeySend_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactAliasKeySend_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactAliasKeySend_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactAliasKeySend_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupCreate_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupCreate_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupCreate_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupCreate_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupCreate_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupCreate_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupJoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupJoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupJoin_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupJoin_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupJoin_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBertytypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupJoin_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupJoin_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupJoin_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupLeave) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupLeave) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupLeave_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupLeave_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupLeave_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupLeave_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupLeave_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupLeave_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupAliasResolverDisclose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupAliasResolverDisclose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupAliasResolverDisclose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupAliasResolverDisclose_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupAliasResolverDisclose_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupAliasResolverDisclose_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupAliasResolverDisclose_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupAliasResolverDisclose_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupAliasResolverDisclose_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupAdminRoleGrant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupAdminRoleGrant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupAdminRoleGrant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupAdminRoleGrant_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupAdminRoleGrant_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupAdminRoleGrant_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MemberPK) > 0 {
		i -= len(m.MemberPK)
		copy(dAtA[i:], m.MemberPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.MemberPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupAdminRoleGrant_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupAdminRoleGrant_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupAdminRoleGrant_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupInvitationCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupInvitationCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupInvitationCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupInvitationCreate_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupInvitationCreate_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupInvitationCreate_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiMemberGroupInvitationCreate_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMemberGroupInvitationCreate_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiMemberGroupInvitationCreate_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBertytypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMetadataSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMetadataSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMetadataSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AppMetadataSend_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMetadataSend_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMetadataSend_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMetadataSend_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMetadataSend_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMetadataSend_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AppMessageSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessageSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessageSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AppMessageSend_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessageSend_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessageSend_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMessageSend_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessageSend_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessageSend_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GroupMetadataEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMetadataEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMetadataEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBertytypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EventContext != nil {
		{
			size, err := m.EventContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBertytypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMessageEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMessageEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMessageEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Headers != nil {
		{
			size, err := m.Headers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBertytypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EventContext != nil {
		{
			size, err := m.EventContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBertytypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMetadataSubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMetadataSubscribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMetadataSubscribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GroupMetadataSubscribe_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMetadataSubscribe_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMetadataSubscribe_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GoBackwards {
		i--
		if m.GoBackwards {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Until) > 0 {
		i -= len(m.Until)
		copy(dAtA[i:], m.Until)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Until)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Since) > 0 {
		i -= len(m.Since)
		copy(dAtA[i:], m.Since)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Since)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMetadataList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMetadataList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMetadataList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GroupMetadataList_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMetadataList_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMetadataList_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMessageSubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMessageSubscribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMessageSubscribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GroupMessageSubscribe_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMessageSubscribe_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMessageSubscribe_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GoBackwards {
		i--
		if m.GoBackwards {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Until) > 0 {
		i -= len(m.Until)
		copy(dAtA[i:], m.Until)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Until)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Since) > 0 {
		i -= len(m.Since)
		copy(dAtA[i:], m.Since)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Since)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMessageList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMessageList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMessageList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GroupMessageList_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMessageList_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMessageList_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GroupInfo_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfo_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupInfo_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupInfo_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfo_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupInfo_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MemberPK) > 0 {
		i -= len(m.MemberPK)
		copy(dAtA[i:], m.MemberPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.MemberPK)))
		i--
		dAtA[i] = 0x12
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBertytypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivateGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivateGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ActivateGroup_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateGroup_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivateGroup_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivateGroup_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateGroup_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivateGroup_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DeactivateGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeactivateGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeactivateGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DeactivateGroup_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeactivateGroup_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeactivateGroup_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeactivateGroup_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeactivateGroup_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeactivateGroup_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DebugListGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugListGroups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugListGroups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DebugListGroups_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugListGroups_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugListGroups_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DebugListGroups_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugListGroups_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugListGroups_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContactPK) > 0 {
		i -= len(m.ContactPK)
		copy(dAtA[i:], m.ContactPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ContactPK)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupType != 0 {
		i = encodeVarintBertytypes(dAtA, i, uint64(m.GroupType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DebugInspectGroupStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugInspectGroupStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugInspectGroupStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DebugInspectGroupStore_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugInspectGroupStore_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugInspectGroupStore_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogType != 0 {
		i = encodeVarintBertytypes(dAtA, i, uint64(m.LogType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DebugInspectGroupStore_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugInspectGroupStore_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugInspectGroupStore_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0x22
	}
	if m.MetadataEventType != 0 {
		i = encodeVarintBertytypes(dAtA, i, uint64(m.MetadataEventType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ParentCIDs) > 0 {
		for iNdEx := len(m.ParentCIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ParentCIDs[iNdEx])
			copy(dAtA[i:], m.ParentCIDs[iNdEx])
			i = encodeVarintBertytypes(dAtA, i, uint64(len(m.ParentCIDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CID) > 0 {
		i -= len(m.CID)
		copy(dAtA[i:], m.CID)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.CID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShareableContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareableContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareableContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PublicRendezvousSeed) > 0 {
		i -= len(m.PublicRendezvousSeed)
		copy(dAtA[i:], m.PublicRendezvousSeed)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.PublicRendezvousSeed)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PK) > 0 {
		i -= len(m.PK)
		copy(dAtA[i:], m.PK)
		i = encodeVarintBertytypes(dAtA, i, uint64(len(m.PK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBertytypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovBertytypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.AccountPrivateKey)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.AliasPrivateKey)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.PublicRendezvousSeed)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.SecretSig)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.GroupType != 0 {
		n += 1 + sovBertytypes(uint64(m.GroupType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovBertytypes(uint64(m.EventType))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Counter != 0 {
		n += 1 + sovBertytypes(uint64(m.Counter))
	}
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBertytypes(uint64(len(k))) + 1 + len(v) + sovBertytypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovBertytypes(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageHeaders)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if len(m.ParentIDs) > 0 {
		for _, b := range m.ParentIDs {
			l = len(b)
			n += 1 + l + sovBertytypes(uint64(l))
		}
	}
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactAddAliasKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.AliasPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupAddMemberDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.MemberSig)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceSecret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainKey)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovBertytypes(uint64(m.Counter))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupAddDeviceSecret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.DestMemberPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupAddAliasResolver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.AliasResolver)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.AliasProof)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGrantAdminRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.GranteeMemberPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberInitialMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupAddAdditionalRendezvousSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Seed)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupRemoveAdditionalRendezvousSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Seed)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountGroupJoined) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountGroupLeft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountContactRequestDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountContactRequestEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountContactRequestReferenceReset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.PublicRendezvousSeed)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountContactRequestEnqueued) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.OwnMetadata)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountContactRequestSent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountContactRequestReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.ContactRendezvousSeed)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.ContactMetadata)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountContactRequestDiscarded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountContactRequestAccepted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountContactBlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountContactUnblocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstanceExportData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstanceExportData_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstanceExportData_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExportedData)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstanceGetConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstanceGetConfiguration_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstanceGetConfiguration_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.AccountGroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if len(m.Listeners) > 0 {
		for _, s := range m.Listeners {
			l = len(s)
			n += 1 + l + sovBertytypes(uint64(l))
		}
	}
	if m.BleEnabled != 0 {
		n += 1 + sovBertytypes(uint64(m.BleEnabled))
	}
	if m.WifiP2PEnabled != 0 {
		n += 1 + sovBertytypes(uint64(m.WifiP2PEnabled))
	}
	if m.MdnsEnabled != 0 {
		n += 1 + sovBertytypes(uint64(m.MdnsEnabled))
	}
	if m.RelayEnabled != 0 {
		n += 1 + sovBertytypes(uint64(m.RelayEnabled))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestReference_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestReference_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicRendezvousSeed)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestDisable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestDisable_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestDisable_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestEnable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestEnable_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestEnable_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicRendezvousSeed)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestResetReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestResetReference_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestResetReference_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicRendezvousSeed)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestSend_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.OwnMetadata)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestSend_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestAccept) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestAccept_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestAccept_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestDiscard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestDiscard_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactRequestDiscard_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactBlock_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactBlock_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactUnblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactUnblock_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactUnblock_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactAliasKeySend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactAliasKeySend_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactAliasKeySend_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupCreate_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupCreate_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupJoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupJoin_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupJoin_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupLeave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupLeave_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupLeave_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupAliasResolverDisclose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupAliasResolverDisclose_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupAliasResolverDisclose_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupAdminRoleGrant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupAdminRoleGrant_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.MemberPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupAdminRoleGrant_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupInvitationCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupInvitationCreate_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiMemberGroupInvitationCreate_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppMetadataSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppMetadataSend_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppMetadataSend_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppMessageSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppMessageSend_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppMessageSend_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMetadataEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventContext != nil {
		l = m.EventContext.Size()
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMessageEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventContext != nil {
		l = m.EventContext.Size()
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.Headers != nil {
		l = m.Headers.Size()
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMetadataSubscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMetadataSubscribe_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Since)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Until)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.GoBackwards {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMetadataList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMetadataList_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMessageSubscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMessageSubscribe_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Since)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Until)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.GoBackwards {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMessageList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMessageList_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupInfo_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupInfo_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.MemberPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivateGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivateGroup_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivateGroup_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeactivateGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeactivateGroup_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeactivateGroup_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DebugListGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DebugListGroups_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DebugListGroups_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.GroupType != 0 {
		n += 1 + sovBertytypes(uint64(m.GroupType))
	}
	l = len(m.ContactPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DebugInspectGroupStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DebugInspectGroupStore_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.LogType != 0 {
		n += 1 + sovBertytypes(uint64(m.LogType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DebugInspectGroupStore_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CID)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if len(m.ParentCIDs) > 0 {
		for _, b := range m.ParentCIDs {
			l = len(b)
			n += 1 + l + sovBertytypes(uint64(l))
		}
	}
	if m.MetadataEventType != 0 {
		n += 1 + sovBertytypes(uint64(m.MetadataEventType))
	}
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareableContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PK)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.PublicRendezvousSeed)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovBertytypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBertytypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBertytypes(x uint64) (n int) {
	return sovBertytypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPrivateKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPrivateKey = append(m.AccountPrivateKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountPrivateKey == nil {
				m.AccountPrivateKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasPrivateKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasPrivateKey = append(m.AliasPrivateKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AliasPrivateKey == nil {
				m.AliasPrivateKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicRendezvousSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicRendezvousSeed = append(m.PublicRendezvousSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicRendezvousSeed == nil {
				m.PublicRendezvousSeed = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = append(m.Secret[:0], dAtA[iNdEx:postIndex]...)
			if m.Secret == nil {
				m.Secret = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretSig = append(m.SecretSig[:0], dAtA[iNdEx:postIndex]...)
			if m.SecretSig == nil {
				m.SecretSig = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupType", wireType)
			}
			m.GroupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupType |= GroupType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = append(m.Event[:0], dAtA[iNdEx:postIndex]...)
			if m.Event == nil {
				m.Event = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBertytypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBertytypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBertytypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBertytypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBertytypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBertytypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBertytypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBertytypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBertytypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageHeaders", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageHeaders = append(m.MessageHeaders[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageHeaders == nil {
				m.MessageHeaders = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentIDs = append(m.ParentIDs, make([]byte, postIndex-iNdEx))
			copy(m.ParentIDs[len(m.ParentIDs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactAddAliasKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactAddAliasKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactAddAliasKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasPK = append(m.AliasPK[:0], dAtA[iNdEx:postIndex]...)
			if m.AliasPK == nil {
				m.AliasPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupAddMemberDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupAddMemberDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupAddMemberDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPK = append(m.MemberPK[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberPK == nil {
				m.MemberPK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberSig = append(m.MemberSig[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberSig == nil {
				m.MemberSig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceSecret) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceSecret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceSecret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainKey = append(m.ChainKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainKey == nil {
				m.ChainKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupAddDeviceSecret) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupAddDeviceSecret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupAddDeviceSecret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestMemberPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestMemberPK = append(m.DestMemberPK[:0], dAtA[iNdEx:postIndex]...)
			if m.DestMemberPK == nil {
				m.DestMemberPK = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupAddAliasResolver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMemberGroupAddAliasResolver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMemberGroupAddAliasResolver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasResolver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasResolver = append(m.AliasResolver[:0], dAtA[iNdEx:postIndex]...)
			if m.AliasResolver == nil {
				m.AliasResolver = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasProof = append(m.AliasProof[:0], dAtA[iNdEx:postIndex]...)
			if m.AliasProof == nil {
				m.AliasProof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGrantAdminRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMemberGrantAdminRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMemberGrantAdminRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GranteeMemberPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GranteeMemberPK = append(m.GranteeMemberPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GranteeMemberPK == nil {
				m.GranteeMemberPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberInitialMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMemberInitialMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMemberInitialMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPK = append(m.MemberPK[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberPK == nil {
				m.MemberPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupAddAdditionalRendezvousSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupAddAdditionalRendezvousSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupAddAdditionalRendezvousSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seed = append(m.Seed[:0], dAtA[iNdEx:postIndex]...)
			if m.Seed == nil {
				m.Seed = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupRemoveAdditionalRendezvousSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupRemoveAdditionalRendezvousSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupRemoveAdditionalRendezvousSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seed = append(m.Seed[:0], dAtA[iNdEx:postIndex]...)
			if m.Seed == nil {
				m.Seed = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountGroupJoined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountGroupJoined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountGroupJoined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountGroupLeft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountGroupLeft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountGroupLeft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountContactRequestDisabled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountContactRequestDisabled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountContactRequestDisabled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountContactRequestEnabled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountContactRequestEnabled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountContactRequestEnabled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountContactRequestReferenceReset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountContactRequestReferenceReset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountContactRequestReferenceReset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicRendezvousSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicRendezvousSeed = append(m.PublicRendezvousSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicRendezvousSeed == nil {
				m.PublicRendezvousSeed = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountContactRequestEnqueued) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountContactRequestEnqueued: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountContactRequestEnqueued: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &ShareableContact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnMetadata = append(m.OwnMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.OwnMetadata == nil {
				m.OwnMetadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountContactRequestSent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountContactRequestSent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountContactRequestSent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountContactRequestReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountContactRequestReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountContactRequestReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactRendezvousSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactRendezvousSeed = append(m.ContactRendezvousSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactRendezvousSeed == nil {
				m.ContactRendezvousSeed = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactMetadata = append(m.ContactMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactMetadata == nil {
				m.ContactMetadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountContactRequestDiscarded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountContactRequestDiscarded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountContactRequestDiscarded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountContactRequestAccepted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountContactRequestAccepted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountContactRequestAccepted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountContactBlocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountContactBlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountContactBlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountContactUnblocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountContactUnblocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountContactUnblocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceExportData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceExportData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceExportData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceExportData_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceExportData_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedData = append(m.ExportedData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExportedData == nil {
				m.ExportedData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceGetConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceGetConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceGetConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceGetConfiguration_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceGetConfiguration_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPK = append(m.AccountPK[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountPK == nil {
				m.AccountPK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountGroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountGroupPK = append(m.AccountGroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountGroupPK == nil {
				m.AccountGroupPK = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listeners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listeners = append(m.Listeners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BleEnabled", wireType)
			}
			m.BleEnabled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BleEnabled |= InstanceGetConfiguration_SettingState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WifiP2PEnabled", wireType)
			}
			m.WifiP2PEnabled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WifiP2PEnabled |= InstanceGetConfiguration_SettingState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdnsEnabled", wireType)
			}
			m.MdnsEnabled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdnsEnabled |= InstanceGetConfiguration_SettingState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayEnabled", wireType)
			}
			m.RelayEnabled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayEnabled |= InstanceGetConfiguration_SettingState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestReference_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestReference_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicRendezvousSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicRendezvousSeed = append(m.PublicRendezvousSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicRendezvousSeed == nil {
				m.PublicRendezvousSeed = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestDisable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestDisable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestDisable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestDisable_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestDisable_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestEnable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestEnable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestEnable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestEnable_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestEnable_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicRendezvousSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicRendezvousSeed = append(m.PublicRendezvousSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicRendezvousSeed == nil {
				m.PublicRendezvousSeed = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestResetReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestResetReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestResetReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestResetReference_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestResetReference_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicRendezvousSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicRendezvousSeed = append(m.PublicRendezvousSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicRendezvousSeed == nil {
				m.PublicRendezvousSeed = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestSend_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &ShareableContact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnMetadata = append(m.OwnMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.OwnMetadata == nil {
				m.OwnMetadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestSend_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestAccept) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestAccept: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestAccept: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestAccept_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestAccept_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestDiscard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestDiscard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestDiscard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestDiscard_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequestDiscard_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactBlock_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactBlock_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactUnblock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactUnblock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactUnblock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactUnblock_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactUnblock_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactAliasKeySend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactAliasKeySend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactAliasKeySend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactAliasKeySend_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactAliasKeySend_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMemberGroupCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMemberGroupCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupCreate_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupCreate_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMemberGroupJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMemberGroupJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupJoin_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupJoin_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMemberGroupLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMemberGroupLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupLeave_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupLeave_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupAliasResolverDisclose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMemberGroupAliasResolverDisclose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMemberGroupAliasResolverDisclose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupAliasResolverDisclose_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupAliasResolverDisclose_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupAdminRoleGrant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMemberGroupAdminRoleGrant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMemberGroupAdminRoleGrant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupAdminRoleGrant_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPK = append(m.MemberPK[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberPK == nil {
				m.MemberPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupAdminRoleGrant_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupInvitationCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMemberGroupInvitationCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMemberGroupInvitationCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupInvitationCreate_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMemberGroupInvitationCreate_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMetadataSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppMetadataSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppMetadataSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMetadataSend_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMetadataSend_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessageSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppMessageSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppMessageSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessageSend_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessageSend_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMetadataEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMetadataEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMetadataEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventContext == nil {
				m.EventContext = &EventContext{}
			}
			if err := m.EventContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &GroupMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = append(m.Event[:0], dAtA[iNdEx:postIndex]...)
			if m.Event == nil {
				m.Event = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMessageEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMessageEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMessageEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventContext == nil {
				m.EventContext = &EventContext{}
			}
			if err := m.EventContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = &MessageHeaders{}
			}
			if err := m.Headers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMetadataSubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMetadataSubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMetadataSubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMetadataSubscribe_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Since = append(m.Since[:0], dAtA[iNdEx:postIndex]...)
			if m.Since == nil {
				m.Since = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Until", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Until = append(m.Until[:0], dAtA[iNdEx:postIndex]...)
			if m.Until == nil {
				m.Until = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoBackwards", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoBackwards = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMetadataList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMetadataList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMetadataList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMetadataList_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMessageSubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMessageSubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMessageSubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMessageSubscribe_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Since = append(m.Since[:0], dAtA[iNdEx:postIndex]...)
			if m.Since == nil {
				m.Since = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Until", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Until = append(m.Until[:0], dAtA[iNdEx:postIndex]...)
			if m.Until == nil {
				m.Until = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoBackwards", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoBackwards = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMessageList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMessageList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMessageList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMessageList_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfo_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfo_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPK = append(m.MemberPK[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberPK == nil {
				m.MemberPK = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivateGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivateGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateGroup_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateGroup_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeactivateGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeactivateGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeactivateGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeactivateGroup_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeactivateGroup_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugListGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugListGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugListGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugListGroups_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugListGroups_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupType", wireType)
			}
			m.GroupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupType |= GroupType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPK = append(m.ContactPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPK == nil {
				m.ContactPK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugInspectGroupStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugInspectGroupStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugInspectGroupStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugInspectGroupStore_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogType", wireType)
			}
			m.LogType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogType |= DebugInspectGroupLogType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugInspectGroupStore_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CID = append(m.CID[:0], dAtA[iNdEx:postIndex]...)
			if m.CID == nil {
				m.CID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentCIDs = append(m.ParentCIDs, make([]byte, postIndex-iNdEx))
			copy(m.ParentCIDs[len(m.ParentCIDs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataEventType", wireType)
			}
			m.MetadataEventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataEventType |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = append(m.DevicePK[:0], dAtA[iNdEx:postIndex]...)
			if m.DevicePK == nil {
				m.DevicePK = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareableContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareableContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareableContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PK = append(m.PK[:0], dAtA[iNdEx:postIndex]...)
			if m.PK == nil {
				m.PK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicRendezvousSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicRendezvousSeed = append(m.PublicRendezvousSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicRendezvousSeed == nil {
				m.PublicRendezvousSeed = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertytypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertytypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertytypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBertytypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBertytypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBertytypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBertytypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBertytypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBertytypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBertytypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBertytypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBertytypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBertytypes = fmt.Errorf("proto: unexpected end of group")
)
