{
  "swagger": "2.0",
  "info": {
    "title": "bertyprotocol.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/berty.protocol.v1/ProtocolService/ActivateGroup": {
      "post": {
        "summary": "ActivateGroup explicitly opens a group",
        "operationId": "ProtocolService_ActivateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivateGroupReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ActivateGroupRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/AppMessageSend": {
      "post": {
        "summary": "AppMessageSend adds an app event to the message store, the message is encrypted using a derived key and readable by current group members",
        "operationId": "ProtocolService_AppMessageSend",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppMessageSendReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AppMessageSendRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/AppMetadataSend": {
      "post": {
        "summary": "AppMetadataSend adds an app event to the metadata store, the message is encrypted using a symmetric key and readable by future group members",
        "operationId": "ProtocolService_AppMetadataSend",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppMetadataSendReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AppMetadataSendRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/AuthServiceCompleteFlow": {
      "post": {
        "summary": "AuthServiceCompleteFlow Completes an authentication flow",
        "operationId": "ProtocolService_AuthServiceCompleteFlow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AuthServiceCompleteFlowReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AuthServiceCompleteFlowRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/AuthServiceInitFlow": {
      "post": {
        "summary": "AuthServiceInitFlow Initialize an authentication flow",
        "operationId": "ProtocolService_AuthServiceInitFlow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AuthServiceInitFlowReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AuthServiceInitFlowRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ContactAliasKeySend": {
      "post": {
        "summary": "ContactAliasKeySend send an alias key to a contact, the contact will be able to assert that your account is being present on a multi-member group",
        "operationId": "ProtocolService_ContactAliasKeySend",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ContactAliasKeySendReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ContactAliasKeySendRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ContactBlock": {
      "post": {
        "summary": "ContactBlock blocks a contact from sending requests",
        "operationId": "ProtocolService_ContactBlock",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ContactBlockReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ContactBlockRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ContactRequestAccept": {
      "post": {
        "summary": "ContactRequestAccept accepts a contact request",
        "operationId": "ProtocolService_ContactRequestAccept",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ContactRequestAcceptReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ContactRequestAcceptRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ContactRequestDisable": {
      "post": {
        "summary": "ContactRequestDisable disables incoming contact requests",
        "operationId": "ProtocolService_ContactRequestDisable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ContactRequestDisableReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ContactRequestDisableRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ContactRequestDiscard": {
      "post": {
        "summary": "ContactRequestDiscard ignores a contact request, without informing the other user",
        "operationId": "ProtocolService_ContactRequestDiscard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ContactRequestDiscardReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ContactRequestDiscardRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ContactRequestEnable": {
      "post": {
        "summary": "ContactRequestEnable enables incoming contact requests",
        "operationId": "ProtocolService_ContactRequestEnable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ContactRequestEnableReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ContactRequestEnableRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ContactRequestReference": {
      "post": {
        "summary": "ContactRequestReference retrieves the information required to create a reference (types.v1.ie. included in a shareable link) to the current account",
        "operationId": "ProtocolService_ContactRequestReference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ContactRequestReferenceReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ContactRequestReferenceRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ContactRequestResetReference": {
      "post": {
        "summary": "ContactRequestResetReference changes the contact request reference",
        "operationId": "ProtocolService_ContactRequestResetReference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ContactRequestResetReferenceReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ContactRequestResetReferenceRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ContactRequestSend": {
      "post": {
        "summary": "ContactRequestSend attempt to send a contact request",
        "operationId": "ProtocolService_ContactRequestSend",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ContactRequestSendReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ContactRequestSendRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ContactUnblock": {
      "post": {
        "summary": "ContactUnblock unblocks a contact from sending requests",
        "operationId": "ProtocolService_ContactUnblock",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ContactUnblockReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ContactUnblockRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/DeactivateGroup": {
      "post": {
        "summary": "DeactivateGroup closes a group",
        "operationId": "ProtocolService_DeactivateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeactivateGroupReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeactivateGroupRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/DebugGroup": {
      "post": {
        "operationId": "ProtocolService_DebugGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DebugGroupReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DebugGroupRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/DebugInspectGroupStore": {
      "post": {
        "operationId": "ProtocolService_DebugInspectGroupStore",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1DebugInspectGroupStoreReply"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1DebugInspectGroupStoreReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DebugInspectGroupStoreRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/DebugListGroups": {
      "post": {
        "operationId": "ProtocolService_DebugListGroups",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1DebugListGroupsReply"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1DebugListGroupsReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DebugListGroupsRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/GroupInfo": {
      "post": {
        "summary": "GroupInfo retrieves information about a group",
        "operationId": "ProtocolService_GroupInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GroupInfoReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GroupInfoRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/GroupMessageList": {
      "post": {
        "summary": "GroupMessageList replays previous and subscribes to new message events from the group",
        "operationId": "ProtocolService_GroupMessageList",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1GroupMessageEvent"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1GroupMessageEvent"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GroupMessageListRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/GroupMetadataList": {
      "post": {
        "summary": "GroupMetadataList replays previous and subscribes to new metadata events from the group",
        "operationId": "ProtocolService_GroupMetadataList",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1GroupMetadataEvent"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1GroupMetadataEvent"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GroupMetadataListRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/InstanceExportData": {
      "post": {
        "summary": "InstanceExportData exports instance data",
        "operationId": "ProtocolService_InstanceExportData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1InstanceExportDataReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1InstanceExportDataRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/InstanceGetConfiguration": {
      "post": {
        "summary": "InstanceGetConfiguration gets current configuration of this protocol instance",
        "operationId": "ProtocolService_InstanceGetConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1InstanceGetConfigurationReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1InstanceGetConfigurationRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/MultiMemberGroupAdminRoleGrant": {
      "post": {
        "summary": "MultiMemberGroupAdminRoleGrant grants an admin role to a group member",
        "operationId": "ProtocolService_MultiMemberGroupAdminRoleGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupAdminRoleGrantReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupAdminRoleGrantRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/MultiMemberGroupAliasResolverDisclose": {
      "post": {
        "summary": "MultiMemberGroupAliasResolverDisclose discloses your alias resolver key",
        "operationId": "ProtocolService_MultiMemberGroupAliasResolverDisclose",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupAliasResolverDiscloseReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupAliasResolverDiscloseRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/MultiMemberGroupCreate": {
      "post": {
        "summary": "MultiMemberGroupCreate creates a new multi-member group",
        "operationId": "ProtocolService_MultiMemberGroupCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupCreateReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupCreateRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/MultiMemberGroupInvitationCreate": {
      "post": {
        "summary": "MultiMemberGroupInvitationCreate creates an invitation to a multi-member group",
        "operationId": "ProtocolService_MultiMemberGroupInvitationCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupInvitationCreateReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupInvitationCreateRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/MultiMemberGroupJoin": {
      "post": {
        "summary": "MultiMemberGroupJoin joins a multi-member group",
        "operationId": "ProtocolService_MultiMemberGroupJoin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupJoinReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupJoinRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/MultiMemberGroupLeave": {
      "post": {
        "summary": "MultiMemberGroupLeave leaves a multi-member group",
        "operationId": "ProtocolService_MultiMemberGroupLeave",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupLeaveReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MultiMemberGroupLeaveRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ReplicationServiceRegisterGroup": {
      "post": {
        "summary": "ReplicationServiceRegisterGroup Asks a replication service to distribute a group contents",
        "operationId": "ProtocolService_ReplicationServiceRegisterGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReplicationServiceRegisterGroupReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReplicationServiceRegisterGroupRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/ServicesTokenList": {
      "post": {
        "summary": "ServicesTokenList Retrieves the list of services tokens",
        "operationId": "ProtocolService_ServicesTokenList",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1ServicesTokenListReply"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1ServicesTokenListReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ServicesTokenListRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/berty.protocol.v1/ProtocolService/SystemInfo": {
      "post": {
        "operationId": "ProtocolService_SystemInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SystemInfoReply"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemInfoRequest"
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    }
  },
  "definitions": {
    "InstanceGetConfigurationSettingState": {
      "type": "string",
      "enum": [
        "Unknown",
        "Enabled",
        "Disabled",
        "Unavailable"
      ],
      "default": "Unknown"
    },
    "OrbitDBReplicationStatus": {
      "type": "object",
      "properties": {
        "progress": {
          "type": "string",
          "format": "int64"
        },
        "maximum": {
          "type": "string",
          "format": "int64"
        },
        "buffered": {
          "type": "string",
          "format": "int64"
        },
        "queued": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "SystemInfoOrbitDB": {
      "type": "object",
      "properties": {
        "account_metadata": {
          "$ref": "#/definitions/OrbitDBReplicationStatus"
        }
      }
    },
    "SystemInfoP2P": {
      "type": "object",
      "properties": {
        "connected_peers": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "SystemInfoProcess": {
      "type": "object",
      "properties": {
        "rlimit_cur": {
          "type": "string",
          "format": "uint64"
        },
        "num_goroutine": {
          "type": "string",
          "format": "int64"
        },
        "nofile": {
          "type": "string",
          "format": "int64"
        },
        "too_many_open_files": {
          "type": "boolean",
          "format": "boolean"
        },
        "started_at": {
          "type": "string",
          "format": "int64"
        },
        "num_cpu": {
          "type": "string",
          "format": "int64"
        },
        "go_version": {
          "type": "string"
        },
        "operating_system": {
          "type": "string"
        },
        "host_name": {
          "type": "string"
        },
        "arch": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "vcs_ref": {
          "type": "string"
        },
        "self_rusage": {
          "type": "string"
        },
        "children_rusage": {
          "type": "string"
        },
        "rlimit_max": {
          "type": "string",
          "format": "uint64"
        },
        "pid": {
          "type": "string",
          "format": "int64"
        },
        "ppid": {
          "type": "string",
          "format": "int64"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "uid": {
          "type": "string",
          "format": "int64"
        },
        "working_dir": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1ActivateGroupReply": {
      "type": "object"
    },
    "v1ActivateGroupRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        },
        "local_only": {
          "type": "boolean",
          "format": "boolean",
          "title": "local_only will open the group without enabling network interactions\nwith other members"
        }
      }
    },
    "v1AppMessageSendReply": {
      "type": "object"
    },
    "v1AppMessageSendRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "title": "payload is the payload to send"
        }
      }
    },
    "v1AppMetadataSendReply": {
      "type": "object"
    },
    "v1AppMetadataSendRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "title": "payload is the payload to send"
        }
      }
    },
    "v1AuthServiceCompleteFlowReply": {
      "type": "object"
    },
    "v1AuthServiceCompleteFlowRequest": {
      "type": "object",
      "properties": {
        "callback_url": {
          "type": "string"
        }
      }
    },
    "v1AuthServiceInitFlowReply": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "secure_url": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "v1AuthServiceInitFlowRequest": {
      "type": "object",
      "properties": {
        "auth_url": {
          "type": "string"
        }
      }
    },
    "v1ContactAliasKeySendReply": {
      "type": "object"
    },
    "v1ContactAliasKeySendRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "contact_pk is the identifier of the contact to send the alias public key to"
        }
      }
    },
    "v1ContactBlockReply": {
      "type": "object"
    },
    "v1ContactBlockRequest": {
      "type": "object",
      "properties": {
        "contact_pk": {
          "type": "string",
          "format": "byte",
          "title": "contact_pk is the identifier of the contact to block"
        }
      }
    },
    "v1ContactRequestAcceptReply": {
      "type": "object"
    },
    "v1ContactRequestAcceptRequest": {
      "type": "object",
      "properties": {
        "contact_pk": {
          "type": "string",
          "format": "byte",
          "title": "contact_pk is the identifier of the contact to accept the request from"
        }
      }
    },
    "v1ContactRequestDisableReply": {
      "type": "object"
    },
    "v1ContactRequestDisableRequest": {
      "type": "object"
    },
    "v1ContactRequestDiscardReply": {
      "type": "object"
    },
    "v1ContactRequestDiscardRequest": {
      "type": "object",
      "properties": {
        "contact_pk": {
          "type": "string",
          "format": "byte",
          "title": "contact_pk is the identifier of the contact to ignore the request from"
        }
      }
    },
    "v1ContactRequestEnableReply": {
      "type": "object",
      "properties": {
        "public_rendezvous_seed": {
          "type": "string",
          "format": "byte",
          "title": "public_rendezvous_seed is the rendezvous seed used by the current account"
        }
      }
    },
    "v1ContactRequestEnableRequest": {
      "type": "object"
    },
    "v1ContactRequestReferenceReply": {
      "type": "object",
      "properties": {
        "public_rendezvous_seed": {
          "type": "string",
          "format": "byte",
          "title": "public_rendezvous_seed is the rendezvous seed used by the current account"
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "enabled indicates if incoming contact requests are enabled"
        }
      }
    },
    "v1ContactRequestReferenceRequest": {
      "type": "object"
    },
    "v1ContactRequestResetReferenceReply": {
      "type": "object",
      "properties": {
        "public_rendezvous_seed": {
          "type": "string",
          "format": "byte",
          "title": "public_rendezvous_seed is the rendezvous seed used by the current account"
        }
      }
    },
    "v1ContactRequestResetReferenceRequest": {
      "type": "object"
    },
    "v1ContactRequestSendReply": {
      "type": "object"
    },
    "v1ContactRequestSendRequest": {
      "type": "object",
      "properties": {
        "contact": {
          "$ref": "#/definitions/v1ShareableContact",
          "title": "contact is a message describing how to connect to the other account"
        },
        "own_metadata": {
          "type": "string",
          "format": "byte",
          "title": "own_metadata is the identifying metadata that will be shared to the other account"
        }
      }
    },
    "v1ContactUnblockReply": {
      "type": "object"
    },
    "v1ContactUnblockRequest": {
      "type": "object",
      "properties": {
        "contact_pk": {
          "type": "string",
          "format": "byte",
          "title": "contact_pk is the identifier of the contact to unblock"
        }
      }
    },
    "v1DeactivateGroupReply": {
      "type": "object"
    },
    "v1DeactivateGroupRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        }
      }
    },
    "v1DebugGroupReply": {
      "type": "object",
      "properties": {
        "peer_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "peer_ids is the list of peer ids connected to the same group"
        }
      }
    },
    "v1DebugGroupRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        }
      }
    },
    "v1DebugInspectGroupLogType": {
      "type": "string",
      "enum": [
        "DebugInspectGroupLogTypeUndefined",
        "DebugInspectGroupLogTypeMessage",
        "DebugInspectGroupLogTypeMetadata"
      ],
      "default": "DebugInspectGroupLogTypeUndefined"
    },
    "v1DebugInspectGroupStoreReply": {
      "type": "object",
      "properties": {
        "cid": {
          "type": "string",
          "format": "byte",
          "title": "cid is the CID of the IPFS log entry"
        },
        "parent_cids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "parent_cids is the list of the parent entries"
        },
        "metadata_event_type": {
          "$ref": "#/definitions/v1EventType",
          "title": "event_type metadata event type if subscribed to metadata events"
        },
        "device_pk": {
          "type": "string",
          "format": "byte",
          "title": "device_pk is the public key of the device signing the entry"
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "title": "payload is the un encrypted entry payload if available"
        }
      }
    },
    "v1DebugInspectGroupStoreRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        },
        "log_type": {
          "$ref": "#/definitions/v1DebugInspectGroupLogType",
          "title": "log_type is the log to inspect"
        }
      }
    },
    "v1DebugListGroupsReply": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the public key of the group"
        },
        "group_type": {
          "$ref": "#/definitions/v1GroupType",
          "title": "group_type is the type of the group"
        },
        "contact_pk": {
          "type": "string",
          "format": "byte",
          "title": "contact_pk is the contact public key if appropriate"
        }
      }
    },
    "v1DebugListGroupsRequest": {
      "type": "object"
    },
    "v1EventContext": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "byte",
          "title": "id is the CID of the underlying OrbitDB event"
        },
        "parent_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "id are the the CIDs of the underlying parents of the OrbitDB event"
        },
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk receiving the event"
        }
      },
      "title": "EventContext adds context (its id and its parents) to an event"
    },
    "v1EventType": {
      "type": "string",
      "enum": [
        "EventTypeUndefined",
        "EventTypeGroupMemberDeviceAdded",
        "EventTypeGroupDeviceSecretAdded",
        "EventTypeAccountGroupJoined",
        "EventTypeAccountGroupLeft",
        "EventTypeAccountContactRequestDisabled",
        "EventTypeAccountContactRequestEnabled",
        "EventTypeAccountContactRequestReferenceReset",
        "EventTypeAccountContactRequestOutgoingEnqueued",
        "EventTypeAccountContactRequestOutgoingSent",
        "EventTypeAccountContactRequestIncomingReceived",
        "EventTypeAccountContactRequestIncomingDiscarded",
        "EventTypeAccountContactRequestIncomingAccepted",
        "EventTypeAccountContactBlocked",
        "EventTypeAccountContactUnblocked",
        "EventTypeContactAliasKeyAdded",
        "EventTypeMultiMemberGroupAliasResolverAdded",
        "EventTypeMultiMemberGroupInitialMemberAnnounced",
        "EventTypeMultiMemberGroupAdminRoleGranted",
        "EventTypeAccountServiceTokenAdded",
        "EventTypeAccountServiceTokenRemoved",
        "EventTypeGroupMetadataPayloadSent"
      ],
      "default": "EventTypeUndefined",
      "title": "- EventTypeUndefined: EventTypeUndefined indicates that the value has not been set. Should not happen.\n - EventTypeGroupMemberDeviceAdded: EventTypeGroupMemberDeviceAdded indicates the payload includes that a member has added their device to the group\n - EventTypeGroupDeviceSecretAdded: EventTypeGroupDeviceSecretAdded indicates the payload includes that a member has sent their device secret to another member\n - EventTypeAccountGroupJoined: EventTypeAccountGroupJoined indicates the payload includes that the account has joined a group\n - EventTypeAccountGroupLeft: EventTypeAccountGroupLeft indicates the payload includes that the account has left a group\n - EventTypeAccountContactRequestDisabled: EventTypeAccountContactRequestDisabled indicates the payload includes that the account has disabled incoming contact requests\n - EventTypeAccountContactRequestEnabled: EventTypeAccountContactRequestEnabled indicates the payload includes that the account has enabled incoming contact requests\n - EventTypeAccountContactRequestReferenceReset: EventTypeAccountContactRequestReferenceReset indicates the payload includes that the account has a new contact request rendezvous seed\n - EventTypeAccountContactRequestOutgoingEnqueued: EventTypeAccountContactRequestEnqueued indicates the payload includes that the account will attempt to send a new contact request\n - EventTypeAccountContactRequestOutgoingSent: EventTypeAccountContactRequestSent indicates the payload includes that the account has sent a contact request\n - EventTypeAccountContactRequestIncomingReceived: EventTypeAccountContactRequestReceived indicates the payload includes that the account has received a contact request\n - EventTypeAccountContactRequestIncomingDiscarded: EventTypeAccountContactRequestIncomingDiscarded indicates the payload includes that the account has ignored a contact request\n - EventTypeAccountContactRequestIncomingAccepted: EventTypeAccountContactRequestAccepted indicates the payload includes that the account has accepted a contact request\n - EventTypeAccountContactBlocked: EventTypeAccountContactBlocked indicates the payload includes that the account has blocked a contact\n - EventTypeAccountContactUnblocked: EventTypeAccountContactUnblocked indicates the payload includes that the account has unblocked a contact\n - EventTypeContactAliasKeyAdded: EventTypeContactAliasKeyAdded indicates the payload includes that the contact group has received an alias key\n - EventTypeMultiMemberGroupAliasResolverAdded: EventTypeMultiMemberGroupAliasResolverAdded indicates the payload includes that a member of the group sent their alias proof\n - EventTypeMultiMemberGroupInitialMemberAnnounced: EventTypeMultiMemberGroupInitialMemberAnnounced indicates the payload includes that a member has authenticated themselves as the group owner\n - EventTypeMultiMemberGroupAdminRoleGranted: EventTypeMultiMemberGroupAdminRoleGranted indicates the payload includes that an admin of the group granted another member as an admin\n - EventTypeAccountServiceTokenAdded: EventTypeAccountServiceTokenAdded indicates that a new service provider has been registered for this account\n - EventTypeAccountServiceTokenRemoved: EventTypeAccountServiceTokenRemoved indicates that a service provider is not available anymore\n - EventTypeGroupMetadataPayloadSent: EventTypeGroupMetadataPayloadSent indicates the payload includes an app specific event, unlike messages stored on the message store it is encrypted using a static key"
    },
    "v1Group": {
      "type": "object",
      "properties": {
        "public_key": {
          "type": "string",
          "format": "byte",
          "title": "public_key is the identifier of the group, it signs the group secret and the initial member of a multi-member group"
        },
        "secret": {
          "type": "string",
          "format": "byte",
          "title": "secret is the symmetric secret of the group, which is used to encrypt the metadata"
        },
        "secret_sig": {
          "type": "string",
          "format": "byte",
          "title": "secret_sig is the signature of the secret used to ensure the validity of the group"
        },
        "group_type": {
          "$ref": "#/definitions/v1GroupType",
          "title": "group_type specifies the type of the group, used to determine how device secrets are generated"
        },
        "sign_pub": {
          "type": "string",
          "format": "byte",
          "title": "sign_pub is the signature public key used to verify entries, not required when secret and secret_sig are provided"
        }
      },
      "title": "Group define a group and is enough to invite someone to it"
    },
    "v1GroupInfoReply": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group",
          "title": "group is the group invitation, containing the group pk and its type"
        },
        "member_pk": {
          "type": "string",
          "format": "byte",
          "title": "member_pk is the identifier of the current member in the group"
        },
        "device_pk": {
          "type": "string",
          "format": "byte",
          "title": "member_pk is the identifier of the current device in the group"
        }
      }
    },
    "v1GroupInfoRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        },
        "contact_pk": {
          "type": "string",
          "format": "byte",
          "title": "contact_pk is the identifier of the contact"
        }
      }
    },
    "v1GroupMessageEvent": {
      "type": "object",
      "properties": {
        "event_context": {
          "$ref": "#/definitions/v1EventContext",
          "title": "event_context contains context information about the event"
        },
        "headers": {
          "$ref": "#/definitions/v1MessageHeaders",
          "title": "headers contains headers of the secure message"
        },
        "message": {
          "type": "string",
          "format": "byte",
          "title": "message contains the secure message payload"
        }
      }
    },
    "v1GroupMessageListRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        },
        "since_id": {
          "type": "string",
          "format": "byte",
          "title": "since is the lower ID bound used to filter events\nif not set, will return events since the beginning"
        },
        "since_now": {
          "type": "boolean",
          "format": "boolean",
          "title": "since_now will list only new event to come\nsince_id must not be set"
        },
        "until_id": {
          "type": "string",
          "format": "byte",
          "title": "until is the upper ID bound used to filter events\nif not set, will subscribe to new events to come"
        },
        "until_now": {
          "type": "boolean",
          "format": "boolean",
          "title": "until_now will not list new event to come\nuntil_id must not be set"
        },
        "reverse_order": {
          "type": "boolean",
          "format": "boolean",
          "title": "reverse_order indicates whether the previous events should be returned in\nreverse chronological order"
        }
      }
    },
    "v1GroupMetadata": {
      "type": "object",
      "properties": {
        "event_type": {
          "$ref": "#/definitions/v1EventType",
          "title": "event_type defines which event type is used"
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "title": "the serialization depends on event_type, event is symmetrically encrypted"
        },
        "sig": {
          "type": "string",
          "format": "byte",
          "title": "sig is the signature of the payload, it depends on the event_type for the used key"
        }
      },
      "title": "GroupMetadata is used in GroupEnvelope and only readable by invited group members"
    },
    "v1GroupMetadataEvent": {
      "type": "object",
      "properties": {
        "event_context": {
          "$ref": "#/definitions/v1EventContext",
          "title": "event_context contains context information about the event"
        },
        "metadata": {
          "$ref": "#/definitions/v1GroupMetadata",
          "title": "metadata contains the newly available metadata"
        },
        "event": {
          "type": "string",
          "format": "byte",
          "title": "event_clear clear bytes for the event"
        }
      }
    },
    "v1GroupMetadataListRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        },
        "since_id": {
          "type": "string",
          "format": "byte",
          "title": "since is the lower ID bound used to filter events\nif not set, will return events since the beginning"
        },
        "since_now": {
          "type": "boolean",
          "format": "boolean",
          "title": "since_now will list only new event to come\nsince_id must not be set"
        },
        "until_id": {
          "type": "string",
          "format": "byte",
          "title": "until is the upper ID bound used to filter events\nif not set, will subscribe to new events to come"
        },
        "until_now": {
          "type": "boolean",
          "format": "boolean",
          "title": "until_now will not list new event to come\nuntil_id must not be set"
        },
        "reverse_order": {
          "type": "boolean",
          "format": "boolean",
          "title": "reverse_order indicates whether the previous events should be returned in\nreverse chronological order"
        }
      }
    },
    "v1GroupType": {
      "type": "string",
      "enum": [
        "GroupTypeUndefined",
        "GroupTypeAccount",
        "GroupTypeContact",
        "GroupTypeMultiMember"
      ],
      "default": "GroupTypeUndefined",
      "description": " - GroupTypeUndefined: GroupTypeUndefined indicates that the value has not been set. For example, happens if group is replicated.\n - GroupTypeAccount: GroupTypeAccount is the group managing an account, available to all its devices.\n - GroupTypeContact: GroupTypeContact is the group created between two accounts, available to all their devices.\n - GroupTypeMultiMember: GroupTypeMultiMember is a group containing an undefined number of members."
    },
    "v1InstanceExportDataReply": {
      "type": "object",
      "properties": {
        "exported_data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1InstanceExportDataRequest": {
      "type": "object"
    },
    "v1InstanceGetConfigurationReply": {
      "type": "object",
      "properties": {
        "account_pk": {
          "type": "string",
          "format": "byte",
          "title": "account_pk is the public key of the current account"
        },
        "device_pk": {
          "type": "string",
          "format": "byte",
          "title": "device_pk is the public key of the current device"
        },
        "account_group_pk": {
          "type": "string",
          "format": "byte",
          "title": "account_group_pk is the public key of the account group"
        },
        "peer_id": {
          "type": "string"
        },
        "listeners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ble_enabled": {
          "$ref": "#/definitions/InstanceGetConfigurationSettingState"
        },
        "wifi_p2p_enabled": {
          "$ref": "#/definitions/InstanceGetConfigurationSettingState"
        },
        "mdns_enabled": {
          "$ref": "#/definitions/InstanceGetConfigurationSettingState"
        },
        "relay_enabled": {
          "$ref": "#/definitions/InstanceGetConfigurationSettingState"
        }
      }
    },
    "v1InstanceGetConfigurationRequest": {
      "type": "object"
    },
    "v1MessageHeaders": {
      "type": "object",
      "properties": {
        "counter": {
          "type": "string",
          "format": "uint64",
          "title": "counter is the current counter value for the specified device"
        },
        "device_pk": {
          "type": "string",
          "format": "byte",
          "title": "device_pk is the public key of the device sending the message"
        },
        "sig": {
          "type": "string",
          "format": "byte",
          "title": "sig is the signature of the encrypted message using the device's private key"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "metadata allow to pass custom informations"
        }
      },
      "title": "MessageHeaders is used in MessageEnvelope and only readable by invited group members"
    },
    "v1MultiMemberGroupAdminRoleGrantReply": {
      "type": "object"
    },
    "v1MultiMemberGroupAdminRoleGrantRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        },
        "member_pk": {
          "type": "string",
          "format": "byte",
          "title": "member_pk is the identifier of the member which will be granted the admin role"
        }
      }
    },
    "v1MultiMemberGroupAliasResolverDiscloseReply": {
      "type": "object"
    },
    "v1MultiMemberGroupAliasResolverDiscloseRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        }
      }
    },
    "v1MultiMemberGroupCreateReply": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the newly created group"
        }
      }
    },
    "v1MultiMemberGroupCreateRequest": {
      "type": "object"
    },
    "v1MultiMemberGroupInvitationCreateReply": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group",
          "title": "group is the invitation to the group"
        }
      }
    },
    "v1MultiMemberGroupInvitationCreateRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the group"
        }
      }
    },
    "v1MultiMemberGroupJoinReply": {
      "type": "object"
    },
    "v1MultiMemberGroupJoinRequest": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group",
          "title": "group is the information of the group to join"
        }
      }
    },
    "v1MultiMemberGroupLeaveReply": {
      "type": "object"
    },
    "v1MultiMemberGroupLeaveRequest": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1ReplicationServiceRegisterGroupReply": {
      "type": "object"
    },
    "v1ReplicationServiceRegisterGroupRequest": {
      "type": "object",
      "properties": {
        "token_id": {
          "type": "string"
        },
        "group_pk": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1ServiceToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "authentication_url": {
          "type": "string"
        },
        "supported_services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ServiceTokenSupportedService"
          }
        },
        "expiration": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ServiceTokenSupportedService": {
      "type": "object",
      "properties": {
        "service_type": {
          "type": "string"
        },
        "service_endpoint": {
          "type": "string"
        }
      }
    },
    "v1ServicesTokenListReply": {
      "type": "object",
      "properties": {
        "token_id": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/v1ServiceToken"
        }
      }
    },
    "v1ServicesTokenListRequest": {
      "type": "object"
    },
    "v1ShareableContact": {
      "type": "object",
      "properties": {
        "pk": {
          "type": "string",
          "format": "byte",
          "title": "pk is the account to send a contact request to"
        },
        "public_rendezvous_seed": {
          "type": "string",
          "format": "byte",
          "title": "public_rendezvous_seed is the rendezvous seed used by the account to send a contact request to"
        },
        "metadata": {
          "type": "string",
          "format": "byte",
          "title": "metadata is the metadata specific to the app to identify the contact for the request"
        }
      }
    },
    "v1SystemInfoReply": {
      "type": "object",
      "properties": {
        "process": {
          "$ref": "#/definitions/SystemInfoProcess"
        },
        "p2p": {
          "$ref": "#/definitions/SystemInfoP2P"
        },
        "orbitdb": {
          "$ref": "#/definitions/SystemInfoOrbitDB"
        },
        "warns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SystemInfoRequest": {
      "type": "object"
    }
  }
}
