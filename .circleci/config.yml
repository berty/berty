version: 2.1

orbs:
  retry: moul/retry@0.6.0
  codecov: codecov/codecov@1.0.5
  tools: gotest/tools@0.0.9

executors:
  golang:
    working_directory: /go/src/berty.tech
    environment:
      GOPATH: /go
      GOTEST_TIMEOUT: 5m
      GO111MODULE: "on"
      TEST_OPTS: "-coverprofile=profile.out -covermode=count"
    docker:
      - image: circleci/golang:1.12

  linter:
    working_directory: /go/src/berty.tech
    environment:
      GOPATH: /go
      GOTEST_TIMEOUT: 5m
      GO111MODULE: "on"
      TEST_OPTS: "-coverprofile=profile.out -covermode=count"
    docker:
      - image: bertytech/linter:v4

  android:
    working_directory: ~/go/src/berty.tech
    environment:
      FASTLANE_SKIP_UPDATE_CHECK: 1
      FASTLANE_HIDE_CHANGELOG: 1
      FL_BUILDLOG_PATH: /tmp/fl/log/build/android
      BUILD: /tmp/fl/build
    docker:
      - image: bertytech/android-ci:v5

  protoc:
    docker:
      - image: bertytech/protoc:v14
    working_directory: /go/src/berty.tech
    environment:
      GOPATH: /go

  node:
    working_directory: ~/go/src/berty.tech
    docker:
      - image: circleci/node:latest

  docker:
    docker:
      - image: docker:18.09.6-git

  macos:
    working_directory: ~/go/src/berty.tech
    macos:
      xcode: "10.2.1"
    environment:
      FASTLANE_SKIP_UPDATE_CHECK: 1
      FASTLANE_HIDE_CHANGELOG: 1
      SCAN_OUTPUT_DIRECTORY: /tmp/fl/log/scan
      GYM_OUTPUT_DIRECTORY: /tmp/fl/log/gym
      FL_BUILDLOG_PATH: /tmp/fl/log/build/ios
      SCAN_INCLUDE_SIMULATOR_LOGS: true
      BUILD: /tmp/fl/build
    shell: /bin/bash --login -o pipefail


# Generic commands / workflows
commands:
  git_version:
    steps:
      - run:
            name: git version (via sha1 hash)
            command: |
              mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
              cd ~/go/src/berty.tech || cd /go/src/berty.tech || cd .
              git fetch origin master
              git rev-parse origin/master > /tmp/git_version
              git rev-parse HEAD~1 > /tmp/last_version
              echo $CIRCLE_SHA1 > /tmp/current_version

  install_gomobile:
    description: "install gomobile"
    steps:
      - run:
          name: install gomobile
          command: |
            cd ~/go/src/berty.tech/core/platform/mobile && make deps

  install_go:
    description: "install golang"
    parameters:
      version:
        type: string
        default: "1.12"
    steps:
      - run:
          name: install-go
          command: |
            if [ ! -f ~/go-install/go/bin/go ]; then
              cd ~ && git clone https://github.com/udhos/update-golang
              cd ~/update-golang && mkdir ~/go-install && sudo DESTINATION=~/go-install RELEASE=<< parameters.version >> ./update-golang.sh
            fi
            echo "export PATH=~/go-install/go/bin/:~/go/bin:$PATH" >> $BASH_ENV

  prepare:
    description: "prepare current job"
    steps:
      - checkout
      - retry/install
      - git_version
      - run:
          name: setup environment
          command: |
            echo "export PATH=$GOPATH/src/berty.tech/client/node_modules/.bin/:/usr/local/go/bin/:$GOPATH/bin:$PATH" >> $BASH_ENV
            echo 'export COMPOSE_PROJECT_NAME=integration-$CIRCLE_BUILD_NUM-$CIRCLE_JOB' >> $BASH_ENV

  generate_restore_cache:
    description: "restore generate cache"
    steps:
      - restore_cache:
          keys:
            - v0-generate-{{.Branch}}-{{.Revision}}
            - v0-generate-{{.Branch}}-
            - v0-generate-master-

  generate_save_cache:
    description: "save generate cache"
    steps:
      - save_cache:
          key: v0-generate-{{.Branch}}-{{.Revision}}
          paths:
            - ~/.cache               # user
            - ~/.cache/.npm/_cacache # npm
            - /go/pkg/mod/cache      # cache

  web_restore_cache:
    description: "restore web cache"
    steps:
      - restore_cache:
          keys:
            - v0-web-{{.Branch}}-{{.Revision}}
            - v0-web-{{.Branch}}-
            - v0-web-master-

  web_save_cache:
    description: "save web cache"
    steps:
      - save_cache:
          key: v0-web-{{.Branch}}-{{.Revision}}
          paths:
            - ~/.cache                                           # user
            - ~/.cache/.npm/_cacache                             # npm
            - ~/go/src/berty.tech/client/web/build               # web
            - ~/go/src/berty.tech/client/web/node_modules/.cache # babel

  android_restore_cache:
    description: "restore android << parameters.type >> cache"
    parameters:
      type:
        type: string
        default: common
    steps:
      - restore_cache:
          keys:
            - v0-android-<< parameters.type >>-{{.Branch}}-{{.Revision}}
            - v0-android-<< parameters.type >>-{{.Branch}}-
            - v0-android-<< parameters.type >>-master-

  android_save_cache:
    description: "save android << parameters.type >> cache"
    parameters:
      type:
        type: string
        default: common
    steps:
      - save_cache:
          key: v0-android-<< parameters.type >>-{{.Branch}}-{{.Revision}}
          paths:
            # user
            - ~/.cache
            # npm
            - ~/.cache/.npm/_cacache
            # lerna
            - ~/go/src/berty.tech/client/node_modules
            # bundle
            - ~/go/src/berty.tech/client/vendor/bundle
            # gomobile
            - ~/go/pkg
            # android
            - ~/.android/build-cache
            - ~/.android/build-cache.lock
            - ~/.android/cache
            # gradle
            - ~/.gradle/caches

  ios_restore_cache:
    description: "restore ios << parameters.type >> cache"
    parameters:
      type:
        type: string
        default: common
    steps:
      - restore_cache:
          keys:
            - v0-ios-<< parameters.type >>-{{.Branch}}-{{.Revision}}
            - v0-ios-<< parameters.type >>-{{.Branch}}-
            - v0-ios-<< parameters.type >>-master-

  ios_save_cache:
    description: "save ios << parameters.type >> cache"
    parameters:
      type:
        type: string
        default: common
    steps:
      - save_cache:
          key: v0-ios-<< parameters.type >>-{{.Branch}}-{{.Revision}}
          paths:
            # user
            - ~/Library/Caches
            # npm
            - ~/.cache/.npm/_cacache
            # lerna
            - ~/go/src/berty.tech/client/node_modules
            # bundle
            - ~/go/src/berty.tech/client/vendor/bundle
            # gomobile
            - ~/go/pkg
            - ~/go/src/berty.tech/client/ios/Core
            # xcode
            - ~/Library/Developer/Xcode/DerivedData
            # ios
            - ~/go/src/berty.tech/client/ios/build
            - ~/go/src/berty.tech/client/ios/Pods

  mac_restore_cache:
    description: "restore mac << parameters.type >> cache"
    parameters:
      type:
        type: string
        default: common
    steps:
      - restore_cache:
          keys:
            - v0-mac-<< parameters.type >>-{{.Branch}}-{{.Revision}}
            - v0-mac-<< parameters.type >>-{{.Branch}}-
            - v0-mac-<< parameters.type >>-master-

  mac_save_cache:
    description: "save mac << parameters.type >> cache"
    parameters:
      type:
        type: string
        default: common
    steps:
      - save_cache:
          key: v0-mac-<< parameters.type >>-{{.Branch}}-{{.Revision}}
          paths:
            # user
            - ~/Library/Caches
            # npm
            - ~/.cache/.npm/_cacache
            # lerna
            - ~/go/src/berty.tech/client/node_modules
            # go
            - ~/go/pkg
            # bundler
            - /usr/local/bin/dylibbundler
            - /usr/local/Cellar/dylibbundler

jobs:
  lint:
    executor: linter
    steps:
      - prepare
      - restore_cache:
          keys:
            - v2-go-cache
      - run:
          name: fetch deps
          command: |
            cd core
            retry -m 3 go mod download
      - run:
          name: prepare CI
          command: make _ci_prepare
      - run:
          name: lint
          command: retry -m 3 make lint
      - save_cache:
          key: v2-go-cache
          paths:
            - "/go/pkg"

  generate:
    executor: protoc
    steps:
      - prepare
      - setup_remote_docker
      - generate_restore_cache
      - run:
          name: make generate_local
          command: |
            # 1. checkout
            # 2. generate prepare
            # 3. generate
            # 4. ignore go.mod (this file regularly changes with useless information (adding `// indirect`)
            # 5. check if files changed
            cd core
            retry -m 5 -t 300 sh -xec ' \
              git checkout . && \
              make clean && \
              make generate_prepare && \
              make generate_local && \
              git checkout go.mod && \
              git status | cat && \
              git diff -w | cat && \
              git diff-index -w --quiet HEAD -- \
             '
            # IDEA: diff-index -w is not working as expected, maybe we should ignore some of the parts of the output
            # IDEA: try to pass a `goimports -w -s` on files listed in `git diff-index` output to remove whitespaces
      - generate_save_cache

  docker_build:
    executor: docker
    steps:
      - run:
          name: install ca-certificates
          command: apk --no-cache add openssl make

      - prepare
      - setup_remote_docker:
          version: 18.09.3

      - restore_cache:
          keys:
            - docker-berty-{{.Branch}}-{{.Revision}}
            - docker-berty-{{.Branch}}-
            - docker-berty-master-

      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /tmp/caches/berty.tar | true

      - run:
          name: Build application Docker image
          command: retry -m 3 docker build -t bertytech/berty .

      - run:
          name: Run application within Docker
          command: retry -m 3 docker run --rm bertytech/berty daemon --init-only --no-p2p

      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /tmp/caches
            docker save -o /tmp/caches/berty.tar bertytech/berty

      - run:
          name: Push image to docker hub
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker push bertytech/berty:latest
              cd service/push && \
                make push fcm-api-key=$FCM_API_KEY apns-private-key=$APNS_PRIVATE_KEY && \
                cd -
              docker logout
            fi

      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /tmp/caches
            docker save -o /tmp/caches/berty.tar bertytech/berty

      - git_version
      - save_cache:
          key: docker-berty-{{.Branch}}-{{.Revision}}
          paths:
            - /tmp/caches/berty.tar

  core_go_test:
    executor: golang
    steps:
      - prepare
      - restore_cache:
          keys:
            - v1-go-cache
      - run:
          name: prepare CI
          command: |
            make _ci_prepare
            mkdir -p /tmp/test-results
            go get github.com/jstemmer/go-junit-report
      - run:
          name: install openssl 1.0.x
          command: |
            sudo apt-get update
            sudo apt-get install libssl-dev
      - run:
          name: install core
          command: |
            cd core
            BUILD_MODE="ci-${CIRCLE_BRANCH}" retry -m 3 make install
      - run:
          name: berty version
          command: berty --version
      - run:
          name: test core
          command: |
            cd core
            TEST_SLEEP_BETWEEN_STEPS=1s TEST_OPTS="$TEST_OPTS" retry -m 5 make test | tee /tmp/test-results/go-test-report.out
      - run:
          name: integration core
          command: |
            cd core
            retry -m 3 make integration
      - run:
          name: junit-report
          command: go-junit-report < /tmp/test-results/go-test-report.out > /tmp/test-results/go-test-report.xml
      - save_cache:
          key: v1-go-cache
          paths:
            - "/go/pkg"
      - run:
          name: aggretate coverage
          command: |
            cat `find . -name profile.out` > coverage.txt
      - codecov/upload:
          file: coverage.txt
      - store_test_results:
          path: /tmp/test-results

  android_staff:
    executor: android
    steps:

      - prepare
      - android_restore_cache:
          type: staff

      - run:
          name: make deps
          working_directory: ~/go/src/berty.tech/client
          command: retry -m 3 make deps.lerna

      - run:
          name: gomobile android build
          working_directory: ~/go/src/berty.tech/core/platform/mobile
          command: BUILD_MODE=ci-${CIRCLE_BRANCH} retry -m 3 make build.android

      - run:
          name: install bundle
          working_directory: ~/go/src/berty.tech/client/
          command: |
            bundle check || retry -m 3 bundle install --path vendor/bundle

      - run:
          name: patch android repo
          working_directory: ~/go/src/berty.tech/client
          command: make patch.android

      - run:
          name: set version
          working_directory: ~/go/src/berty.tech/client
          command: make version.android

      - run:
          name: set name
          command: |
            [[ ! -z "${CIRCLE_PR_NUMBER}" ]] && echo "export ANDROID_CUSTOM_NAME='Berty @${CIRCLE_PR_NUMBER}'" >> $BASH_ENV || true

      - run:
          name: add environment and google service
          working_directory: ~/go/src/berty.tech/client
          command: |
            echo $RN_ENVIRONMENT > .environment
            echo $GOOGLE_SERVICES | base64 -d > android/app/google-services.json

      - run:
          name: build app
          working_directory: ~/go/src/berty.tech/client
          command: . $BASH_ENV; retry -m 3 make fastlane.android.staff

      - store_artifacts:
          path: /tmp/fl

      - android_save_cache:
          type: staff

  android_yolo:
    executor: android
    steps:

      - prepare
      - android_restore_cache:
          type: yolo

      - run:
          name: make deps
          working_directory: ~/go/src/berty.tech/client
          command: retry -m 3 make deps.lerna

      - run:
          name: gomobile android build
          working_directory: ~/go/src/berty.tech/core/platform/mobile
          command: BUILD_MODE=ci-${CIRCLE_BRANCH} retry -m 3 make build.android

      - run:
          name: install bundle
          working_directory: ~/go/src/berty.tech/client
          command: |
            bundle check || retry -m 3 bundle install --path vendor/bundle

      - run:
          name: patch android repo
          working_directory: ~/go/src/berty.tech/client
          command: make patch.android

      - run:
          name: set version
          working_directory: ~/go/src/berty.tech/client
          command: make version.android

      - run:
          name: add environment and google service
          working_directory: ~/go/src/berty.tech/client
          command: |
            echo $RN_ENVIRONMENT > .environment
            echo $GOOGLE_SERVICES | base64 -d > android/app/google-services.json

      - run:
          name: build app
          working_directory: ~/go/src/berty.tech/client
          command: retry -m 3 make fastlane.android.yolo

      - store_artifacts:
          path: /tmp/fl

      - android_save_cache:
          type: yolo

  ios_staff:
    executor: macos
    steps:
      - run:
          name: set Ruby version
          command: echo "ruby-2.4" > ~/.ruby-version

      - prepare
      - ios_restore_cache:
          type: staff

      - run:
          name: make deps
          working_directory: ~/go/src/berty.tech/client
          command: retry -m 3 make deps.lerna

      - install_go
      - install_gomobile
      - run:
          name: install core
          working_directory: ~/go/src/berty.tech/core/platform/mobile
          command: BUILD_MODE=ci-${CIRCLE_BRANCH} retry -m 3 make build.ios

      - run:
          name: install bundle
          working_directory: ~/go/src/berty.tech/client
          command: bundle check || retry -m 3 bundle install --path vendor/bundle

      - run:
          name: set version
          working_directory: ~/go/src/berty.tech/client
          command: make version.ios

      - run:
          name: add environment
          working_directory: ~/go/src/berty.tech/client
          command: echo $RN_ENVIRONMENT > .environment

      - run:
          name: build app
          working_directory: ~/go/src/berty.tech/client
          command: |
            [[ ! -z "${CIRCLE_PR_NUMBER}" ]] && IOS_CUSTOM_NAME="Berty @${CIRCLE_PR_NUMBER}" make appname.ios || true
            make fastlane.setup_circle
            retry -m 3 make fastlane.ios.adhoc

      - store_artifacts:
          path: /tmp/fl

      - ios_save_cache:
          type: staff

  # ios_staff_test:
  #   executor: macos
  #   steps:
  #     - run:
  #         name: set Ruby version
  #         command: echo "ruby-2.4" > ~/.ruby-version

  #     - prepare
  #     - ios_restore_cache:
  #         type: staff-test

  #     - run:
  #         name: make deps
  #         working_directory: ~/go/src/berty.tech/client
  #         command: retry -m 3 make deps.lerna

  #     - install_go
  #     - install_gomobile
  #     - run:
  #         name: install core
  #         working_directory: ~/go/src/berty.tech/core/platform/mobile
  #         command: BUILD_MODE=ci-${CIRCLE_BRANCH} retry -m 3 make build.ios

  #     - run:
  #         name: install bundle
  #         working_directory: ~/go/src/berty.tech/client
  #         command: bundle check || retry -m 3 bundle install --path vendor/bundle

  #     - run:
  #         name: set version
  #         working_directory: ~/go/src/berty.tech/client
  #         command: make version.ios

  #     - run:
  #         name: add environment
  #         working_directory: ~/go/src/berty.tech/client
  #         command: echo $RN_ENVIRONMENT > .environment

  #     - run:
  #         name: globally install clis needed for integration tests
  #         command: npm i -g cavy-cli react-native-cli

  #     - run:
  #         name: prepare integration tests
  #         working_directory: ~/go/src/berty.tech/client
  #         command: |
  #           make deps.ios

  #     - run:
  #         name: run integration tests
  #         working_directory: ~/go/src/berty.tech/client
  #         command: |
  #           ulimit -a
  #           ulimit -n 16384 && make test.adhoc.ios

  #     - ios_save_cache:
  #         type: staff-test

  ios_yolo:
    executor: macos
    steps:
      - run:
          name: set Ruby version
          command: echo "ruby-2.4" > ~/.ruby-version

      - prepare
      - ios_restore_cache:
          type: yolo

      - run:
          name: make deps
          working_directory: ~/go/src/berty.tech/client
          command: retry -m 3 make deps.lerna

      - install_go
      - install_gomobile

      - run:
          name: install core
          working_directory: ~/go/src/berty.tech/core/platform/mobile
          command: |
            BUILD_MODE=ci-${CIRCLE_BRANCH} retry -m 3 make build.ios

      - run:
          name: install bundle
          working_directory: ~/go/src/berty.tech/client
          command: bundle check || retry -m 3 bundle install --path vendor/bundle

      - run:
          name: set version
          working_directory: ~/go/src/berty.tech/client
          command: make version.ios

      - run:
          name: make deps
          working_directory: ~/go/src/berty.tech/client
          command: retry -m 3 make deps.lerna

      - run:
          name: add environment
          working_directory: ~/go/src/berty.tech/client
          command: echo $RN_ENVIRONMENT > .environment

      - run:
          name: build app
          working_directory: ~/go/src/berty.tech/client
          command: |
            make fastlane.setup_circle
            retry -m 3 make fastlane.ios.house

      - store_artifacts:
          path: /tmp/fl

      - ios_save_cache:
          type: yolo

  # ios_yolo_test:
  #   executor: macos
  #   steps:
  #     - run:
  #         name: set Ruby version
  #         command: echo "ruby-2.4" > ~/.ruby-version

  #     - prepare
  #     - ios_restore_cache:
  #         type: yolo-test

  #     - run:
  #         name: make deps
  #         working_directory: ~/go/src/berty.tech/client
  #         command: retry -m 3 make deps.lerna

  #     - install_go
  #     - install_gomobile

  #     - run:
  #         name: install core
  #         working_directory: ~/go/src/berty.tech/core/platform/mobile
  #         command: |
  #           BUILD_MODE=ci-${CIRCLE_BRANCH} retry -m 3 make build.ios

  #     - run:
  #         name: install bundle
  #         working_directory: ~/go/src/berty.tech/client
  #         command: bundle check || retry -m 3 bundle install --path vendor/bundle

  #     - run:
  #         name: set version
  #         working_directory: ~/go/src/berty.tech/client
  #         command: make version.ios

  #     - run:
  #         name: make deps
  #         working_directory: ~/go/src/berty.tech/client
  #         command: retry -m 3 make deps.lerna

  #     - run:
  #         name: add environment
  #         working_directory: ~/go/src/berty.tech/client
  #         command: echo $RN_ENVIRONMENT > .environment

  #     - run:
  #         name: globally install clis needed for integration tests
  #         command: npm i -g cavy-cli react-native-cli

  #     - run:
  #         name: prepare integration tests
  #         working_directory: ~/go/src/berty.tech/client
  #         command: |
  #           make deps.ios

  #     - run:
  #         name: run integration tests
  #         working_directory: ~/go/src/berty.tech/client
  #         command: |
  #           ulimit -a
  #           ulimit -n 16384 && make test.house.ios

  #     - ios_save_cache:
  #         type: yolo-test

  web:
    executor: node
    steps:
      - prepare
      - web_restore_cache

      - run:
           working_directory: ~/go/src/berty.tech/client
           name: Build web client
           command: REPORT_HOST=cavy-report retry -m 3 make build.web
           no_output_timeout: 1h

      - web_save_cache

  web_test:
    executor: node
    steps:
      - prepare
      - setup_remote_docker
      - web_restore_cache
      - restore_cache:
          keys:
            - docker-berty-{{.Branch}}-{{.Revision}}
            - docker-berty-{{.Branch}}-
            - docker-berty-master-
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /tmp/caches/berty.tar | true
      - run:
          name: Run berty-core and client
          working_directory: ~/go/src/berty.tech/client
          command: make deps.test.web
          background: true
      - run:
          name: Run cavy report server
          working_directory: ~/go/src/berty.tech/client
          command: make test.web

  mac_staff:
    executor: macos
    steps:
      - prepare

      - mac_restore_cache:
          type: staff

      - install_go

      - run:
          name: install mac
          working_directory: ~/go/src/berty.tech/client
          command: |
            BUILD_MODE=ci-${CIRCLE_BRANCH} retry -m 3 make release.osx
            mv osx/dist/Berty*.dmg /tmp/Berty.dmg
      - store_artifacts:
          path: /tmp/Berty.dmg

      - mac_save_cache:
          type: staff

  mac_yolo:
    executor: macos
    steps:
      - prepare

      - mac_restore_cache:
          type: yolo

      - install_go

      - run:
          name: install mac
          working_directory: ~/go/src/berty.tech/client
          command: |
            BUILD_MODE=ci-${CIRCLE_BRANCH} retry -m 3 make release.osx
            mv osx/dist/Berty*.dmg /tmp/Berty.dmg
      - store_artifacts:
          path: /tmp/Berty.dmg

      - mac_save_cache:
          type: yolo

workflows:
  workflow:
    jobs:
      - lint
      - generate
      - core_go_test

      - docker_build:
          requires:
            - lint
            - generate
            - core_go_test

      - web_test:
          requires:
            - web
            - docker_build
      # web
      - web:
          requires:
            - lint
            - generate

      # android
      - android_staff:
          requires:
            - web
      - android_yolo:
          requires:
            - web
          filters:
            branches:
              only: master

      # ios
      - ios_staff:
          requires:
            - web
      # - ios_staff_test:
      #     requires:
      #       - web

      - ios_yolo:
         filters:
            branches:
             only: master
         requires:
           - web

      # - ios_yolo_test:
      #     filters:
      #       branches:
      #          only: master
      #     requires:
      #         - web


      # desktop
      - mac_staff:
          filters:
            branches:
              ignore: master
          requires:
            - web

      - mac_yolo:
          filters:
            branches:
              only: master
          requires:
            - web


  # todo later: build-services
