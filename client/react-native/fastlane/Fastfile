# # This file contains the fastlane.tools configuration
# # You can find the documentation at https://docs.fastlane.tools
# #
# # For a list of all available actions, check out
# #
# #     https://docs.fastlane.tools/actions
# #
# # For a list of all available plugins, check out
# #
# #     https://docs.fastlane.tools/plugins/available-plugins
# #

# # Uncomment the line if you want fastlane to automatically update itself
# # update_fastlane

fastlane_require 'spaceship'

fastlane_version "2.111.0"

default_platform :ios

platform :ios do
  lane :build do |options|

    if ENV['GYM_OPTION_METHOD']
      gym(
        # Use env to set more options
        export_options: {
          method: "#{ENV['GYM_OPTION_METHOD']}",
          signingStyle: "#{ENV['GYM_OPTION_SIGNING_STYLE']}",
          provisioningProfiles: {
            "#{ENV['GYM_OPTION_APP_ID']}": "#{ENV['GYM_OPTION_PROVISIONING_PROFILE']}"
          }
        }
      )
    else
      gym
    end

  end

  lane :voip_cert do |options|
    app_identifier = options[:app_identifier]
    apple_id = ENV['PEM_USERNAME']
    team_id = options[:team_id]
    output_path = ENV['PEM_OUTPUT_PATH']
    p12_password = options[:p12_password]
    filename_base = options[:pem_name].gsub('.pem', '')
    p12_cert_path = File.absolute_path(File.join(output_path, "#{filename_base}.p12"), File.expand_path('../..', __FILE__))
    x509_cert_path = File.absolute_path(File.join(output_path, "#{filename_base}.pem"), File.expand_path('../..', __FILE__))
    certificate_type = "voippush"
    active_days_limit = 30

    UI.important "Creating a new voip certificate for app '#{app_identifier}'."

    Spaceship.login(apple_id, nil)
    Spaceship.select_team(team_id: team_id)

    certificate_sorted = Spaceship.certificate.voip_push.all.sort { |x, y| y.expires <=> x.expires }

    existing_certificate = certificate_sorted.detect do |c|
      c.owner_name == app_identifier
    end

    if existing_certificate.nil? == false
      remaining_days = (existing_certificate.expires - Time.now) / 60 / 60 / 24
      UI.message("Existing push notification profile for '#{existing_certificate.owner_name}' is valid for #{remaining_days.round} more days.")
      if remaining_days > active_days_limit
        UI.success("You already have a push certificate, which is active for more than #{active_days_limit} more days. No need to create a new one")
        exit!
      end
    end

    csr, pkey = Spaceship::Certificate.create_certificate_signing_request
    cert = Spaceship::Certificate::VoipPush.create!(csr:csr,bundle_id:app_identifier)

    x509_certificate = cert.download

    p12 = OpenSSL::PKCS12.create(p12_password, certificate_type, pkey, x509_certificate)
    File.write(p12_cert_path, p12.to_der)
    UI.message("p12 certificate: ".green + Pathname.new(p12_cert_path).realpath.to_s)

    File.write(x509_cert_path, x509_certificate.to_pem + pkey.to_pem)
    UI.message("PEM: ".green + Pathname.new(x509_cert_path).realpath.to_s)
  end
end
