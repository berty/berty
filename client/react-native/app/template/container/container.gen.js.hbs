{{~#if (contains filename "api/node/service.proto")~}}

import { observer } from 'mobx-react'
import { Stream, StreamPagination } from './stream'
import { Unary } from './unary'
import { Entity } from './entity'
import { withStoreContext } from '@berty/store/context'
import { Component } from 'react'

  {{#with (lookup 'berty.node.CommitLog')}}
    {{#with fields.entity.resolvedType}}
      {{#each fields}}
        {{#with resolvedType}}
          {{#if fields.id}}

            @withStoreContext
            @observer
            export class {{name}}Entity extends Entity {
              fetch = () => {
                const { context, children, ...input } = this.props
                return context.node.service.{{case 'camel' name}}(input)
              }

              get store () {
                const { context } = this.props
                return context.entity.{{case 'camel' name}}
              }
            }
          {{/if}}
        {{/with}}
      {{/each}}
    {{/with}}
  {{/with}}

  {{#with (lookup 'berty.node.Service')}}
      {{#each methods}}
        {{#if responseStream}}

          @withStoreContext
          export class {{name}}ServiceNode extends Stream {
            get method () {
              return this.props.context.node.service.{{case 'camel' name}}
            }
          }

          {{#with (lookup 'berty.node.CommitLog.Entity')}}
            {{#each fields}}
              {{#if (eq resolvedType.name ../../resolvedResponseType.name)}}
                {{#with ../../this}}
                  {{#if (hasOwn resolvedRequestType.fields 'paginate')}}
                    @withStoreContext
                    class {{name}}ServiceNodePagination extends StreamPagination {
                      get store () {
                        return this.props.context.entity.{{case 'camel' resolvedResponseType.name}}
                      }
                      get method () {
                        return this.props.context.node.service.{{case 'camel' name}}
                      }
                    }
                    {{name}}ServiceNode.Pagination = {{name}}ServiceNodePagination
                  {{/if}}
                {{/with}}
              {{/if}}
            {{/each}}
          {{/with}}

        {{else}}

        @withStoreContext
        export class {{name}}ServiceNode extends Unary {
          get method () {
            return this.props.context.node.service.{{case 'camel' name}}
          }
        }
        {{/if}}
      {{/each}}

      @withStoreContext
      export class ServiceNode extends Component {
        {{#each methods}}
          static {{name}} = {{name}}ServiceNode
        {{/each}}

        render () {
            const { context } = this.props
            return (
              this.props.children(context)
            )
        }
      }
    {{/with}}

    @withStoreContext
    export class Store extends Component {
      static Entity = {
        {{#with (lookup 'berty.node.CommitLog')}}
          {{#with fields.entity.resolvedType}}
            {{#each fields}}
              {{#with resolvedType}}
                {{#if fields.id}}
                {{name}}: {{name}}Entity,
                {{/if}}
              {{/with}}
            {{/each}}
          {{/with}}
        {{/with}}
      }

      static Node = {
        Service: ServiceNode,
      }

      render () {
        const { context } = this.props
        return (
          this.props.children(context)
        )
      }
    }

    export default Store

{{~/if~}}
